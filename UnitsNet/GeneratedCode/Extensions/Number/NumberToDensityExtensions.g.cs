//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by \generate-code.bat.
//
//     Changes to this file will be lost when the code is regenerated.
//     The build server regenerates the code before each build and a pre-build
//     step will regenerate the code on each local build.
//
//     See https://github.com/angularsen/UnitsNet/wiki/Adding-a-New-Unit for how to add or edit units.
//
//     Add CustomCode\Quantities\MyUnit.extra.cs files to add code to generated quantities.
//     Add Extensions\MyUnitExtensions.cs to decorate quantities with new behavior.
//     Add UnitDefinitions\MyUnit.json and run GeneratUnits.bat to generate new units or quantities.
//
// </auto-generated>
//------------------------------------------------------------------------------

// Copyright (c) 2013 Andreas Gullberg Larsen (andreas.larsen84@gmail.com).
// https://github.com/angularsen/UnitsNet
// 
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
// 
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
// 
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
// THE SOFTWARE.

using System;
using UnitsNet.InternalHelpers.Calculators;

// Windows Runtime Component does not support extension methods and method overloads: https://msdn.microsoft.com/en-us/library/br230301.aspx
#if !WINDOWS_UWP
namespace UnitsNet.Extensions.NumberToDensity
{
    public static class NumberToDensityExtensions
    {
        #region CentigramPerDeciliter

        /// <inheritdoc cref="Density.FromCentigramsPerDeciLiter(double)"/>
        public static Density CentigramsPerDeciLiter(this int value) => (Density)Density.FromCentigramsPerDeciLiter(value);
	
        /// <inheritdoc cref="Density.FromCentigramsPerDeciLiter(double)"/>
        public static Density CentigramsPerDeciLiter(this long value) => (Density)Density.FromCentigramsPerDeciLiter(value);

        /// <inheritdoc cref="Density.FromCentigramsPerDeciLiter(double)"/>
        public static Density CentigramsPerDeciLiter(this double value) => (Density)Density.FromCentigramsPerDeciLiter(new Number<double, DoubleCalculator>(value));

        /// <inheritdoc cref="Density.FromCentigramsPerDeciLiter(double)"/>
        public static Density CentigramsPerDeciLiter(this float value) => (Density)Density.FromCentigramsPerDeciLiter(value);

        /// <inheritdoc cref="Density.FromCentigramsPerDeciLiter(double)"/>
        public static Density CentigramsPerDeciLiter(this decimal value) => (Density)Density.FromCentigramsPerDeciLiter(new Number<double, DoubleCalculator>(Decimal.ToDouble(value)));

        #endregion

        #region CentigramPerLiter

        /// <inheritdoc cref="Density.FromCentigramsPerLiter(double)"/>
        public static Density CentigramsPerLiter(this int value) => (Density)Density.FromCentigramsPerLiter(value);
	
        /// <inheritdoc cref="Density.FromCentigramsPerLiter(double)"/>
        public static Density CentigramsPerLiter(this long value) => (Density)Density.FromCentigramsPerLiter(value);

        /// <inheritdoc cref="Density.FromCentigramsPerLiter(double)"/>
        public static Density CentigramsPerLiter(this double value) => (Density)Density.FromCentigramsPerLiter(new Number<double, DoubleCalculator>(value));

        /// <inheritdoc cref="Density.FromCentigramsPerLiter(double)"/>
        public static Density CentigramsPerLiter(this float value) => (Density)Density.FromCentigramsPerLiter(value);

        /// <inheritdoc cref="Density.FromCentigramsPerLiter(double)"/>
        public static Density CentigramsPerLiter(this decimal value) => (Density)Density.FromCentigramsPerLiter(new Number<double, DoubleCalculator>(Decimal.ToDouble(value)));

        #endregion

        #region CentigramPerMilliliter

        /// <inheritdoc cref="Density.FromCentigramsPerMilliliter(double)"/>
        public static Density CentigramsPerMilliliter(this int value) => (Density)Density.FromCentigramsPerMilliliter(value);
	
        /// <inheritdoc cref="Density.FromCentigramsPerMilliliter(double)"/>
        public static Density CentigramsPerMilliliter(this long value) => (Density)Density.FromCentigramsPerMilliliter(value);

        /// <inheritdoc cref="Density.FromCentigramsPerMilliliter(double)"/>
        public static Density CentigramsPerMilliliter(this double value) => (Density)Density.FromCentigramsPerMilliliter(new Number<double, DoubleCalculator>(value));

        /// <inheritdoc cref="Density.FromCentigramsPerMilliliter(double)"/>
        public static Density CentigramsPerMilliliter(this float value) => (Density)Density.FromCentigramsPerMilliliter(value);

        /// <inheritdoc cref="Density.FromCentigramsPerMilliliter(double)"/>
        public static Density CentigramsPerMilliliter(this decimal value) => (Density)Density.FromCentigramsPerMilliliter(new Number<double, DoubleCalculator>(Decimal.ToDouble(value)));

        #endregion

        #region DecigramPerDeciliter

        /// <inheritdoc cref="Density.FromDecigramsPerDeciLiter(double)"/>
        public static Density DecigramsPerDeciLiter(this int value) => (Density)Density.FromDecigramsPerDeciLiter(value);
	
        /// <inheritdoc cref="Density.FromDecigramsPerDeciLiter(double)"/>
        public static Density DecigramsPerDeciLiter(this long value) => (Density)Density.FromDecigramsPerDeciLiter(value);

        /// <inheritdoc cref="Density.FromDecigramsPerDeciLiter(double)"/>
        public static Density DecigramsPerDeciLiter(this double value) => (Density)Density.FromDecigramsPerDeciLiter(new Number<double, DoubleCalculator>(value));

        /// <inheritdoc cref="Density.FromDecigramsPerDeciLiter(double)"/>
        public static Density DecigramsPerDeciLiter(this float value) => (Density)Density.FromDecigramsPerDeciLiter(value);

        /// <inheritdoc cref="Density.FromDecigramsPerDeciLiter(double)"/>
        public static Density DecigramsPerDeciLiter(this decimal value) => (Density)Density.FromDecigramsPerDeciLiter(new Number<double, DoubleCalculator>(Decimal.ToDouble(value)));

        #endregion

        #region DecigramPerLiter

        /// <inheritdoc cref="Density.FromDecigramsPerLiter(double)"/>
        public static Density DecigramsPerLiter(this int value) => (Density)Density.FromDecigramsPerLiter(value);
	
        /// <inheritdoc cref="Density.FromDecigramsPerLiter(double)"/>
        public static Density DecigramsPerLiter(this long value) => (Density)Density.FromDecigramsPerLiter(value);

        /// <inheritdoc cref="Density.FromDecigramsPerLiter(double)"/>
        public static Density DecigramsPerLiter(this double value) => (Density)Density.FromDecigramsPerLiter(new Number<double, DoubleCalculator>(value));

        /// <inheritdoc cref="Density.FromDecigramsPerLiter(double)"/>
        public static Density DecigramsPerLiter(this float value) => (Density)Density.FromDecigramsPerLiter(value);

        /// <inheritdoc cref="Density.FromDecigramsPerLiter(double)"/>
        public static Density DecigramsPerLiter(this decimal value) => (Density)Density.FromDecigramsPerLiter(new Number<double, DoubleCalculator>(Decimal.ToDouble(value)));

        #endregion

        #region DecigramPerMilliliter

        /// <inheritdoc cref="Density.FromDecigramsPerMilliliter(double)"/>
        public static Density DecigramsPerMilliliter(this int value) => (Density)Density.FromDecigramsPerMilliliter(value);
	
        /// <inheritdoc cref="Density.FromDecigramsPerMilliliter(double)"/>
        public static Density DecigramsPerMilliliter(this long value) => (Density)Density.FromDecigramsPerMilliliter(value);

        /// <inheritdoc cref="Density.FromDecigramsPerMilliliter(double)"/>
        public static Density DecigramsPerMilliliter(this double value) => (Density)Density.FromDecigramsPerMilliliter(new Number<double, DoubleCalculator>(value));

        /// <inheritdoc cref="Density.FromDecigramsPerMilliliter(double)"/>
        public static Density DecigramsPerMilliliter(this float value) => (Density)Density.FromDecigramsPerMilliliter(value);

        /// <inheritdoc cref="Density.FromDecigramsPerMilliliter(double)"/>
        public static Density DecigramsPerMilliliter(this decimal value) => (Density)Density.FromDecigramsPerMilliliter(new Number<double, DoubleCalculator>(Decimal.ToDouble(value)));

        #endregion

        #region GramPerCubicCentimeter

        /// <inheritdoc cref="Density.FromGramsPerCubicCentimeter(double)"/>
        public static Density GramsPerCubicCentimeter(this int value) => (Density)Density.FromGramsPerCubicCentimeter(value);
	
        /// <inheritdoc cref="Density.FromGramsPerCubicCentimeter(double)"/>
        public static Density GramsPerCubicCentimeter(this long value) => (Density)Density.FromGramsPerCubicCentimeter(value);

        /// <inheritdoc cref="Density.FromGramsPerCubicCentimeter(double)"/>
        public static Density GramsPerCubicCentimeter(this double value) => (Density)Density.FromGramsPerCubicCentimeter(new Number<double, DoubleCalculator>(value));

        /// <inheritdoc cref="Density.FromGramsPerCubicCentimeter(double)"/>
        public static Density GramsPerCubicCentimeter(this float value) => (Density)Density.FromGramsPerCubicCentimeter(value);

        /// <inheritdoc cref="Density.FromGramsPerCubicCentimeter(double)"/>
        public static Density GramsPerCubicCentimeter(this decimal value) => (Density)Density.FromGramsPerCubicCentimeter(new Number<double, DoubleCalculator>(Decimal.ToDouble(value)));

        #endregion

        #region GramPerCubicMeter

        /// <inheritdoc cref="Density.FromGramsPerCubicMeter(double)"/>
        public static Density GramsPerCubicMeter(this int value) => (Density)Density.FromGramsPerCubicMeter(value);
	
        /// <inheritdoc cref="Density.FromGramsPerCubicMeter(double)"/>
        public static Density GramsPerCubicMeter(this long value) => (Density)Density.FromGramsPerCubicMeter(value);

        /// <inheritdoc cref="Density.FromGramsPerCubicMeter(double)"/>
        public static Density GramsPerCubicMeter(this double value) => (Density)Density.FromGramsPerCubicMeter(new Number<double, DoubleCalculator>(value));

        /// <inheritdoc cref="Density.FromGramsPerCubicMeter(double)"/>
        public static Density GramsPerCubicMeter(this float value) => (Density)Density.FromGramsPerCubicMeter(value);

        /// <inheritdoc cref="Density.FromGramsPerCubicMeter(double)"/>
        public static Density GramsPerCubicMeter(this decimal value) => (Density)Density.FromGramsPerCubicMeter(new Number<double, DoubleCalculator>(Decimal.ToDouble(value)));

        #endregion

        #region GramPerCubicMillimeter

        /// <inheritdoc cref="Density.FromGramsPerCubicMillimeter(double)"/>
        public static Density GramsPerCubicMillimeter(this int value) => (Density)Density.FromGramsPerCubicMillimeter(value);
	
        /// <inheritdoc cref="Density.FromGramsPerCubicMillimeter(double)"/>
        public static Density GramsPerCubicMillimeter(this long value) => (Density)Density.FromGramsPerCubicMillimeter(value);

        /// <inheritdoc cref="Density.FromGramsPerCubicMillimeter(double)"/>
        public static Density GramsPerCubicMillimeter(this double value) => (Density)Density.FromGramsPerCubicMillimeter(new Number<double, DoubleCalculator>(value));

        /// <inheritdoc cref="Density.FromGramsPerCubicMillimeter(double)"/>
        public static Density GramsPerCubicMillimeter(this float value) => (Density)Density.FromGramsPerCubicMillimeter(value);

        /// <inheritdoc cref="Density.FromGramsPerCubicMillimeter(double)"/>
        public static Density GramsPerCubicMillimeter(this decimal value) => (Density)Density.FromGramsPerCubicMillimeter(new Number<double, DoubleCalculator>(Decimal.ToDouble(value)));

        #endregion

        #region GramPerDeciliter

        /// <inheritdoc cref="Density.FromGramsPerDeciLiter(double)"/>
        public static Density GramsPerDeciLiter(this int value) => (Density)Density.FromGramsPerDeciLiter(value);
	
        /// <inheritdoc cref="Density.FromGramsPerDeciLiter(double)"/>
        public static Density GramsPerDeciLiter(this long value) => (Density)Density.FromGramsPerDeciLiter(value);

        /// <inheritdoc cref="Density.FromGramsPerDeciLiter(double)"/>
        public static Density GramsPerDeciLiter(this double value) => (Density)Density.FromGramsPerDeciLiter(new Number<double, DoubleCalculator>(value));

        /// <inheritdoc cref="Density.FromGramsPerDeciLiter(double)"/>
        public static Density GramsPerDeciLiter(this float value) => (Density)Density.FromGramsPerDeciLiter(value);

        /// <inheritdoc cref="Density.FromGramsPerDeciLiter(double)"/>
        public static Density GramsPerDeciLiter(this decimal value) => (Density)Density.FromGramsPerDeciLiter(new Number<double, DoubleCalculator>(Decimal.ToDouble(value)));

        #endregion

        #region GramPerLiter

        /// <inheritdoc cref="Density.FromGramsPerLiter(double)"/>
        public static Density GramsPerLiter(this int value) => (Density)Density.FromGramsPerLiter(value);
	
        /// <inheritdoc cref="Density.FromGramsPerLiter(double)"/>
        public static Density GramsPerLiter(this long value) => (Density)Density.FromGramsPerLiter(value);

        /// <inheritdoc cref="Density.FromGramsPerLiter(double)"/>
        public static Density GramsPerLiter(this double value) => (Density)Density.FromGramsPerLiter(new Number<double, DoubleCalculator>(value));

        /// <inheritdoc cref="Density.FromGramsPerLiter(double)"/>
        public static Density GramsPerLiter(this float value) => (Density)Density.FromGramsPerLiter(value);

        /// <inheritdoc cref="Density.FromGramsPerLiter(double)"/>
        public static Density GramsPerLiter(this decimal value) => (Density)Density.FromGramsPerLiter(new Number<double, DoubleCalculator>(Decimal.ToDouble(value)));

        #endregion

        #region GramPerMilliliter

        /// <inheritdoc cref="Density.FromGramsPerMilliliter(double)"/>
        public static Density GramsPerMilliliter(this int value) => (Density)Density.FromGramsPerMilliliter(value);
	
        /// <inheritdoc cref="Density.FromGramsPerMilliliter(double)"/>
        public static Density GramsPerMilliliter(this long value) => (Density)Density.FromGramsPerMilliliter(value);

        /// <inheritdoc cref="Density.FromGramsPerMilliliter(double)"/>
        public static Density GramsPerMilliliter(this double value) => (Density)Density.FromGramsPerMilliliter(new Number<double, DoubleCalculator>(value));

        /// <inheritdoc cref="Density.FromGramsPerMilliliter(double)"/>
        public static Density GramsPerMilliliter(this float value) => (Density)Density.FromGramsPerMilliliter(value);

        /// <inheritdoc cref="Density.FromGramsPerMilliliter(double)"/>
        public static Density GramsPerMilliliter(this decimal value) => (Density)Density.FromGramsPerMilliliter(new Number<double, DoubleCalculator>(Decimal.ToDouble(value)));

        #endregion

        #region KilogramPerCubicCentimeter

        /// <inheritdoc cref="Density.FromKilogramsPerCubicCentimeter(double)"/>
        public static Density KilogramsPerCubicCentimeter(this int value) => (Density)Density.FromKilogramsPerCubicCentimeter(value);
	
        /// <inheritdoc cref="Density.FromKilogramsPerCubicCentimeter(double)"/>
        public static Density KilogramsPerCubicCentimeter(this long value) => (Density)Density.FromKilogramsPerCubicCentimeter(value);

        /// <inheritdoc cref="Density.FromKilogramsPerCubicCentimeter(double)"/>
        public static Density KilogramsPerCubicCentimeter(this double value) => (Density)Density.FromKilogramsPerCubicCentimeter(new Number<double, DoubleCalculator>(value));

        /// <inheritdoc cref="Density.FromKilogramsPerCubicCentimeter(double)"/>
        public static Density KilogramsPerCubicCentimeter(this float value) => (Density)Density.FromKilogramsPerCubicCentimeter(value);

        /// <inheritdoc cref="Density.FromKilogramsPerCubicCentimeter(double)"/>
        public static Density KilogramsPerCubicCentimeter(this decimal value) => (Density)Density.FromKilogramsPerCubicCentimeter(new Number<double, DoubleCalculator>(Decimal.ToDouble(value)));

        #endregion

        #region KilogramPerCubicMeter

        /// <inheritdoc cref="Density.FromKilogramsPerCubicMeter(double)"/>
        public static Density KilogramsPerCubicMeter(this int value) => (Density)Density.FromKilogramsPerCubicMeter(value);
	
        /// <inheritdoc cref="Density.FromKilogramsPerCubicMeter(double)"/>
        public static Density KilogramsPerCubicMeter(this long value) => (Density)Density.FromKilogramsPerCubicMeter(value);

        /// <inheritdoc cref="Density.FromKilogramsPerCubicMeter(double)"/>
        public static Density KilogramsPerCubicMeter(this double value) => (Density)Density.FromKilogramsPerCubicMeter(new Number<double, DoubleCalculator>(value));

        /// <inheritdoc cref="Density.FromKilogramsPerCubicMeter(double)"/>
        public static Density KilogramsPerCubicMeter(this float value) => (Density)Density.FromKilogramsPerCubicMeter(value);

        /// <inheritdoc cref="Density.FromKilogramsPerCubicMeter(double)"/>
        public static Density KilogramsPerCubicMeter(this decimal value) => (Density)Density.FromKilogramsPerCubicMeter(new Number<double, DoubleCalculator>(Decimal.ToDouble(value)));

        #endregion

        #region KilogramPerCubicMillimeter

        /// <inheritdoc cref="Density.FromKilogramsPerCubicMillimeter(double)"/>
        public static Density KilogramsPerCubicMillimeter(this int value) => (Density)Density.FromKilogramsPerCubicMillimeter(value);
	
        /// <inheritdoc cref="Density.FromKilogramsPerCubicMillimeter(double)"/>
        public static Density KilogramsPerCubicMillimeter(this long value) => (Density)Density.FromKilogramsPerCubicMillimeter(value);

        /// <inheritdoc cref="Density.FromKilogramsPerCubicMillimeter(double)"/>
        public static Density KilogramsPerCubicMillimeter(this double value) => (Density)Density.FromKilogramsPerCubicMillimeter(new Number<double, DoubleCalculator>(value));

        /// <inheritdoc cref="Density.FromKilogramsPerCubicMillimeter(double)"/>
        public static Density KilogramsPerCubicMillimeter(this float value) => (Density)Density.FromKilogramsPerCubicMillimeter(value);

        /// <inheritdoc cref="Density.FromKilogramsPerCubicMillimeter(double)"/>
        public static Density KilogramsPerCubicMillimeter(this decimal value) => (Density)Density.FromKilogramsPerCubicMillimeter(new Number<double, DoubleCalculator>(Decimal.ToDouble(value)));

        #endregion

        #region KilopoundPerCubicFoot

        /// <inheritdoc cref="Density.FromKilopoundsPerCubicFoot(double)"/>
        public static Density KilopoundsPerCubicFoot(this int value) => (Density)Density.FromKilopoundsPerCubicFoot(value);
	
        /// <inheritdoc cref="Density.FromKilopoundsPerCubicFoot(double)"/>
        public static Density KilopoundsPerCubicFoot(this long value) => (Density)Density.FromKilopoundsPerCubicFoot(value);

        /// <inheritdoc cref="Density.FromKilopoundsPerCubicFoot(double)"/>
        public static Density KilopoundsPerCubicFoot(this double value) => (Density)Density.FromKilopoundsPerCubicFoot(new Number<double, DoubleCalculator>(value));

        /// <inheritdoc cref="Density.FromKilopoundsPerCubicFoot(double)"/>
        public static Density KilopoundsPerCubicFoot(this float value) => (Density)Density.FromKilopoundsPerCubicFoot(value);

        /// <inheritdoc cref="Density.FromKilopoundsPerCubicFoot(double)"/>
        public static Density KilopoundsPerCubicFoot(this decimal value) => (Density)Density.FromKilopoundsPerCubicFoot(new Number<double, DoubleCalculator>(Decimal.ToDouble(value)));

        #endregion

        #region KilopoundPerCubicInch

        /// <inheritdoc cref="Density.FromKilopoundsPerCubicInch(double)"/>
        public static Density KilopoundsPerCubicInch(this int value) => (Density)Density.FromKilopoundsPerCubicInch(value);
	
        /// <inheritdoc cref="Density.FromKilopoundsPerCubicInch(double)"/>
        public static Density KilopoundsPerCubicInch(this long value) => (Density)Density.FromKilopoundsPerCubicInch(value);

        /// <inheritdoc cref="Density.FromKilopoundsPerCubicInch(double)"/>
        public static Density KilopoundsPerCubicInch(this double value) => (Density)Density.FromKilopoundsPerCubicInch(new Number<double, DoubleCalculator>(value));

        /// <inheritdoc cref="Density.FromKilopoundsPerCubicInch(double)"/>
        public static Density KilopoundsPerCubicInch(this float value) => (Density)Density.FromKilopoundsPerCubicInch(value);

        /// <inheritdoc cref="Density.FromKilopoundsPerCubicInch(double)"/>
        public static Density KilopoundsPerCubicInch(this decimal value) => (Density)Density.FromKilopoundsPerCubicInch(new Number<double, DoubleCalculator>(Decimal.ToDouble(value)));

        #endregion

        #region MicrogramPerDeciliter

        /// <inheritdoc cref="Density.FromMicrogramsPerDeciLiter(double)"/>
        public static Density MicrogramsPerDeciLiter(this int value) => (Density)Density.FromMicrogramsPerDeciLiter(value);
	
        /// <inheritdoc cref="Density.FromMicrogramsPerDeciLiter(double)"/>
        public static Density MicrogramsPerDeciLiter(this long value) => (Density)Density.FromMicrogramsPerDeciLiter(value);

        /// <inheritdoc cref="Density.FromMicrogramsPerDeciLiter(double)"/>
        public static Density MicrogramsPerDeciLiter(this double value) => (Density)Density.FromMicrogramsPerDeciLiter(new Number<double, DoubleCalculator>(value));

        /// <inheritdoc cref="Density.FromMicrogramsPerDeciLiter(double)"/>
        public static Density MicrogramsPerDeciLiter(this float value) => (Density)Density.FromMicrogramsPerDeciLiter(value);

        /// <inheritdoc cref="Density.FromMicrogramsPerDeciLiter(double)"/>
        public static Density MicrogramsPerDeciLiter(this decimal value) => (Density)Density.FromMicrogramsPerDeciLiter(new Number<double, DoubleCalculator>(Decimal.ToDouble(value)));

        #endregion

        #region MicrogramPerLiter

        /// <inheritdoc cref="Density.FromMicrogramsPerLiter(double)"/>
        public static Density MicrogramsPerLiter(this int value) => (Density)Density.FromMicrogramsPerLiter(value);
	
        /// <inheritdoc cref="Density.FromMicrogramsPerLiter(double)"/>
        public static Density MicrogramsPerLiter(this long value) => (Density)Density.FromMicrogramsPerLiter(value);

        /// <inheritdoc cref="Density.FromMicrogramsPerLiter(double)"/>
        public static Density MicrogramsPerLiter(this double value) => (Density)Density.FromMicrogramsPerLiter(new Number<double, DoubleCalculator>(value));

        /// <inheritdoc cref="Density.FromMicrogramsPerLiter(double)"/>
        public static Density MicrogramsPerLiter(this float value) => (Density)Density.FromMicrogramsPerLiter(value);

        /// <inheritdoc cref="Density.FromMicrogramsPerLiter(double)"/>
        public static Density MicrogramsPerLiter(this decimal value) => (Density)Density.FromMicrogramsPerLiter(new Number<double, DoubleCalculator>(Decimal.ToDouble(value)));

        #endregion

        #region MicrogramPerMilliliter

        /// <inheritdoc cref="Density.FromMicrogramsPerMilliliter(double)"/>
        public static Density MicrogramsPerMilliliter(this int value) => (Density)Density.FromMicrogramsPerMilliliter(value);
	
        /// <inheritdoc cref="Density.FromMicrogramsPerMilliliter(double)"/>
        public static Density MicrogramsPerMilliliter(this long value) => (Density)Density.FromMicrogramsPerMilliliter(value);

        /// <inheritdoc cref="Density.FromMicrogramsPerMilliliter(double)"/>
        public static Density MicrogramsPerMilliliter(this double value) => (Density)Density.FromMicrogramsPerMilliliter(new Number<double, DoubleCalculator>(value));

        /// <inheritdoc cref="Density.FromMicrogramsPerMilliliter(double)"/>
        public static Density MicrogramsPerMilliliter(this float value) => (Density)Density.FromMicrogramsPerMilliliter(value);

        /// <inheritdoc cref="Density.FromMicrogramsPerMilliliter(double)"/>
        public static Density MicrogramsPerMilliliter(this decimal value) => (Density)Density.FromMicrogramsPerMilliliter(new Number<double, DoubleCalculator>(Decimal.ToDouble(value)));

        #endregion

        #region MilligramPerDeciliter

        /// <inheritdoc cref="Density.FromMilligramsPerDeciLiter(double)"/>
        public static Density MilligramsPerDeciLiter(this int value) => (Density)Density.FromMilligramsPerDeciLiter(value);
	
        /// <inheritdoc cref="Density.FromMilligramsPerDeciLiter(double)"/>
        public static Density MilligramsPerDeciLiter(this long value) => (Density)Density.FromMilligramsPerDeciLiter(value);

        /// <inheritdoc cref="Density.FromMilligramsPerDeciLiter(double)"/>
        public static Density MilligramsPerDeciLiter(this double value) => (Density)Density.FromMilligramsPerDeciLiter(new Number<double, DoubleCalculator>(value));

        /// <inheritdoc cref="Density.FromMilligramsPerDeciLiter(double)"/>
        public static Density MilligramsPerDeciLiter(this float value) => (Density)Density.FromMilligramsPerDeciLiter(value);

        /// <inheritdoc cref="Density.FromMilligramsPerDeciLiter(double)"/>
        public static Density MilligramsPerDeciLiter(this decimal value) => (Density)Density.FromMilligramsPerDeciLiter(new Number<double, DoubleCalculator>(Decimal.ToDouble(value)));

        #endregion

        #region MilligramPerLiter

        /// <inheritdoc cref="Density.FromMilligramsPerLiter(double)"/>
        public static Density MilligramsPerLiter(this int value) => (Density)Density.FromMilligramsPerLiter(value);
	
        /// <inheritdoc cref="Density.FromMilligramsPerLiter(double)"/>
        public static Density MilligramsPerLiter(this long value) => (Density)Density.FromMilligramsPerLiter(value);

        /// <inheritdoc cref="Density.FromMilligramsPerLiter(double)"/>
        public static Density MilligramsPerLiter(this double value) => (Density)Density.FromMilligramsPerLiter(new Number<double, DoubleCalculator>(value));

        /// <inheritdoc cref="Density.FromMilligramsPerLiter(double)"/>
        public static Density MilligramsPerLiter(this float value) => (Density)Density.FromMilligramsPerLiter(value);

        /// <inheritdoc cref="Density.FromMilligramsPerLiter(double)"/>
        public static Density MilligramsPerLiter(this decimal value) => (Density)Density.FromMilligramsPerLiter(new Number<double, DoubleCalculator>(Decimal.ToDouble(value)));

        #endregion

        #region MilligramPerMilliliter

        /// <inheritdoc cref="Density.FromMilligramsPerMilliliter(double)"/>
        public static Density MilligramsPerMilliliter(this int value) => (Density)Density.FromMilligramsPerMilliliter(value);
	
        /// <inheritdoc cref="Density.FromMilligramsPerMilliliter(double)"/>
        public static Density MilligramsPerMilliliter(this long value) => (Density)Density.FromMilligramsPerMilliliter(value);

        /// <inheritdoc cref="Density.FromMilligramsPerMilliliter(double)"/>
        public static Density MilligramsPerMilliliter(this double value) => (Density)Density.FromMilligramsPerMilliliter(new Number<double, DoubleCalculator>(value));

        /// <inheritdoc cref="Density.FromMilligramsPerMilliliter(double)"/>
        public static Density MilligramsPerMilliliter(this float value) => (Density)Density.FromMilligramsPerMilliliter(value);

        /// <inheritdoc cref="Density.FromMilligramsPerMilliliter(double)"/>
        public static Density MilligramsPerMilliliter(this decimal value) => (Density)Density.FromMilligramsPerMilliliter(new Number<double, DoubleCalculator>(Decimal.ToDouble(value)));

        #endregion

        #region NanogramPerDeciliter

        /// <inheritdoc cref="Density.FromNanogramsPerDeciLiter(double)"/>
        public static Density NanogramsPerDeciLiter(this int value) => (Density)Density.FromNanogramsPerDeciLiter(value);
	
        /// <inheritdoc cref="Density.FromNanogramsPerDeciLiter(double)"/>
        public static Density NanogramsPerDeciLiter(this long value) => (Density)Density.FromNanogramsPerDeciLiter(value);

        /// <inheritdoc cref="Density.FromNanogramsPerDeciLiter(double)"/>
        public static Density NanogramsPerDeciLiter(this double value) => (Density)Density.FromNanogramsPerDeciLiter(new Number<double, DoubleCalculator>(value));

        /// <inheritdoc cref="Density.FromNanogramsPerDeciLiter(double)"/>
        public static Density NanogramsPerDeciLiter(this float value) => (Density)Density.FromNanogramsPerDeciLiter(value);

        /// <inheritdoc cref="Density.FromNanogramsPerDeciLiter(double)"/>
        public static Density NanogramsPerDeciLiter(this decimal value) => (Density)Density.FromNanogramsPerDeciLiter(new Number<double, DoubleCalculator>(Decimal.ToDouble(value)));

        #endregion

        #region NanogramPerLiter

        /// <inheritdoc cref="Density.FromNanogramsPerLiter(double)"/>
        public static Density NanogramsPerLiter(this int value) => (Density)Density.FromNanogramsPerLiter(value);
	
        /// <inheritdoc cref="Density.FromNanogramsPerLiter(double)"/>
        public static Density NanogramsPerLiter(this long value) => (Density)Density.FromNanogramsPerLiter(value);

        /// <inheritdoc cref="Density.FromNanogramsPerLiter(double)"/>
        public static Density NanogramsPerLiter(this double value) => (Density)Density.FromNanogramsPerLiter(new Number<double, DoubleCalculator>(value));

        /// <inheritdoc cref="Density.FromNanogramsPerLiter(double)"/>
        public static Density NanogramsPerLiter(this float value) => (Density)Density.FromNanogramsPerLiter(value);

        /// <inheritdoc cref="Density.FromNanogramsPerLiter(double)"/>
        public static Density NanogramsPerLiter(this decimal value) => (Density)Density.FromNanogramsPerLiter(new Number<double, DoubleCalculator>(Decimal.ToDouble(value)));

        #endregion

        #region NanogramPerMilliliter

        /// <inheritdoc cref="Density.FromNanogramsPerMilliliter(double)"/>
        public static Density NanogramsPerMilliliter(this int value) => (Density)Density.FromNanogramsPerMilliliter(value);
	
        /// <inheritdoc cref="Density.FromNanogramsPerMilliliter(double)"/>
        public static Density NanogramsPerMilliliter(this long value) => (Density)Density.FromNanogramsPerMilliliter(value);

        /// <inheritdoc cref="Density.FromNanogramsPerMilliliter(double)"/>
        public static Density NanogramsPerMilliliter(this double value) => (Density)Density.FromNanogramsPerMilliliter(new Number<double, DoubleCalculator>(value));

        /// <inheritdoc cref="Density.FromNanogramsPerMilliliter(double)"/>
        public static Density NanogramsPerMilliliter(this float value) => (Density)Density.FromNanogramsPerMilliliter(value);

        /// <inheritdoc cref="Density.FromNanogramsPerMilliliter(double)"/>
        public static Density NanogramsPerMilliliter(this decimal value) => (Density)Density.FromNanogramsPerMilliliter(new Number<double, DoubleCalculator>(Decimal.ToDouble(value)));

        #endregion

        #region PicogramPerDeciliter

        /// <inheritdoc cref="Density.FromPicogramsPerDeciLiter(double)"/>
        public static Density PicogramsPerDeciLiter(this int value) => (Density)Density.FromPicogramsPerDeciLiter(value);
	
        /// <inheritdoc cref="Density.FromPicogramsPerDeciLiter(double)"/>
        public static Density PicogramsPerDeciLiter(this long value) => (Density)Density.FromPicogramsPerDeciLiter(value);

        /// <inheritdoc cref="Density.FromPicogramsPerDeciLiter(double)"/>
        public static Density PicogramsPerDeciLiter(this double value) => (Density)Density.FromPicogramsPerDeciLiter(new Number<double, DoubleCalculator>(value));

        /// <inheritdoc cref="Density.FromPicogramsPerDeciLiter(double)"/>
        public static Density PicogramsPerDeciLiter(this float value) => (Density)Density.FromPicogramsPerDeciLiter(value);

        /// <inheritdoc cref="Density.FromPicogramsPerDeciLiter(double)"/>
        public static Density PicogramsPerDeciLiter(this decimal value) => (Density)Density.FromPicogramsPerDeciLiter(new Number<double, DoubleCalculator>(Decimal.ToDouble(value)));

        #endregion

        #region PicogramPerLiter

        /// <inheritdoc cref="Density.FromPicogramsPerLiter(double)"/>
        public static Density PicogramsPerLiter(this int value) => (Density)Density.FromPicogramsPerLiter(value);
	
        /// <inheritdoc cref="Density.FromPicogramsPerLiter(double)"/>
        public static Density PicogramsPerLiter(this long value) => (Density)Density.FromPicogramsPerLiter(value);

        /// <inheritdoc cref="Density.FromPicogramsPerLiter(double)"/>
        public static Density PicogramsPerLiter(this double value) => (Density)Density.FromPicogramsPerLiter(new Number<double, DoubleCalculator>(value));

        /// <inheritdoc cref="Density.FromPicogramsPerLiter(double)"/>
        public static Density PicogramsPerLiter(this float value) => (Density)Density.FromPicogramsPerLiter(value);

        /// <inheritdoc cref="Density.FromPicogramsPerLiter(double)"/>
        public static Density PicogramsPerLiter(this decimal value) => (Density)Density.FromPicogramsPerLiter(new Number<double, DoubleCalculator>(Decimal.ToDouble(value)));

        #endregion

        #region PicogramPerMilliliter

        /// <inheritdoc cref="Density.FromPicogramsPerMilliliter(double)"/>
        public static Density PicogramsPerMilliliter(this int value) => (Density)Density.FromPicogramsPerMilliliter(value);
	
        /// <inheritdoc cref="Density.FromPicogramsPerMilliliter(double)"/>
        public static Density PicogramsPerMilliliter(this long value) => (Density)Density.FromPicogramsPerMilliliter(value);

        /// <inheritdoc cref="Density.FromPicogramsPerMilliliter(double)"/>
        public static Density PicogramsPerMilliliter(this double value) => (Density)Density.FromPicogramsPerMilliliter(new Number<double, DoubleCalculator>(value));

        /// <inheritdoc cref="Density.FromPicogramsPerMilliliter(double)"/>
        public static Density PicogramsPerMilliliter(this float value) => (Density)Density.FromPicogramsPerMilliliter(value);

        /// <inheritdoc cref="Density.FromPicogramsPerMilliliter(double)"/>
        public static Density PicogramsPerMilliliter(this decimal value) => (Density)Density.FromPicogramsPerMilliliter(new Number<double, DoubleCalculator>(Decimal.ToDouble(value)));

        #endregion

        #region PoundPerCubicFoot

        /// <inheritdoc cref="Density.FromPoundsPerCubicFoot(double)"/>
        public static Density PoundsPerCubicFoot(this int value) => (Density)Density.FromPoundsPerCubicFoot(value);
	
        /// <inheritdoc cref="Density.FromPoundsPerCubicFoot(double)"/>
        public static Density PoundsPerCubicFoot(this long value) => (Density)Density.FromPoundsPerCubicFoot(value);

        /// <inheritdoc cref="Density.FromPoundsPerCubicFoot(double)"/>
        public static Density PoundsPerCubicFoot(this double value) => (Density)Density.FromPoundsPerCubicFoot(new Number<double, DoubleCalculator>(value));

        /// <inheritdoc cref="Density.FromPoundsPerCubicFoot(double)"/>
        public static Density PoundsPerCubicFoot(this float value) => (Density)Density.FromPoundsPerCubicFoot(value);

        /// <inheritdoc cref="Density.FromPoundsPerCubicFoot(double)"/>
        public static Density PoundsPerCubicFoot(this decimal value) => (Density)Density.FromPoundsPerCubicFoot(new Number<double, DoubleCalculator>(Decimal.ToDouble(value)));

        #endregion

        #region PoundPerCubicInch

        /// <inheritdoc cref="Density.FromPoundsPerCubicInch(double)"/>
        public static Density PoundsPerCubicInch(this int value) => (Density)Density.FromPoundsPerCubicInch(value);
	
        /// <inheritdoc cref="Density.FromPoundsPerCubicInch(double)"/>
        public static Density PoundsPerCubicInch(this long value) => (Density)Density.FromPoundsPerCubicInch(value);

        /// <inheritdoc cref="Density.FromPoundsPerCubicInch(double)"/>
        public static Density PoundsPerCubicInch(this double value) => (Density)Density.FromPoundsPerCubicInch(new Number<double, DoubleCalculator>(value));

        /// <inheritdoc cref="Density.FromPoundsPerCubicInch(double)"/>
        public static Density PoundsPerCubicInch(this float value) => (Density)Density.FromPoundsPerCubicInch(value);

        /// <inheritdoc cref="Density.FromPoundsPerCubicInch(double)"/>
        public static Density PoundsPerCubicInch(this decimal value) => (Density)Density.FromPoundsPerCubicInch(new Number<double, DoubleCalculator>(Decimal.ToDouble(value)));

        #endregion

        #region SlugPerCubicFoot

        /// <inheritdoc cref="Density.FromSlugsPerCubicFoot(double)"/>
        public static Density SlugsPerCubicFoot(this int value) => (Density)Density.FromSlugsPerCubicFoot(value);
	
        /// <inheritdoc cref="Density.FromSlugsPerCubicFoot(double)"/>
        public static Density SlugsPerCubicFoot(this long value) => (Density)Density.FromSlugsPerCubicFoot(value);

        /// <inheritdoc cref="Density.FromSlugsPerCubicFoot(double)"/>
        public static Density SlugsPerCubicFoot(this double value) => (Density)Density.FromSlugsPerCubicFoot(new Number<double, DoubleCalculator>(value));

        /// <inheritdoc cref="Density.FromSlugsPerCubicFoot(double)"/>
        public static Density SlugsPerCubicFoot(this float value) => (Density)Density.FromSlugsPerCubicFoot(value);

        /// <inheritdoc cref="Density.FromSlugsPerCubicFoot(double)"/>
        public static Density SlugsPerCubicFoot(this decimal value) => (Density)Density.FromSlugsPerCubicFoot(new Number<double, DoubleCalculator>(Decimal.ToDouble(value)));

        #endregion

        #region TonnePerCubicCentimeter

        /// <inheritdoc cref="Density.FromTonnesPerCubicCentimeter(double)"/>
        public static Density TonnesPerCubicCentimeter(this int value) => (Density)Density.FromTonnesPerCubicCentimeter(value);
	
        /// <inheritdoc cref="Density.FromTonnesPerCubicCentimeter(double)"/>
        public static Density TonnesPerCubicCentimeter(this long value) => (Density)Density.FromTonnesPerCubicCentimeter(value);

        /// <inheritdoc cref="Density.FromTonnesPerCubicCentimeter(double)"/>
        public static Density TonnesPerCubicCentimeter(this double value) => (Density)Density.FromTonnesPerCubicCentimeter(new Number<double, DoubleCalculator>(value));

        /// <inheritdoc cref="Density.FromTonnesPerCubicCentimeter(double)"/>
        public static Density TonnesPerCubicCentimeter(this float value) => (Density)Density.FromTonnesPerCubicCentimeter(value);

        /// <inheritdoc cref="Density.FromTonnesPerCubicCentimeter(double)"/>
        public static Density TonnesPerCubicCentimeter(this decimal value) => (Density)Density.FromTonnesPerCubicCentimeter(new Number<double, DoubleCalculator>(Decimal.ToDouble(value)));

        #endregion

        #region TonnePerCubicMeter

        /// <inheritdoc cref="Density.FromTonnesPerCubicMeter(double)"/>
        public static Density TonnesPerCubicMeter(this int value) => (Density)Density.FromTonnesPerCubicMeter(value);
	
        /// <inheritdoc cref="Density.FromTonnesPerCubicMeter(double)"/>
        public static Density TonnesPerCubicMeter(this long value) => (Density)Density.FromTonnesPerCubicMeter(value);

        /// <inheritdoc cref="Density.FromTonnesPerCubicMeter(double)"/>
        public static Density TonnesPerCubicMeter(this double value) => (Density)Density.FromTonnesPerCubicMeter(new Number<double, DoubleCalculator>(value));

        /// <inheritdoc cref="Density.FromTonnesPerCubicMeter(double)"/>
        public static Density TonnesPerCubicMeter(this float value) => (Density)Density.FromTonnesPerCubicMeter(value);

        /// <inheritdoc cref="Density.FromTonnesPerCubicMeter(double)"/>
        public static Density TonnesPerCubicMeter(this decimal value) => (Density)Density.FromTonnesPerCubicMeter(new Number<double, DoubleCalculator>(Decimal.ToDouble(value)));

        #endregion

        #region TonnePerCubicMillimeter

        /// <inheritdoc cref="Density.FromTonnesPerCubicMillimeter(double)"/>
        public static Density TonnesPerCubicMillimeter(this int value) => (Density)Density.FromTonnesPerCubicMillimeter(value);
	
        /// <inheritdoc cref="Density.FromTonnesPerCubicMillimeter(double)"/>
        public static Density TonnesPerCubicMillimeter(this long value) => (Density)Density.FromTonnesPerCubicMillimeter(value);

        /// <inheritdoc cref="Density.FromTonnesPerCubicMillimeter(double)"/>
        public static Density TonnesPerCubicMillimeter(this double value) => (Density)Density.FromTonnesPerCubicMillimeter(new Number<double, DoubleCalculator>(value));

        /// <inheritdoc cref="Density.FromTonnesPerCubicMillimeter(double)"/>
        public static Density TonnesPerCubicMillimeter(this float value) => (Density)Density.FromTonnesPerCubicMillimeter(value);

        /// <inheritdoc cref="Density.FromTonnesPerCubicMillimeter(double)"/>
        public static Density TonnesPerCubicMillimeter(this decimal value) => (Density)Density.FromTonnesPerCubicMillimeter(new Number<double, DoubleCalculator>(Decimal.ToDouble(value)));

        #endregion

    }
}
#endif
