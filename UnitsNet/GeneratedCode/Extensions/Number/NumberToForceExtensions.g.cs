//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by \generate-code.bat.
//
//     Changes to this file will be lost when the code is regenerated.
//     The build server regenerates the code before each build and a pre-build
//     step will regenerate the code on each local build.
//
//     See https://github.com/angularsen/UnitsNet/wiki/Adding-a-New-Unit for how to add or edit units.
//
//     Add CustomCode\Quantities\MyUnit.extra.cs files to add code to generated quantities.
//     Add Extensions\MyUnitExtensions.cs to decorate quantities with new behavior.
//     Add UnitDefinitions\MyUnit.json and run GeneratUnits.bat to generate new units or quantities.
//
// </auto-generated>
//------------------------------------------------------------------------------

// Copyright (c) 2013 Andreas Gullberg Larsen (andreas.larsen84@gmail.com).
// https://github.com/angularsen/UnitsNet
// 
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
// 
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
// 
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
// THE SOFTWARE.

using System;
using UnitsNet.InternalHelpers.Calculators;

// Windows Runtime Component does not support extension methods and method overloads: https://msdn.microsoft.com/en-us/library/br230301.aspx
#if !WINDOWS_UWP
namespace UnitsNet.Extensions.NumberToForce
{
    public static class NumberToForceExtensions
    {
        #region Decanewton

        /// <inheritdoc cref="Force.FromDecanewtons(double)"/>
        public static Force Decanewtons(this int value) => (Force)Force.FromDecanewtons(value);
	
        /// <inheritdoc cref="Force.FromDecanewtons(double)"/>
        public static Force Decanewtons(this long value) => (Force)Force.FromDecanewtons(value);

        /// <inheritdoc cref="Force.FromDecanewtons(double)"/>
        public static Force Decanewtons(this double value) => (Force)Force.FromDecanewtons(new Number<double, DoubleCalculator>(value));

        /// <inheritdoc cref="Force.FromDecanewtons(double)"/>
        public static Force Decanewtons(this float value) => (Force)Force.FromDecanewtons(value);

        /// <inheritdoc cref="Force.FromDecanewtons(double)"/>
        public static Force Decanewtons(this decimal value) => (Force)Force.FromDecanewtons(new Number<double, DoubleCalculator>(Decimal.ToDouble(value)));

        #endregion

        #region Dyn

        /// <inheritdoc cref="Force.FromDyne(double)"/>
        public static Force Dyne(this int value) => (Force)Force.FromDyne(value);
	
        /// <inheritdoc cref="Force.FromDyne(double)"/>
        public static Force Dyne(this long value) => (Force)Force.FromDyne(value);

        /// <inheritdoc cref="Force.FromDyne(double)"/>
        public static Force Dyne(this double value) => (Force)Force.FromDyne(new Number<double, DoubleCalculator>(value));

        /// <inheritdoc cref="Force.FromDyne(double)"/>
        public static Force Dyne(this float value) => (Force)Force.FromDyne(value);

        /// <inheritdoc cref="Force.FromDyne(double)"/>
        public static Force Dyne(this decimal value) => (Force)Force.FromDyne(new Number<double, DoubleCalculator>(Decimal.ToDouble(value)));

        #endregion

        #region KilogramForce

        /// <inheritdoc cref="Force.FromKilogramsForce(double)"/>
        public static Force KilogramsForce(this int value) => (Force)Force.FromKilogramsForce(value);
	
        /// <inheritdoc cref="Force.FromKilogramsForce(double)"/>
        public static Force KilogramsForce(this long value) => (Force)Force.FromKilogramsForce(value);

        /// <inheritdoc cref="Force.FromKilogramsForce(double)"/>
        public static Force KilogramsForce(this double value) => (Force)Force.FromKilogramsForce(new Number<double, DoubleCalculator>(value));

        /// <inheritdoc cref="Force.FromKilogramsForce(double)"/>
        public static Force KilogramsForce(this float value) => (Force)Force.FromKilogramsForce(value);

        /// <inheritdoc cref="Force.FromKilogramsForce(double)"/>
        public static Force KilogramsForce(this decimal value) => (Force)Force.FromKilogramsForce(new Number<double, DoubleCalculator>(Decimal.ToDouble(value)));

        #endregion

        #region Kilonewton

        /// <inheritdoc cref="Force.FromKilonewtons(double)"/>
        public static Force Kilonewtons(this int value) => (Force)Force.FromKilonewtons(value);
	
        /// <inheritdoc cref="Force.FromKilonewtons(double)"/>
        public static Force Kilonewtons(this long value) => (Force)Force.FromKilonewtons(value);

        /// <inheritdoc cref="Force.FromKilonewtons(double)"/>
        public static Force Kilonewtons(this double value) => (Force)Force.FromKilonewtons(new Number<double, DoubleCalculator>(value));

        /// <inheritdoc cref="Force.FromKilonewtons(double)"/>
        public static Force Kilonewtons(this float value) => (Force)Force.FromKilonewtons(value);

        /// <inheritdoc cref="Force.FromKilonewtons(double)"/>
        public static Force Kilonewtons(this decimal value) => (Force)Force.FromKilonewtons(new Number<double, DoubleCalculator>(Decimal.ToDouble(value)));

        #endregion

        #region KiloPond

        /// <inheritdoc cref="Force.FromKiloPonds(double)"/>
        public static Force KiloPonds(this int value) => (Force)Force.FromKiloPonds(value);
	
        /// <inheritdoc cref="Force.FromKiloPonds(double)"/>
        public static Force KiloPonds(this long value) => (Force)Force.FromKiloPonds(value);

        /// <inheritdoc cref="Force.FromKiloPonds(double)"/>
        public static Force KiloPonds(this double value) => (Force)Force.FromKiloPonds(new Number<double, DoubleCalculator>(value));

        /// <inheritdoc cref="Force.FromKiloPonds(double)"/>
        public static Force KiloPonds(this float value) => (Force)Force.FromKiloPonds(value);

        /// <inheritdoc cref="Force.FromKiloPonds(double)"/>
        public static Force KiloPonds(this decimal value) => (Force)Force.FromKiloPonds(new Number<double, DoubleCalculator>(Decimal.ToDouble(value)));

        #endregion

        #region Meganewton

        /// <inheritdoc cref="Force.FromMeganewtons(double)"/>
        public static Force Meganewtons(this int value) => (Force)Force.FromMeganewtons(value);
	
        /// <inheritdoc cref="Force.FromMeganewtons(double)"/>
        public static Force Meganewtons(this long value) => (Force)Force.FromMeganewtons(value);

        /// <inheritdoc cref="Force.FromMeganewtons(double)"/>
        public static Force Meganewtons(this double value) => (Force)Force.FromMeganewtons(new Number<double, DoubleCalculator>(value));

        /// <inheritdoc cref="Force.FromMeganewtons(double)"/>
        public static Force Meganewtons(this float value) => (Force)Force.FromMeganewtons(value);

        /// <inheritdoc cref="Force.FromMeganewtons(double)"/>
        public static Force Meganewtons(this decimal value) => (Force)Force.FromMeganewtons(new Number<double, DoubleCalculator>(Decimal.ToDouble(value)));

        #endregion

        #region Newton

        /// <inheritdoc cref="Force.FromNewtons(double)"/>
        public static Force Newtons(this int value) => (Force)Force.FromNewtons(value);
	
        /// <inheritdoc cref="Force.FromNewtons(double)"/>
        public static Force Newtons(this long value) => (Force)Force.FromNewtons(value);

        /// <inheritdoc cref="Force.FromNewtons(double)"/>
        public static Force Newtons(this double value) => (Force)Force.FromNewtons(new Number<double, DoubleCalculator>(value));

        /// <inheritdoc cref="Force.FromNewtons(double)"/>
        public static Force Newtons(this float value) => (Force)Force.FromNewtons(value);

        /// <inheritdoc cref="Force.FromNewtons(double)"/>
        public static Force Newtons(this decimal value) => (Force)Force.FromNewtons(new Number<double, DoubleCalculator>(Decimal.ToDouble(value)));

        #endregion

        #region Poundal

        /// <inheritdoc cref="Force.FromPoundals(double)"/>
        public static Force Poundals(this int value) => (Force)Force.FromPoundals(value);
	
        /// <inheritdoc cref="Force.FromPoundals(double)"/>
        public static Force Poundals(this long value) => (Force)Force.FromPoundals(value);

        /// <inheritdoc cref="Force.FromPoundals(double)"/>
        public static Force Poundals(this double value) => (Force)Force.FromPoundals(new Number<double, DoubleCalculator>(value));

        /// <inheritdoc cref="Force.FromPoundals(double)"/>
        public static Force Poundals(this float value) => (Force)Force.FromPoundals(value);

        /// <inheritdoc cref="Force.FromPoundals(double)"/>
        public static Force Poundals(this decimal value) => (Force)Force.FromPoundals(new Number<double, DoubleCalculator>(Decimal.ToDouble(value)));

        #endregion

        #region PoundForce

        /// <inheritdoc cref="Force.FromPoundsForce(double)"/>
        public static Force PoundsForce(this int value) => (Force)Force.FromPoundsForce(value);
	
        /// <inheritdoc cref="Force.FromPoundsForce(double)"/>
        public static Force PoundsForce(this long value) => (Force)Force.FromPoundsForce(value);

        /// <inheritdoc cref="Force.FromPoundsForce(double)"/>
        public static Force PoundsForce(this double value) => (Force)Force.FromPoundsForce(new Number<double, DoubleCalculator>(value));

        /// <inheritdoc cref="Force.FromPoundsForce(double)"/>
        public static Force PoundsForce(this float value) => (Force)Force.FromPoundsForce(value);

        /// <inheritdoc cref="Force.FromPoundsForce(double)"/>
        public static Force PoundsForce(this decimal value) => (Force)Force.FromPoundsForce(new Number<double, DoubleCalculator>(Decimal.ToDouble(value)));

        #endregion

        #region TonneForce

        /// <inheritdoc cref="Force.FromTonnesForce(double)"/>
        public static Force TonnesForce(this int value) => (Force)Force.FromTonnesForce(value);
	
        /// <inheritdoc cref="Force.FromTonnesForce(double)"/>
        public static Force TonnesForce(this long value) => (Force)Force.FromTonnesForce(value);

        /// <inheritdoc cref="Force.FromTonnesForce(double)"/>
        public static Force TonnesForce(this double value) => (Force)Force.FromTonnesForce(new Number<double, DoubleCalculator>(value));

        /// <inheritdoc cref="Force.FromTonnesForce(double)"/>
        public static Force TonnesForce(this float value) => (Force)Force.FromTonnesForce(value);

        /// <inheritdoc cref="Force.FromTonnesForce(double)"/>
        public static Force TonnesForce(this decimal value) => (Force)Force.FromTonnesForce(new Number<double, DoubleCalculator>(Decimal.ToDouble(value)));

        #endregion

    }
}
#endif
