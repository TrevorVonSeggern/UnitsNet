//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by \generate-code.bat.
//
//     Changes to this file will be lost when the code is regenerated.
//     The build server regenerates the code before each build and a pre-build
//     step will regenerate the code on each local build.
//
//     See https://github.com/angularsen/UnitsNet/wiki/Adding-a-New-Unit for how to add or edit units.
//
//     Add CustomCode\Quantities\MyUnit.extra.cs files to add code to generated quantities.
//     Add Extensions\MyUnitExtensions.cs to decorate quantities with new behavior.
//     Add UnitDefinitions\MyUnit.json and run GeneratUnits.bat to generate new units or quantities.
//
// </auto-generated>
//------------------------------------------------------------------------------

// Copyright (c) 2013 Andreas Gullberg Larsen (andreas.larsen84@gmail.com).
// https://github.com/angularsen/UnitsNet
// 
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
// 
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
// 
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
// THE SOFTWARE.

using System;
using UnitsNet.InternalHelpers.Calculators;

// Windows Runtime Component does not support extension methods and method overloads: https://msdn.microsoft.com/en-us/library/br230301.aspx
#if !WINDOWS_UWP
namespace UnitsNet.Extensions.NumberToPower
{
    public static class NumberToPowerExtensions
    {
        #region BoilerHorsepower

        /// <inheritdoc cref="Power.FromBoilerHorsepower(double)"/>
        public static Power BoilerHorsepower(this int value) => (Power)Power.FromBoilerHorsepower(value);
	
        /// <inheritdoc cref="Power.FromBoilerHorsepower(double)"/>
        public static Power BoilerHorsepower(this long value) => (Power)Power.FromBoilerHorsepower(value);

        /// <inheritdoc cref="Power.FromBoilerHorsepower(double)"/>
        public static Power BoilerHorsepower(this double value) => (Power)Power.FromBoilerHorsepower(new Number<double, DoubleCalculator>(value));

        /// <inheritdoc cref="Power.FromBoilerHorsepower(double)"/>
        public static Power BoilerHorsepower(this float value) => (Power)Power.FromBoilerHorsepower(value);

        /// <inheritdoc cref="Power.FromBoilerHorsepower(double)"/>
        public static Power BoilerHorsepower(this decimal value) => (Power)Power.FromBoilerHorsepower(new Number<double, DoubleCalculator>(Decimal.ToDouble(value)));

        #endregion

        #region BritishThermalUnitPerHour

        /// <inheritdoc cref="Power.FromBritishThermalUnitsPerHour(double)"/>
        public static Power BritishThermalUnitsPerHour(this int value) => (Power)Power.FromBritishThermalUnitsPerHour(value);
	
        /// <inheritdoc cref="Power.FromBritishThermalUnitsPerHour(double)"/>
        public static Power BritishThermalUnitsPerHour(this long value) => (Power)Power.FromBritishThermalUnitsPerHour(value);

        /// <inheritdoc cref="Power.FromBritishThermalUnitsPerHour(double)"/>
        public static Power BritishThermalUnitsPerHour(this double value) => (Power)Power.FromBritishThermalUnitsPerHour(new Number<double, DoubleCalculator>(value));

        /// <inheritdoc cref="Power.FromBritishThermalUnitsPerHour(double)"/>
        public static Power BritishThermalUnitsPerHour(this float value) => (Power)Power.FromBritishThermalUnitsPerHour(value);

        /// <inheritdoc cref="Power.FromBritishThermalUnitsPerHour(double)"/>
        public static Power BritishThermalUnitsPerHour(this decimal value) => (Power)Power.FromBritishThermalUnitsPerHour(new Number<double, DoubleCalculator>(Decimal.ToDouble(value)));

        #endregion

        #region ElectricalHorsepower

        /// <inheritdoc cref="Power.FromElectricalHorsepower(double)"/>
        public static Power ElectricalHorsepower(this int value) => (Power)Power.FromElectricalHorsepower(value);
	
        /// <inheritdoc cref="Power.FromElectricalHorsepower(double)"/>
        public static Power ElectricalHorsepower(this long value) => (Power)Power.FromElectricalHorsepower(value);

        /// <inheritdoc cref="Power.FromElectricalHorsepower(double)"/>
        public static Power ElectricalHorsepower(this double value) => (Power)Power.FromElectricalHorsepower(new Number<double, DoubleCalculator>(value));

        /// <inheritdoc cref="Power.FromElectricalHorsepower(double)"/>
        public static Power ElectricalHorsepower(this float value) => (Power)Power.FromElectricalHorsepower(value);

        /// <inheritdoc cref="Power.FromElectricalHorsepower(double)"/>
        public static Power ElectricalHorsepower(this decimal value) => (Power)Power.FromElectricalHorsepower(new Number<double, DoubleCalculator>(Decimal.ToDouble(value)));

        #endregion

        #region Femtowatt

        /// <inheritdoc cref="Power.FromFemtowatts(double)"/>
        public static Power Femtowatts(this int value) => (Power)Power.FromFemtowatts(value);
	
        /// <inheritdoc cref="Power.FromFemtowatts(double)"/>
        public static Power Femtowatts(this long value) => (Power)Power.FromFemtowatts(value);

        /// <inheritdoc cref="Power.FromFemtowatts(double)"/>
        public static Power Femtowatts(this double value) => (Power)Power.FromFemtowatts(new Number<double, DoubleCalculator>(value));

        /// <inheritdoc cref="Power.FromFemtowatts(double)"/>
        public static Power Femtowatts(this float value) => (Power)Power.FromFemtowatts(value);

        /// <inheritdoc cref="Power.FromFemtowatts(double)"/>
        public static Power Femtowatts(this decimal value) => (Power)Power.FromFemtowatts(new Number<double, DoubleCalculator>(Decimal.ToDouble(value)));

        #endregion

        #region Gigawatt

        /// <inheritdoc cref="Power.FromGigawatts(double)"/>
        public static Power Gigawatts(this int value) => (Power)Power.FromGigawatts(value);
	
        /// <inheritdoc cref="Power.FromGigawatts(double)"/>
        public static Power Gigawatts(this long value) => (Power)Power.FromGigawatts(value);

        /// <inheritdoc cref="Power.FromGigawatts(double)"/>
        public static Power Gigawatts(this double value) => (Power)Power.FromGigawatts(new Number<double, DoubleCalculator>(value));

        /// <inheritdoc cref="Power.FromGigawatts(double)"/>
        public static Power Gigawatts(this float value) => (Power)Power.FromGigawatts(value);

        /// <inheritdoc cref="Power.FromGigawatts(double)"/>
        public static Power Gigawatts(this decimal value) => (Power)Power.FromGigawatts(new Number<double, DoubleCalculator>(Decimal.ToDouble(value)));

        #endregion

        #region HydraulicHorsepower

        /// <inheritdoc cref="Power.FromHydraulicHorsepower(double)"/>
        public static Power HydraulicHorsepower(this int value) => (Power)Power.FromHydraulicHorsepower(value);
	
        /// <inheritdoc cref="Power.FromHydraulicHorsepower(double)"/>
        public static Power HydraulicHorsepower(this long value) => (Power)Power.FromHydraulicHorsepower(value);

        /// <inheritdoc cref="Power.FromHydraulicHorsepower(double)"/>
        public static Power HydraulicHorsepower(this double value) => (Power)Power.FromHydraulicHorsepower(new Number<double, DoubleCalculator>(value));

        /// <inheritdoc cref="Power.FromHydraulicHorsepower(double)"/>
        public static Power HydraulicHorsepower(this float value) => (Power)Power.FromHydraulicHorsepower(value);

        /// <inheritdoc cref="Power.FromHydraulicHorsepower(double)"/>
        public static Power HydraulicHorsepower(this decimal value) => (Power)Power.FromHydraulicHorsepower(new Number<double, DoubleCalculator>(Decimal.ToDouble(value)));

        #endregion

        #region KilobritishThermalUnitPerHour

        /// <inheritdoc cref="Power.FromKilobritishThermalUnitsPerHour(double)"/>
        public static Power KilobritishThermalUnitsPerHour(this int value) => (Power)Power.FromKilobritishThermalUnitsPerHour(value);
	
        /// <inheritdoc cref="Power.FromKilobritishThermalUnitsPerHour(double)"/>
        public static Power KilobritishThermalUnitsPerHour(this long value) => (Power)Power.FromKilobritishThermalUnitsPerHour(value);

        /// <inheritdoc cref="Power.FromKilobritishThermalUnitsPerHour(double)"/>
        public static Power KilobritishThermalUnitsPerHour(this double value) => (Power)Power.FromKilobritishThermalUnitsPerHour(new Number<double, DoubleCalculator>(value));

        /// <inheritdoc cref="Power.FromKilobritishThermalUnitsPerHour(double)"/>
        public static Power KilobritishThermalUnitsPerHour(this float value) => (Power)Power.FromKilobritishThermalUnitsPerHour(value);

        /// <inheritdoc cref="Power.FromKilobritishThermalUnitsPerHour(double)"/>
        public static Power KilobritishThermalUnitsPerHour(this decimal value) => (Power)Power.FromKilobritishThermalUnitsPerHour(new Number<double, DoubleCalculator>(Decimal.ToDouble(value)));

        #endregion

        #region Kilowatt

        /// <inheritdoc cref="Power.FromKilowatts(double)"/>
        public static Power Kilowatts(this int value) => (Power)Power.FromKilowatts(value);
	
        /// <inheritdoc cref="Power.FromKilowatts(double)"/>
        public static Power Kilowatts(this long value) => (Power)Power.FromKilowatts(value);

        /// <inheritdoc cref="Power.FromKilowatts(double)"/>
        public static Power Kilowatts(this double value) => (Power)Power.FromKilowatts(new Number<double, DoubleCalculator>(value));

        /// <inheritdoc cref="Power.FromKilowatts(double)"/>
        public static Power Kilowatts(this float value) => (Power)Power.FromKilowatts(value);

        /// <inheritdoc cref="Power.FromKilowatts(double)"/>
        public static Power Kilowatts(this decimal value) => (Power)Power.FromKilowatts(new Number<double, DoubleCalculator>(Decimal.ToDouble(value)));

        #endregion

        #region MechanicalHorsepower

        /// <inheritdoc cref="Power.FromMechanicalHorsepower(double)"/>
        public static Power MechanicalHorsepower(this int value) => (Power)Power.FromMechanicalHorsepower(value);
	
        /// <inheritdoc cref="Power.FromMechanicalHorsepower(double)"/>
        public static Power MechanicalHorsepower(this long value) => (Power)Power.FromMechanicalHorsepower(value);

        /// <inheritdoc cref="Power.FromMechanicalHorsepower(double)"/>
        public static Power MechanicalHorsepower(this double value) => (Power)Power.FromMechanicalHorsepower(new Number<double, DoubleCalculator>(value));

        /// <inheritdoc cref="Power.FromMechanicalHorsepower(double)"/>
        public static Power MechanicalHorsepower(this float value) => (Power)Power.FromMechanicalHorsepower(value);

        /// <inheritdoc cref="Power.FromMechanicalHorsepower(double)"/>
        public static Power MechanicalHorsepower(this decimal value) => (Power)Power.FromMechanicalHorsepower(new Number<double, DoubleCalculator>(Decimal.ToDouble(value)));

        #endregion

        #region Megawatt

        /// <inheritdoc cref="Power.FromMegawatts(double)"/>
        public static Power Megawatts(this int value) => (Power)Power.FromMegawatts(value);
	
        /// <inheritdoc cref="Power.FromMegawatts(double)"/>
        public static Power Megawatts(this long value) => (Power)Power.FromMegawatts(value);

        /// <inheritdoc cref="Power.FromMegawatts(double)"/>
        public static Power Megawatts(this double value) => (Power)Power.FromMegawatts(new Number<double, DoubleCalculator>(value));

        /// <inheritdoc cref="Power.FromMegawatts(double)"/>
        public static Power Megawatts(this float value) => (Power)Power.FromMegawatts(value);

        /// <inheritdoc cref="Power.FromMegawatts(double)"/>
        public static Power Megawatts(this decimal value) => (Power)Power.FromMegawatts(new Number<double, DoubleCalculator>(Decimal.ToDouble(value)));

        #endregion

        #region MetricHorsepower

        /// <inheritdoc cref="Power.FromMetricHorsepower(double)"/>
        public static Power MetricHorsepower(this int value) => (Power)Power.FromMetricHorsepower(value);
	
        /// <inheritdoc cref="Power.FromMetricHorsepower(double)"/>
        public static Power MetricHorsepower(this long value) => (Power)Power.FromMetricHorsepower(value);

        /// <inheritdoc cref="Power.FromMetricHorsepower(double)"/>
        public static Power MetricHorsepower(this double value) => (Power)Power.FromMetricHorsepower(new Number<double, DoubleCalculator>(value));

        /// <inheritdoc cref="Power.FromMetricHorsepower(double)"/>
        public static Power MetricHorsepower(this float value) => (Power)Power.FromMetricHorsepower(value);

        /// <inheritdoc cref="Power.FromMetricHorsepower(double)"/>
        public static Power MetricHorsepower(this decimal value) => (Power)Power.FromMetricHorsepower(new Number<double, DoubleCalculator>(Decimal.ToDouble(value)));

        #endregion

        #region Microwatt

        /// <inheritdoc cref="Power.FromMicrowatts(double)"/>
        public static Power Microwatts(this int value) => (Power)Power.FromMicrowatts(value);
	
        /// <inheritdoc cref="Power.FromMicrowatts(double)"/>
        public static Power Microwatts(this long value) => (Power)Power.FromMicrowatts(value);

        /// <inheritdoc cref="Power.FromMicrowatts(double)"/>
        public static Power Microwatts(this double value) => (Power)Power.FromMicrowatts(new Number<double, DoubleCalculator>(value));

        /// <inheritdoc cref="Power.FromMicrowatts(double)"/>
        public static Power Microwatts(this float value) => (Power)Power.FromMicrowatts(value);

        /// <inheritdoc cref="Power.FromMicrowatts(double)"/>
        public static Power Microwatts(this decimal value) => (Power)Power.FromMicrowatts(new Number<double, DoubleCalculator>(Decimal.ToDouble(value)));

        #endregion

        #region Milliwatt

        /// <inheritdoc cref="Power.FromMilliwatts(double)"/>
        public static Power Milliwatts(this int value) => (Power)Power.FromMilliwatts(value);
	
        /// <inheritdoc cref="Power.FromMilliwatts(double)"/>
        public static Power Milliwatts(this long value) => (Power)Power.FromMilliwatts(value);

        /// <inheritdoc cref="Power.FromMilliwatts(double)"/>
        public static Power Milliwatts(this double value) => (Power)Power.FromMilliwatts(new Number<double, DoubleCalculator>(value));

        /// <inheritdoc cref="Power.FromMilliwatts(double)"/>
        public static Power Milliwatts(this float value) => (Power)Power.FromMilliwatts(value);

        /// <inheritdoc cref="Power.FromMilliwatts(double)"/>
        public static Power Milliwatts(this decimal value) => (Power)Power.FromMilliwatts(new Number<double, DoubleCalculator>(Decimal.ToDouble(value)));

        #endregion

        #region Nanowatt

        /// <inheritdoc cref="Power.FromNanowatts(double)"/>
        public static Power Nanowatts(this int value) => (Power)Power.FromNanowatts(value);
	
        /// <inheritdoc cref="Power.FromNanowatts(double)"/>
        public static Power Nanowatts(this long value) => (Power)Power.FromNanowatts(value);

        /// <inheritdoc cref="Power.FromNanowatts(double)"/>
        public static Power Nanowatts(this double value) => (Power)Power.FromNanowatts(new Number<double, DoubleCalculator>(value));

        /// <inheritdoc cref="Power.FromNanowatts(double)"/>
        public static Power Nanowatts(this float value) => (Power)Power.FromNanowatts(value);

        /// <inheritdoc cref="Power.FromNanowatts(double)"/>
        public static Power Nanowatts(this decimal value) => (Power)Power.FromNanowatts(new Number<double, DoubleCalculator>(Decimal.ToDouble(value)));

        #endregion

        #region Petawatt

        /// <inheritdoc cref="Power.FromPetawatts(double)"/>
        public static Power Petawatts(this int value) => (Power)Power.FromPetawatts(value);
	
        /// <inheritdoc cref="Power.FromPetawatts(double)"/>
        public static Power Petawatts(this long value) => (Power)Power.FromPetawatts(value);

        /// <inheritdoc cref="Power.FromPetawatts(double)"/>
        public static Power Petawatts(this double value) => (Power)Power.FromPetawatts(new Number<double, DoubleCalculator>(value));

        /// <inheritdoc cref="Power.FromPetawatts(double)"/>
        public static Power Petawatts(this float value) => (Power)Power.FromPetawatts(value);

        /// <inheritdoc cref="Power.FromPetawatts(double)"/>
        public static Power Petawatts(this decimal value) => (Power)Power.FromPetawatts(new Number<double, DoubleCalculator>(Decimal.ToDouble(value)));

        #endregion

        #region Picowatt

        /// <inheritdoc cref="Power.FromPicowatts(double)"/>
        public static Power Picowatts(this int value) => (Power)Power.FromPicowatts(value);
	
        /// <inheritdoc cref="Power.FromPicowatts(double)"/>
        public static Power Picowatts(this long value) => (Power)Power.FromPicowatts(value);

        /// <inheritdoc cref="Power.FromPicowatts(double)"/>
        public static Power Picowatts(this double value) => (Power)Power.FromPicowatts(new Number<double, DoubleCalculator>(value));

        /// <inheritdoc cref="Power.FromPicowatts(double)"/>
        public static Power Picowatts(this float value) => (Power)Power.FromPicowatts(value);

        /// <inheritdoc cref="Power.FromPicowatts(double)"/>
        public static Power Picowatts(this decimal value) => (Power)Power.FromPicowatts(new Number<double, DoubleCalculator>(Decimal.ToDouble(value)));

        #endregion

        #region Terawatt

        /// <inheritdoc cref="Power.FromTerawatts(double)"/>
        public static Power Terawatts(this int value) => (Power)Power.FromTerawatts(value);
	
        /// <inheritdoc cref="Power.FromTerawatts(double)"/>
        public static Power Terawatts(this long value) => (Power)Power.FromTerawatts(value);

        /// <inheritdoc cref="Power.FromTerawatts(double)"/>
        public static Power Terawatts(this double value) => (Power)Power.FromTerawatts(new Number<double, DoubleCalculator>(value));

        /// <inheritdoc cref="Power.FromTerawatts(double)"/>
        public static Power Terawatts(this float value) => (Power)Power.FromTerawatts(value);

        /// <inheritdoc cref="Power.FromTerawatts(double)"/>
        public static Power Terawatts(this decimal value) => (Power)Power.FromTerawatts(new Number<double, DoubleCalculator>(Decimal.ToDouble(value)));

        #endregion

        #region Watt

        /// <inheritdoc cref="Power.FromWatts(double)"/>
        public static Power Watts(this int value) => (Power)Power.FromWatts(value);
	
        /// <inheritdoc cref="Power.FromWatts(double)"/>
        public static Power Watts(this long value) => (Power)Power.FromWatts(value);

        /// <inheritdoc cref="Power.FromWatts(double)"/>
        public static Power Watts(this double value) => (Power)Power.FromWatts(new Number<double, DoubleCalculator>(value));

        /// <inheritdoc cref="Power.FromWatts(double)"/>
        public static Power Watts(this float value) => (Power)Power.FromWatts(value);

        /// <inheritdoc cref="Power.FromWatts(double)"/>
        public static Power Watts(this decimal value) => (Power)Power.FromWatts(new Number<double, DoubleCalculator>(Decimal.ToDouble(value)));

        #endregion

    }
}
#endif
