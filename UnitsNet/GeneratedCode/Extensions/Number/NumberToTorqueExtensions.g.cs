//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by \generate-code.bat.
//
//     Changes to this file will be lost when the code is regenerated.
//     The build server regenerates the code before each build and a pre-build
//     step will regenerate the code on each local build.
//
//     See https://github.com/angularsen/UnitsNet/wiki/Adding-a-New-Unit for how to add or edit units.
//
//     Add CustomCode\Quantities\MyUnit.extra.cs files to add code to generated quantities.
//     Add Extensions\MyUnitExtensions.cs to decorate quantities with new behavior.
//     Add UnitDefinitions\MyUnit.json and run GeneratUnits.bat to generate new units or quantities.
//
// </auto-generated>
//------------------------------------------------------------------------------

// Copyright (c) 2013 Andreas Gullberg Larsen (andreas.larsen84@gmail.com).
// https://github.com/angularsen/UnitsNet
// 
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
// 
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
// 
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
// THE SOFTWARE.

using System;
using UnitsNet.InternalHelpers.Calculators;

// Windows Runtime Component does not support extension methods and method overloads: https://msdn.microsoft.com/en-us/library/br230301.aspx
#if !WINDOWS_UWP
namespace UnitsNet.Extensions.NumberToTorque
{
    public static class NumberToTorqueExtensions
    {
        #region KilogramForceCentimeter

        /// <inheritdoc cref="Torque.FromKilogramForceCentimeters(double)"/>
        public static Torque KilogramForceCentimeters(this int value) => (Torque)Torque.FromKilogramForceCentimeters(value);
	
        /// <inheritdoc cref="Torque.FromKilogramForceCentimeters(double)"/>
        public static Torque KilogramForceCentimeters(this long value) => (Torque)Torque.FromKilogramForceCentimeters(value);

        /// <inheritdoc cref="Torque.FromKilogramForceCentimeters(double)"/>
        public static Torque KilogramForceCentimeters(this double value) => (Torque)Torque.FromKilogramForceCentimeters(new Number<double, DoubleCalculator>(value));

        /// <inheritdoc cref="Torque.FromKilogramForceCentimeters(double)"/>
        public static Torque KilogramForceCentimeters(this float value) => (Torque)Torque.FromKilogramForceCentimeters(value);

        /// <inheritdoc cref="Torque.FromKilogramForceCentimeters(double)"/>
        public static Torque KilogramForceCentimeters(this decimal value) => (Torque)Torque.FromKilogramForceCentimeters(new Number<double, DoubleCalculator>(Decimal.ToDouble(value)));

        #endregion

        #region KilogramForceMeter

        /// <inheritdoc cref="Torque.FromKilogramForceMeters(double)"/>
        public static Torque KilogramForceMeters(this int value) => (Torque)Torque.FromKilogramForceMeters(value);
	
        /// <inheritdoc cref="Torque.FromKilogramForceMeters(double)"/>
        public static Torque KilogramForceMeters(this long value) => (Torque)Torque.FromKilogramForceMeters(value);

        /// <inheritdoc cref="Torque.FromKilogramForceMeters(double)"/>
        public static Torque KilogramForceMeters(this double value) => (Torque)Torque.FromKilogramForceMeters(new Number<double, DoubleCalculator>(value));

        /// <inheritdoc cref="Torque.FromKilogramForceMeters(double)"/>
        public static Torque KilogramForceMeters(this float value) => (Torque)Torque.FromKilogramForceMeters(value);

        /// <inheritdoc cref="Torque.FromKilogramForceMeters(double)"/>
        public static Torque KilogramForceMeters(this decimal value) => (Torque)Torque.FromKilogramForceMeters(new Number<double, DoubleCalculator>(Decimal.ToDouble(value)));

        #endregion

        #region KilogramForceMillimeter

        /// <inheritdoc cref="Torque.FromKilogramForceMillimeters(double)"/>
        public static Torque KilogramForceMillimeters(this int value) => (Torque)Torque.FromKilogramForceMillimeters(value);
	
        /// <inheritdoc cref="Torque.FromKilogramForceMillimeters(double)"/>
        public static Torque KilogramForceMillimeters(this long value) => (Torque)Torque.FromKilogramForceMillimeters(value);

        /// <inheritdoc cref="Torque.FromKilogramForceMillimeters(double)"/>
        public static Torque KilogramForceMillimeters(this double value) => (Torque)Torque.FromKilogramForceMillimeters(new Number<double, DoubleCalculator>(value));

        /// <inheritdoc cref="Torque.FromKilogramForceMillimeters(double)"/>
        public static Torque KilogramForceMillimeters(this float value) => (Torque)Torque.FromKilogramForceMillimeters(value);

        /// <inheritdoc cref="Torque.FromKilogramForceMillimeters(double)"/>
        public static Torque KilogramForceMillimeters(this decimal value) => (Torque)Torque.FromKilogramForceMillimeters(new Number<double, DoubleCalculator>(Decimal.ToDouble(value)));

        #endregion

        #region KilonewtonCentimeter

        /// <inheritdoc cref="Torque.FromKilonewtonCentimeters(double)"/>
        public static Torque KilonewtonCentimeters(this int value) => (Torque)Torque.FromKilonewtonCentimeters(value);
	
        /// <inheritdoc cref="Torque.FromKilonewtonCentimeters(double)"/>
        public static Torque KilonewtonCentimeters(this long value) => (Torque)Torque.FromKilonewtonCentimeters(value);

        /// <inheritdoc cref="Torque.FromKilonewtonCentimeters(double)"/>
        public static Torque KilonewtonCentimeters(this double value) => (Torque)Torque.FromKilonewtonCentimeters(new Number<double, DoubleCalculator>(value));

        /// <inheritdoc cref="Torque.FromKilonewtonCentimeters(double)"/>
        public static Torque KilonewtonCentimeters(this float value) => (Torque)Torque.FromKilonewtonCentimeters(value);

        /// <inheritdoc cref="Torque.FromKilonewtonCentimeters(double)"/>
        public static Torque KilonewtonCentimeters(this decimal value) => (Torque)Torque.FromKilonewtonCentimeters(new Number<double, DoubleCalculator>(Decimal.ToDouble(value)));

        #endregion

        #region KilonewtonMeter

        /// <inheritdoc cref="Torque.FromKilonewtonMeters(double)"/>
        public static Torque KilonewtonMeters(this int value) => (Torque)Torque.FromKilonewtonMeters(value);
	
        /// <inheritdoc cref="Torque.FromKilonewtonMeters(double)"/>
        public static Torque KilonewtonMeters(this long value) => (Torque)Torque.FromKilonewtonMeters(value);

        /// <inheritdoc cref="Torque.FromKilonewtonMeters(double)"/>
        public static Torque KilonewtonMeters(this double value) => (Torque)Torque.FromKilonewtonMeters(new Number<double, DoubleCalculator>(value));

        /// <inheritdoc cref="Torque.FromKilonewtonMeters(double)"/>
        public static Torque KilonewtonMeters(this float value) => (Torque)Torque.FromKilonewtonMeters(value);

        /// <inheritdoc cref="Torque.FromKilonewtonMeters(double)"/>
        public static Torque KilonewtonMeters(this decimal value) => (Torque)Torque.FromKilonewtonMeters(new Number<double, DoubleCalculator>(Decimal.ToDouble(value)));

        #endregion

        #region KilonewtonMillimeter

        /// <inheritdoc cref="Torque.FromKilonewtonMillimeters(double)"/>
        public static Torque KilonewtonMillimeters(this int value) => (Torque)Torque.FromKilonewtonMillimeters(value);
	
        /// <inheritdoc cref="Torque.FromKilonewtonMillimeters(double)"/>
        public static Torque KilonewtonMillimeters(this long value) => (Torque)Torque.FromKilonewtonMillimeters(value);

        /// <inheritdoc cref="Torque.FromKilonewtonMillimeters(double)"/>
        public static Torque KilonewtonMillimeters(this double value) => (Torque)Torque.FromKilonewtonMillimeters(new Number<double, DoubleCalculator>(value));

        /// <inheritdoc cref="Torque.FromKilonewtonMillimeters(double)"/>
        public static Torque KilonewtonMillimeters(this float value) => (Torque)Torque.FromKilonewtonMillimeters(value);

        /// <inheritdoc cref="Torque.FromKilonewtonMillimeters(double)"/>
        public static Torque KilonewtonMillimeters(this decimal value) => (Torque)Torque.FromKilonewtonMillimeters(new Number<double, DoubleCalculator>(Decimal.ToDouble(value)));

        #endregion

        #region KilopoundForceFoot

        /// <inheritdoc cref="Torque.FromKilopoundForceFeet(double)"/>
        public static Torque KilopoundForceFeet(this int value) => (Torque)Torque.FromKilopoundForceFeet(value);
	
        /// <inheritdoc cref="Torque.FromKilopoundForceFeet(double)"/>
        public static Torque KilopoundForceFeet(this long value) => (Torque)Torque.FromKilopoundForceFeet(value);

        /// <inheritdoc cref="Torque.FromKilopoundForceFeet(double)"/>
        public static Torque KilopoundForceFeet(this double value) => (Torque)Torque.FromKilopoundForceFeet(new Number<double, DoubleCalculator>(value));

        /// <inheritdoc cref="Torque.FromKilopoundForceFeet(double)"/>
        public static Torque KilopoundForceFeet(this float value) => (Torque)Torque.FromKilopoundForceFeet(value);

        /// <inheritdoc cref="Torque.FromKilopoundForceFeet(double)"/>
        public static Torque KilopoundForceFeet(this decimal value) => (Torque)Torque.FromKilopoundForceFeet(new Number<double, DoubleCalculator>(Decimal.ToDouble(value)));

        #endregion

        #region KilopoundForceInch

        /// <inheritdoc cref="Torque.FromKilopoundForceInches(double)"/>
        public static Torque KilopoundForceInches(this int value) => (Torque)Torque.FromKilopoundForceInches(value);
	
        /// <inheritdoc cref="Torque.FromKilopoundForceInches(double)"/>
        public static Torque KilopoundForceInches(this long value) => (Torque)Torque.FromKilopoundForceInches(value);

        /// <inheritdoc cref="Torque.FromKilopoundForceInches(double)"/>
        public static Torque KilopoundForceInches(this double value) => (Torque)Torque.FromKilopoundForceInches(new Number<double, DoubleCalculator>(value));

        /// <inheritdoc cref="Torque.FromKilopoundForceInches(double)"/>
        public static Torque KilopoundForceInches(this float value) => (Torque)Torque.FromKilopoundForceInches(value);

        /// <inheritdoc cref="Torque.FromKilopoundForceInches(double)"/>
        public static Torque KilopoundForceInches(this decimal value) => (Torque)Torque.FromKilopoundForceInches(new Number<double, DoubleCalculator>(Decimal.ToDouble(value)));

        #endregion

        #region MeganewtonCentimeter

        /// <inheritdoc cref="Torque.FromMeganewtonCentimeters(double)"/>
        public static Torque MeganewtonCentimeters(this int value) => (Torque)Torque.FromMeganewtonCentimeters(value);
	
        /// <inheritdoc cref="Torque.FromMeganewtonCentimeters(double)"/>
        public static Torque MeganewtonCentimeters(this long value) => (Torque)Torque.FromMeganewtonCentimeters(value);

        /// <inheritdoc cref="Torque.FromMeganewtonCentimeters(double)"/>
        public static Torque MeganewtonCentimeters(this double value) => (Torque)Torque.FromMeganewtonCentimeters(new Number<double, DoubleCalculator>(value));

        /// <inheritdoc cref="Torque.FromMeganewtonCentimeters(double)"/>
        public static Torque MeganewtonCentimeters(this float value) => (Torque)Torque.FromMeganewtonCentimeters(value);

        /// <inheritdoc cref="Torque.FromMeganewtonCentimeters(double)"/>
        public static Torque MeganewtonCentimeters(this decimal value) => (Torque)Torque.FromMeganewtonCentimeters(new Number<double, DoubleCalculator>(Decimal.ToDouble(value)));

        #endregion

        #region MeganewtonMeter

        /// <inheritdoc cref="Torque.FromMeganewtonMeters(double)"/>
        public static Torque MeganewtonMeters(this int value) => (Torque)Torque.FromMeganewtonMeters(value);
	
        /// <inheritdoc cref="Torque.FromMeganewtonMeters(double)"/>
        public static Torque MeganewtonMeters(this long value) => (Torque)Torque.FromMeganewtonMeters(value);

        /// <inheritdoc cref="Torque.FromMeganewtonMeters(double)"/>
        public static Torque MeganewtonMeters(this double value) => (Torque)Torque.FromMeganewtonMeters(new Number<double, DoubleCalculator>(value));

        /// <inheritdoc cref="Torque.FromMeganewtonMeters(double)"/>
        public static Torque MeganewtonMeters(this float value) => (Torque)Torque.FromMeganewtonMeters(value);

        /// <inheritdoc cref="Torque.FromMeganewtonMeters(double)"/>
        public static Torque MeganewtonMeters(this decimal value) => (Torque)Torque.FromMeganewtonMeters(new Number<double, DoubleCalculator>(Decimal.ToDouble(value)));

        #endregion

        #region MeganewtonMillimeter

        /// <inheritdoc cref="Torque.FromMeganewtonMillimeters(double)"/>
        public static Torque MeganewtonMillimeters(this int value) => (Torque)Torque.FromMeganewtonMillimeters(value);
	
        /// <inheritdoc cref="Torque.FromMeganewtonMillimeters(double)"/>
        public static Torque MeganewtonMillimeters(this long value) => (Torque)Torque.FromMeganewtonMillimeters(value);

        /// <inheritdoc cref="Torque.FromMeganewtonMillimeters(double)"/>
        public static Torque MeganewtonMillimeters(this double value) => (Torque)Torque.FromMeganewtonMillimeters(new Number<double, DoubleCalculator>(value));

        /// <inheritdoc cref="Torque.FromMeganewtonMillimeters(double)"/>
        public static Torque MeganewtonMillimeters(this float value) => (Torque)Torque.FromMeganewtonMillimeters(value);

        /// <inheritdoc cref="Torque.FromMeganewtonMillimeters(double)"/>
        public static Torque MeganewtonMillimeters(this decimal value) => (Torque)Torque.FromMeganewtonMillimeters(new Number<double, DoubleCalculator>(Decimal.ToDouble(value)));

        #endregion

        #region MegapoundForceFoot

        /// <inheritdoc cref="Torque.FromMegapoundForceFeet(double)"/>
        public static Torque MegapoundForceFeet(this int value) => (Torque)Torque.FromMegapoundForceFeet(value);
	
        /// <inheritdoc cref="Torque.FromMegapoundForceFeet(double)"/>
        public static Torque MegapoundForceFeet(this long value) => (Torque)Torque.FromMegapoundForceFeet(value);

        /// <inheritdoc cref="Torque.FromMegapoundForceFeet(double)"/>
        public static Torque MegapoundForceFeet(this double value) => (Torque)Torque.FromMegapoundForceFeet(new Number<double, DoubleCalculator>(value));

        /// <inheritdoc cref="Torque.FromMegapoundForceFeet(double)"/>
        public static Torque MegapoundForceFeet(this float value) => (Torque)Torque.FromMegapoundForceFeet(value);

        /// <inheritdoc cref="Torque.FromMegapoundForceFeet(double)"/>
        public static Torque MegapoundForceFeet(this decimal value) => (Torque)Torque.FromMegapoundForceFeet(new Number<double, DoubleCalculator>(Decimal.ToDouble(value)));

        #endregion

        #region MegapoundForceInch

        /// <inheritdoc cref="Torque.FromMegapoundForceInches(double)"/>
        public static Torque MegapoundForceInches(this int value) => (Torque)Torque.FromMegapoundForceInches(value);
	
        /// <inheritdoc cref="Torque.FromMegapoundForceInches(double)"/>
        public static Torque MegapoundForceInches(this long value) => (Torque)Torque.FromMegapoundForceInches(value);

        /// <inheritdoc cref="Torque.FromMegapoundForceInches(double)"/>
        public static Torque MegapoundForceInches(this double value) => (Torque)Torque.FromMegapoundForceInches(new Number<double, DoubleCalculator>(value));

        /// <inheritdoc cref="Torque.FromMegapoundForceInches(double)"/>
        public static Torque MegapoundForceInches(this float value) => (Torque)Torque.FromMegapoundForceInches(value);

        /// <inheritdoc cref="Torque.FromMegapoundForceInches(double)"/>
        public static Torque MegapoundForceInches(this decimal value) => (Torque)Torque.FromMegapoundForceInches(new Number<double, DoubleCalculator>(Decimal.ToDouble(value)));

        #endregion

        #region NewtonCentimeter

        /// <inheritdoc cref="Torque.FromNewtonCentimeters(double)"/>
        public static Torque NewtonCentimeters(this int value) => (Torque)Torque.FromNewtonCentimeters(value);
	
        /// <inheritdoc cref="Torque.FromNewtonCentimeters(double)"/>
        public static Torque NewtonCentimeters(this long value) => (Torque)Torque.FromNewtonCentimeters(value);

        /// <inheritdoc cref="Torque.FromNewtonCentimeters(double)"/>
        public static Torque NewtonCentimeters(this double value) => (Torque)Torque.FromNewtonCentimeters(new Number<double, DoubleCalculator>(value));

        /// <inheritdoc cref="Torque.FromNewtonCentimeters(double)"/>
        public static Torque NewtonCentimeters(this float value) => (Torque)Torque.FromNewtonCentimeters(value);

        /// <inheritdoc cref="Torque.FromNewtonCentimeters(double)"/>
        public static Torque NewtonCentimeters(this decimal value) => (Torque)Torque.FromNewtonCentimeters(new Number<double, DoubleCalculator>(Decimal.ToDouble(value)));

        #endregion

        #region NewtonMeter

        /// <inheritdoc cref="Torque.FromNewtonMeters(double)"/>
        public static Torque NewtonMeters(this int value) => (Torque)Torque.FromNewtonMeters(value);
	
        /// <inheritdoc cref="Torque.FromNewtonMeters(double)"/>
        public static Torque NewtonMeters(this long value) => (Torque)Torque.FromNewtonMeters(value);

        /// <inheritdoc cref="Torque.FromNewtonMeters(double)"/>
        public static Torque NewtonMeters(this double value) => (Torque)Torque.FromNewtonMeters(new Number<double, DoubleCalculator>(value));

        /// <inheritdoc cref="Torque.FromNewtonMeters(double)"/>
        public static Torque NewtonMeters(this float value) => (Torque)Torque.FromNewtonMeters(value);

        /// <inheritdoc cref="Torque.FromNewtonMeters(double)"/>
        public static Torque NewtonMeters(this decimal value) => (Torque)Torque.FromNewtonMeters(new Number<double, DoubleCalculator>(Decimal.ToDouble(value)));

        #endregion

        #region NewtonMillimeter

        /// <inheritdoc cref="Torque.FromNewtonMillimeters(double)"/>
        public static Torque NewtonMillimeters(this int value) => (Torque)Torque.FromNewtonMillimeters(value);
	
        /// <inheritdoc cref="Torque.FromNewtonMillimeters(double)"/>
        public static Torque NewtonMillimeters(this long value) => (Torque)Torque.FromNewtonMillimeters(value);

        /// <inheritdoc cref="Torque.FromNewtonMillimeters(double)"/>
        public static Torque NewtonMillimeters(this double value) => (Torque)Torque.FromNewtonMillimeters(new Number<double, DoubleCalculator>(value));

        /// <inheritdoc cref="Torque.FromNewtonMillimeters(double)"/>
        public static Torque NewtonMillimeters(this float value) => (Torque)Torque.FromNewtonMillimeters(value);

        /// <inheritdoc cref="Torque.FromNewtonMillimeters(double)"/>
        public static Torque NewtonMillimeters(this decimal value) => (Torque)Torque.FromNewtonMillimeters(new Number<double, DoubleCalculator>(Decimal.ToDouble(value)));

        #endregion

        #region PoundForceFoot

        /// <inheritdoc cref="Torque.FromPoundForceFeet(double)"/>
        public static Torque PoundForceFeet(this int value) => (Torque)Torque.FromPoundForceFeet(value);
	
        /// <inheritdoc cref="Torque.FromPoundForceFeet(double)"/>
        public static Torque PoundForceFeet(this long value) => (Torque)Torque.FromPoundForceFeet(value);

        /// <inheritdoc cref="Torque.FromPoundForceFeet(double)"/>
        public static Torque PoundForceFeet(this double value) => (Torque)Torque.FromPoundForceFeet(new Number<double, DoubleCalculator>(value));

        /// <inheritdoc cref="Torque.FromPoundForceFeet(double)"/>
        public static Torque PoundForceFeet(this float value) => (Torque)Torque.FromPoundForceFeet(value);

        /// <inheritdoc cref="Torque.FromPoundForceFeet(double)"/>
        public static Torque PoundForceFeet(this decimal value) => (Torque)Torque.FromPoundForceFeet(new Number<double, DoubleCalculator>(Decimal.ToDouble(value)));

        #endregion

        #region PoundForceInch

        /// <inheritdoc cref="Torque.FromPoundForceInches(double)"/>
        public static Torque PoundForceInches(this int value) => (Torque)Torque.FromPoundForceInches(value);
	
        /// <inheritdoc cref="Torque.FromPoundForceInches(double)"/>
        public static Torque PoundForceInches(this long value) => (Torque)Torque.FromPoundForceInches(value);

        /// <inheritdoc cref="Torque.FromPoundForceInches(double)"/>
        public static Torque PoundForceInches(this double value) => (Torque)Torque.FromPoundForceInches(new Number<double, DoubleCalculator>(value));

        /// <inheritdoc cref="Torque.FromPoundForceInches(double)"/>
        public static Torque PoundForceInches(this float value) => (Torque)Torque.FromPoundForceInches(value);

        /// <inheritdoc cref="Torque.FromPoundForceInches(double)"/>
        public static Torque PoundForceInches(this decimal value) => (Torque)Torque.FromPoundForceInches(new Number<double, DoubleCalculator>(Decimal.ToDouble(value)));

        #endregion

        #region TonneForceCentimeter

        /// <inheritdoc cref="Torque.FromTonneForceCentimeters(double)"/>
        public static Torque TonneForceCentimeters(this int value) => (Torque)Torque.FromTonneForceCentimeters(value);
	
        /// <inheritdoc cref="Torque.FromTonneForceCentimeters(double)"/>
        public static Torque TonneForceCentimeters(this long value) => (Torque)Torque.FromTonneForceCentimeters(value);

        /// <inheritdoc cref="Torque.FromTonneForceCentimeters(double)"/>
        public static Torque TonneForceCentimeters(this double value) => (Torque)Torque.FromTonneForceCentimeters(new Number<double, DoubleCalculator>(value));

        /// <inheritdoc cref="Torque.FromTonneForceCentimeters(double)"/>
        public static Torque TonneForceCentimeters(this float value) => (Torque)Torque.FromTonneForceCentimeters(value);

        /// <inheritdoc cref="Torque.FromTonneForceCentimeters(double)"/>
        public static Torque TonneForceCentimeters(this decimal value) => (Torque)Torque.FromTonneForceCentimeters(new Number<double, DoubleCalculator>(Decimal.ToDouble(value)));

        #endregion

        #region TonneForceMeter

        /// <inheritdoc cref="Torque.FromTonneForceMeters(double)"/>
        public static Torque TonneForceMeters(this int value) => (Torque)Torque.FromTonneForceMeters(value);
	
        /// <inheritdoc cref="Torque.FromTonneForceMeters(double)"/>
        public static Torque TonneForceMeters(this long value) => (Torque)Torque.FromTonneForceMeters(value);

        /// <inheritdoc cref="Torque.FromTonneForceMeters(double)"/>
        public static Torque TonneForceMeters(this double value) => (Torque)Torque.FromTonneForceMeters(new Number<double, DoubleCalculator>(value));

        /// <inheritdoc cref="Torque.FromTonneForceMeters(double)"/>
        public static Torque TonneForceMeters(this float value) => (Torque)Torque.FromTonneForceMeters(value);

        /// <inheritdoc cref="Torque.FromTonneForceMeters(double)"/>
        public static Torque TonneForceMeters(this decimal value) => (Torque)Torque.FromTonneForceMeters(new Number<double, DoubleCalculator>(Decimal.ToDouble(value)));

        #endregion

        #region TonneForceMillimeter

        /// <inheritdoc cref="Torque.FromTonneForceMillimeters(double)"/>
        public static Torque TonneForceMillimeters(this int value) => (Torque)Torque.FromTonneForceMillimeters(value);
	
        /// <inheritdoc cref="Torque.FromTonneForceMillimeters(double)"/>
        public static Torque TonneForceMillimeters(this long value) => (Torque)Torque.FromTonneForceMillimeters(value);

        /// <inheritdoc cref="Torque.FromTonneForceMillimeters(double)"/>
        public static Torque TonneForceMillimeters(this double value) => (Torque)Torque.FromTonneForceMillimeters(new Number<double, DoubleCalculator>(value));

        /// <inheritdoc cref="Torque.FromTonneForceMillimeters(double)"/>
        public static Torque TonneForceMillimeters(this float value) => (Torque)Torque.FromTonneForceMillimeters(value);

        /// <inheritdoc cref="Torque.FromTonneForceMillimeters(double)"/>
        public static Torque TonneForceMillimeters(this decimal value) => (Torque)Torque.FromTonneForceMillimeters(new Number<double, DoubleCalculator>(Decimal.ToDouble(value)));

        #endregion

    }
}
#endif
