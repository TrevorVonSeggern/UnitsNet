//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by \generate-code.bat.
//
//     Changes to this file will be lost when the code is regenerated.
//     The build server regenerates the code before each build and a pre-build
//     step will regenerate the code on each local build.
//
//     See https://github.com/angularsen/UnitsNet/wiki/Adding-a-New-Unit for how to add or edit units.
//
//     Add CustomCode\Quantities\MyUnit.extra.cs files to add code to generated quantities.
//     Add Extensions\MyUnitExtensions.cs to decorate quantities with new behavior.
//     Add UnitDefinitions\MyUnit.json and run GeneratUnits.bat to generate new units or quantities.
//
// </auto-generated>
//------------------------------------------------------------------------------

// Copyright (c) 2013 Andreas Gullberg Larsen (andreas.larsen84@gmail.com).
// https://github.com/angularsen/UnitsNet
// 
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
// 
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
// 
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
// THE SOFTWARE.

using System;
using UnitsNet.InternalHelpers.Calculators;

// Windows Runtime Component does not support extension methods and method overloads: https://msdn.microsoft.com/en-us/library/br230301.aspx
#if !WINDOWS_UWP
namespace UnitsNet.Extensions.NumberToTemperatureDelta
{
    public static class NumberToTemperatureDeltaExtensions
    {
        #region DegreeCelsius

        /// <inheritdoc cref="TemperatureDelta.FromDegreesCelsius(double)"/>
        public static TemperatureDelta DegreesCelsius(this int value) => (TemperatureDelta)TemperatureDelta.FromDegreesCelsius(value);
	
        /// <inheritdoc cref="TemperatureDelta.FromDegreesCelsius(double)"/>
        public static TemperatureDelta DegreesCelsius(this long value) => (TemperatureDelta)TemperatureDelta.FromDegreesCelsius(value);

        /// <inheritdoc cref="TemperatureDelta.FromDegreesCelsius(double)"/>
        public static TemperatureDelta DegreesCelsius(this double value) => (TemperatureDelta)TemperatureDelta.FromDegreesCelsius(new Number<double, DoubleCalculator>(value));

        /// <inheritdoc cref="TemperatureDelta.FromDegreesCelsius(double)"/>
        public static TemperatureDelta DegreesCelsius(this float value) => (TemperatureDelta)TemperatureDelta.FromDegreesCelsius(value);

        /// <inheritdoc cref="TemperatureDelta.FromDegreesCelsius(double)"/>
        public static TemperatureDelta DegreesCelsius(this decimal value) => (TemperatureDelta)TemperatureDelta.FromDegreesCelsius(new Number<double, DoubleCalculator>(Decimal.ToDouble(value)));

        #endregion

        #region DegreeCelsiusDelta

        /// <inheritdoc cref="TemperatureDelta.FromDegreesCelsiusDelta(double)"/>
        public static TemperatureDelta DegreesCelsiusDelta(this int value) => (TemperatureDelta)TemperatureDelta.FromDegreesCelsiusDelta(value);
	
        /// <inheritdoc cref="TemperatureDelta.FromDegreesCelsiusDelta(double)"/>
        public static TemperatureDelta DegreesCelsiusDelta(this long value) => (TemperatureDelta)TemperatureDelta.FromDegreesCelsiusDelta(value);

        /// <inheritdoc cref="TemperatureDelta.FromDegreesCelsiusDelta(double)"/>
        public static TemperatureDelta DegreesCelsiusDelta(this double value) => (TemperatureDelta)TemperatureDelta.FromDegreesCelsiusDelta(new Number<double, DoubleCalculator>(value));

        /// <inheritdoc cref="TemperatureDelta.FromDegreesCelsiusDelta(double)"/>
        public static TemperatureDelta DegreesCelsiusDelta(this float value) => (TemperatureDelta)TemperatureDelta.FromDegreesCelsiusDelta(value);

        /// <inheritdoc cref="TemperatureDelta.FromDegreesCelsiusDelta(double)"/>
        public static TemperatureDelta DegreesCelsiusDelta(this decimal value) => (TemperatureDelta)TemperatureDelta.FromDegreesCelsiusDelta(new Number<double, DoubleCalculator>(Decimal.ToDouble(value)));

        #endregion

        #region DegreeDelisle

        /// <inheritdoc cref="TemperatureDelta.FromDegreesDelisle(double)"/>
        public static TemperatureDelta DegreesDelisle(this int value) => (TemperatureDelta)TemperatureDelta.FromDegreesDelisle(value);
	
        /// <inheritdoc cref="TemperatureDelta.FromDegreesDelisle(double)"/>
        public static TemperatureDelta DegreesDelisle(this long value) => (TemperatureDelta)TemperatureDelta.FromDegreesDelisle(value);

        /// <inheritdoc cref="TemperatureDelta.FromDegreesDelisle(double)"/>
        public static TemperatureDelta DegreesDelisle(this double value) => (TemperatureDelta)TemperatureDelta.FromDegreesDelisle(new Number<double, DoubleCalculator>(value));

        /// <inheritdoc cref="TemperatureDelta.FromDegreesDelisle(double)"/>
        public static TemperatureDelta DegreesDelisle(this float value) => (TemperatureDelta)TemperatureDelta.FromDegreesDelisle(value);

        /// <inheritdoc cref="TemperatureDelta.FromDegreesDelisle(double)"/>
        public static TemperatureDelta DegreesDelisle(this decimal value) => (TemperatureDelta)TemperatureDelta.FromDegreesDelisle(new Number<double, DoubleCalculator>(Decimal.ToDouble(value)));

        #endregion

        #region DegreeDelisleDelta

        /// <inheritdoc cref="TemperatureDelta.FromDegreesDelisleDelta(double)"/>
        public static TemperatureDelta DegreesDelisleDelta(this int value) => (TemperatureDelta)TemperatureDelta.FromDegreesDelisleDelta(value);
	
        /// <inheritdoc cref="TemperatureDelta.FromDegreesDelisleDelta(double)"/>
        public static TemperatureDelta DegreesDelisleDelta(this long value) => (TemperatureDelta)TemperatureDelta.FromDegreesDelisleDelta(value);

        /// <inheritdoc cref="TemperatureDelta.FromDegreesDelisleDelta(double)"/>
        public static TemperatureDelta DegreesDelisleDelta(this double value) => (TemperatureDelta)TemperatureDelta.FromDegreesDelisleDelta(new Number<double, DoubleCalculator>(value));

        /// <inheritdoc cref="TemperatureDelta.FromDegreesDelisleDelta(double)"/>
        public static TemperatureDelta DegreesDelisleDelta(this float value) => (TemperatureDelta)TemperatureDelta.FromDegreesDelisleDelta(value);

        /// <inheritdoc cref="TemperatureDelta.FromDegreesDelisleDelta(double)"/>
        public static TemperatureDelta DegreesDelisleDelta(this decimal value) => (TemperatureDelta)TemperatureDelta.FromDegreesDelisleDelta(new Number<double, DoubleCalculator>(Decimal.ToDouble(value)));

        #endregion

        #region DegreeFahrenheit

        /// <inheritdoc cref="TemperatureDelta.FromDegreesFahrenheit(double)"/>
        public static TemperatureDelta DegreesFahrenheit(this int value) => (TemperatureDelta)TemperatureDelta.FromDegreesFahrenheit(value);
	
        /// <inheritdoc cref="TemperatureDelta.FromDegreesFahrenheit(double)"/>
        public static TemperatureDelta DegreesFahrenheit(this long value) => (TemperatureDelta)TemperatureDelta.FromDegreesFahrenheit(value);

        /// <inheritdoc cref="TemperatureDelta.FromDegreesFahrenheit(double)"/>
        public static TemperatureDelta DegreesFahrenheit(this double value) => (TemperatureDelta)TemperatureDelta.FromDegreesFahrenheit(new Number<double, DoubleCalculator>(value));

        /// <inheritdoc cref="TemperatureDelta.FromDegreesFahrenheit(double)"/>
        public static TemperatureDelta DegreesFahrenheit(this float value) => (TemperatureDelta)TemperatureDelta.FromDegreesFahrenheit(value);

        /// <inheritdoc cref="TemperatureDelta.FromDegreesFahrenheit(double)"/>
        public static TemperatureDelta DegreesFahrenheit(this decimal value) => (TemperatureDelta)TemperatureDelta.FromDegreesFahrenheit(new Number<double, DoubleCalculator>(Decimal.ToDouble(value)));

        #endregion

        #region DegreeFahrenheitDelta

        /// <inheritdoc cref="TemperatureDelta.FromDegreesFahrenheitDelta(double)"/>
        public static TemperatureDelta DegreesFahrenheitDelta(this int value) => (TemperatureDelta)TemperatureDelta.FromDegreesFahrenheitDelta(value);
	
        /// <inheritdoc cref="TemperatureDelta.FromDegreesFahrenheitDelta(double)"/>
        public static TemperatureDelta DegreesFahrenheitDelta(this long value) => (TemperatureDelta)TemperatureDelta.FromDegreesFahrenheitDelta(value);

        /// <inheritdoc cref="TemperatureDelta.FromDegreesFahrenheitDelta(double)"/>
        public static TemperatureDelta DegreesFahrenheitDelta(this double value) => (TemperatureDelta)TemperatureDelta.FromDegreesFahrenheitDelta(new Number<double, DoubleCalculator>(value));

        /// <inheritdoc cref="TemperatureDelta.FromDegreesFahrenheitDelta(double)"/>
        public static TemperatureDelta DegreesFahrenheitDelta(this float value) => (TemperatureDelta)TemperatureDelta.FromDegreesFahrenheitDelta(value);

        /// <inheritdoc cref="TemperatureDelta.FromDegreesFahrenheitDelta(double)"/>
        public static TemperatureDelta DegreesFahrenheitDelta(this decimal value) => (TemperatureDelta)TemperatureDelta.FromDegreesFahrenheitDelta(new Number<double, DoubleCalculator>(Decimal.ToDouble(value)));

        #endregion

        #region DegreeNewton

        /// <inheritdoc cref="TemperatureDelta.FromDegreesNewton(double)"/>
        public static TemperatureDelta DegreesNewton(this int value) => (TemperatureDelta)TemperatureDelta.FromDegreesNewton(value);
	
        /// <inheritdoc cref="TemperatureDelta.FromDegreesNewton(double)"/>
        public static TemperatureDelta DegreesNewton(this long value) => (TemperatureDelta)TemperatureDelta.FromDegreesNewton(value);

        /// <inheritdoc cref="TemperatureDelta.FromDegreesNewton(double)"/>
        public static TemperatureDelta DegreesNewton(this double value) => (TemperatureDelta)TemperatureDelta.FromDegreesNewton(new Number<double, DoubleCalculator>(value));

        /// <inheritdoc cref="TemperatureDelta.FromDegreesNewton(double)"/>
        public static TemperatureDelta DegreesNewton(this float value) => (TemperatureDelta)TemperatureDelta.FromDegreesNewton(value);

        /// <inheritdoc cref="TemperatureDelta.FromDegreesNewton(double)"/>
        public static TemperatureDelta DegreesNewton(this decimal value) => (TemperatureDelta)TemperatureDelta.FromDegreesNewton(new Number<double, DoubleCalculator>(Decimal.ToDouble(value)));

        #endregion

        #region DegreeNewtonDelta

        /// <inheritdoc cref="TemperatureDelta.FromDegreesNewtonDelta(double)"/>
        public static TemperatureDelta DegreesNewtonDelta(this int value) => (TemperatureDelta)TemperatureDelta.FromDegreesNewtonDelta(value);
	
        /// <inheritdoc cref="TemperatureDelta.FromDegreesNewtonDelta(double)"/>
        public static TemperatureDelta DegreesNewtonDelta(this long value) => (TemperatureDelta)TemperatureDelta.FromDegreesNewtonDelta(value);

        /// <inheritdoc cref="TemperatureDelta.FromDegreesNewtonDelta(double)"/>
        public static TemperatureDelta DegreesNewtonDelta(this double value) => (TemperatureDelta)TemperatureDelta.FromDegreesNewtonDelta(new Number<double, DoubleCalculator>(value));

        /// <inheritdoc cref="TemperatureDelta.FromDegreesNewtonDelta(double)"/>
        public static TemperatureDelta DegreesNewtonDelta(this float value) => (TemperatureDelta)TemperatureDelta.FromDegreesNewtonDelta(value);

        /// <inheritdoc cref="TemperatureDelta.FromDegreesNewtonDelta(double)"/>
        public static TemperatureDelta DegreesNewtonDelta(this decimal value) => (TemperatureDelta)TemperatureDelta.FromDegreesNewtonDelta(new Number<double, DoubleCalculator>(Decimal.ToDouble(value)));

        #endregion

        #region DegreeRankine

        /// <inheritdoc cref="TemperatureDelta.FromDegreesRankine(double)"/>
        public static TemperatureDelta DegreesRankine(this int value) => (TemperatureDelta)TemperatureDelta.FromDegreesRankine(value);
	
        /// <inheritdoc cref="TemperatureDelta.FromDegreesRankine(double)"/>
        public static TemperatureDelta DegreesRankine(this long value) => (TemperatureDelta)TemperatureDelta.FromDegreesRankine(value);

        /// <inheritdoc cref="TemperatureDelta.FromDegreesRankine(double)"/>
        public static TemperatureDelta DegreesRankine(this double value) => (TemperatureDelta)TemperatureDelta.FromDegreesRankine(new Number<double, DoubleCalculator>(value));

        /// <inheritdoc cref="TemperatureDelta.FromDegreesRankine(double)"/>
        public static TemperatureDelta DegreesRankine(this float value) => (TemperatureDelta)TemperatureDelta.FromDegreesRankine(value);

        /// <inheritdoc cref="TemperatureDelta.FromDegreesRankine(double)"/>
        public static TemperatureDelta DegreesRankine(this decimal value) => (TemperatureDelta)TemperatureDelta.FromDegreesRankine(new Number<double, DoubleCalculator>(Decimal.ToDouble(value)));

        #endregion

        #region DegreeRankineDelta

        /// <inheritdoc cref="TemperatureDelta.FromDegreesRankineDelta(double)"/>
        public static TemperatureDelta DegreesRankineDelta(this int value) => (TemperatureDelta)TemperatureDelta.FromDegreesRankineDelta(value);
	
        /// <inheritdoc cref="TemperatureDelta.FromDegreesRankineDelta(double)"/>
        public static TemperatureDelta DegreesRankineDelta(this long value) => (TemperatureDelta)TemperatureDelta.FromDegreesRankineDelta(value);

        /// <inheritdoc cref="TemperatureDelta.FromDegreesRankineDelta(double)"/>
        public static TemperatureDelta DegreesRankineDelta(this double value) => (TemperatureDelta)TemperatureDelta.FromDegreesRankineDelta(new Number<double, DoubleCalculator>(value));

        /// <inheritdoc cref="TemperatureDelta.FromDegreesRankineDelta(double)"/>
        public static TemperatureDelta DegreesRankineDelta(this float value) => (TemperatureDelta)TemperatureDelta.FromDegreesRankineDelta(value);

        /// <inheritdoc cref="TemperatureDelta.FromDegreesRankineDelta(double)"/>
        public static TemperatureDelta DegreesRankineDelta(this decimal value) => (TemperatureDelta)TemperatureDelta.FromDegreesRankineDelta(new Number<double, DoubleCalculator>(Decimal.ToDouble(value)));

        #endregion

        #region DegreeReaumur

        /// <inheritdoc cref="TemperatureDelta.FromDegreesReaumur(double)"/>
        public static TemperatureDelta DegreesReaumur(this int value) => (TemperatureDelta)TemperatureDelta.FromDegreesReaumur(value);
	
        /// <inheritdoc cref="TemperatureDelta.FromDegreesReaumur(double)"/>
        public static TemperatureDelta DegreesReaumur(this long value) => (TemperatureDelta)TemperatureDelta.FromDegreesReaumur(value);

        /// <inheritdoc cref="TemperatureDelta.FromDegreesReaumur(double)"/>
        public static TemperatureDelta DegreesReaumur(this double value) => (TemperatureDelta)TemperatureDelta.FromDegreesReaumur(new Number<double, DoubleCalculator>(value));

        /// <inheritdoc cref="TemperatureDelta.FromDegreesReaumur(double)"/>
        public static TemperatureDelta DegreesReaumur(this float value) => (TemperatureDelta)TemperatureDelta.FromDegreesReaumur(value);

        /// <inheritdoc cref="TemperatureDelta.FromDegreesReaumur(double)"/>
        public static TemperatureDelta DegreesReaumur(this decimal value) => (TemperatureDelta)TemperatureDelta.FromDegreesReaumur(new Number<double, DoubleCalculator>(Decimal.ToDouble(value)));

        #endregion

        #region DegreeReaumurDelta

        /// <inheritdoc cref="TemperatureDelta.FromDegreesReaumurDelta(double)"/>
        public static TemperatureDelta DegreesReaumurDelta(this int value) => (TemperatureDelta)TemperatureDelta.FromDegreesReaumurDelta(value);
	
        /// <inheritdoc cref="TemperatureDelta.FromDegreesReaumurDelta(double)"/>
        public static TemperatureDelta DegreesReaumurDelta(this long value) => (TemperatureDelta)TemperatureDelta.FromDegreesReaumurDelta(value);

        /// <inheritdoc cref="TemperatureDelta.FromDegreesReaumurDelta(double)"/>
        public static TemperatureDelta DegreesReaumurDelta(this double value) => (TemperatureDelta)TemperatureDelta.FromDegreesReaumurDelta(new Number<double, DoubleCalculator>(value));

        /// <inheritdoc cref="TemperatureDelta.FromDegreesReaumurDelta(double)"/>
        public static TemperatureDelta DegreesReaumurDelta(this float value) => (TemperatureDelta)TemperatureDelta.FromDegreesReaumurDelta(value);

        /// <inheritdoc cref="TemperatureDelta.FromDegreesReaumurDelta(double)"/>
        public static TemperatureDelta DegreesReaumurDelta(this decimal value) => (TemperatureDelta)TemperatureDelta.FromDegreesReaumurDelta(new Number<double, DoubleCalculator>(Decimal.ToDouble(value)));

        #endregion

        #region DegreeRoemer

        /// <inheritdoc cref="TemperatureDelta.FromDegreesRoemer(double)"/>
        public static TemperatureDelta DegreesRoemer(this int value) => (TemperatureDelta)TemperatureDelta.FromDegreesRoemer(value);
	
        /// <inheritdoc cref="TemperatureDelta.FromDegreesRoemer(double)"/>
        public static TemperatureDelta DegreesRoemer(this long value) => (TemperatureDelta)TemperatureDelta.FromDegreesRoemer(value);

        /// <inheritdoc cref="TemperatureDelta.FromDegreesRoemer(double)"/>
        public static TemperatureDelta DegreesRoemer(this double value) => (TemperatureDelta)TemperatureDelta.FromDegreesRoemer(new Number<double, DoubleCalculator>(value));

        /// <inheritdoc cref="TemperatureDelta.FromDegreesRoemer(double)"/>
        public static TemperatureDelta DegreesRoemer(this float value) => (TemperatureDelta)TemperatureDelta.FromDegreesRoemer(value);

        /// <inheritdoc cref="TemperatureDelta.FromDegreesRoemer(double)"/>
        public static TemperatureDelta DegreesRoemer(this decimal value) => (TemperatureDelta)TemperatureDelta.FromDegreesRoemer(new Number<double, DoubleCalculator>(Decimal.ToDouble(value)));

        #endregion

        #region DegreeRoemerDelta

        /// <inheritdoc cref="TemperatureDelta.FromDegreesRoemerDelta(double)"/>
        public static TemperatureDelta DegreesRoemerDelta(this int value) => (TemperatureDelta)TemperatureDelta.FromDegreesRoemerDelta(value);
	
        /// <inheritdoc cref="TemperatureDelta.FromDegreesRoemerDelta(double)"/>
        public static TemperatureDelta DegreesRoemerDelta(this long value) => (TemperatureDelta)TemperatureDelta.FromDegreesRoemerDelta(value);

        /// <inheritdoc cref="TemperatureDelta.FromDegreesRoemerDelta(double)"/>
        public static TemperatureDelta DegreesRoemerDelta(this double value) => (TemperatureDelta)TemperatureDelta.FromDegreesRoemerDelta(new Number<double, DoubleCalculator>(value));

        /// <inheritdoc cref="TemperatureDelta.FromDegreesRoemerDelta(double)"/>
        public static TemperatureDelta DegreesRoemerDelta(this float value) => (TemperatureDelta)TemperatureDelta.FromDegreesRoemerDelta(value);

        /// <inheritdoc cref="TemperatureDelta.FromDegreesRoemerDelta(double)"/>
        public static TemperatureDelta DegreesRoemerDelta(this decimal value) => (TemperatureDelta)TemperatureDelta.FromDegreesRoemerDelta(new Number<double, DoubleCalculator>(Decimal.ToDouble(value)));

        #endregion

        #region Kelvin

        /// <inheritdoc cref="TemperatureDelta.FromKelvins(double)"/>
        public static TemperatureDelta Kelvins(this int value) => (TemperatureDelta)TemperatureDelta.FromKelvins(value);
	
        /// <inheritdoc cref="TemperatureDelta.FromKelvins(double)"/>
        public static TemperatureDelta Kelvins(this long value) => (TemperatureDelta)TemperatureDelta.FromKelvins(value);

        /// <inheritdoc cref="TemperatureDelta.FromKelvins(double)"/>
        public static TemperatureDelta Kelvins(this double value) => (TemperatureDelta)TemperatureDelta.FromKelvins(new Number<double, DoubleCalculator>(value));

        /// <inheritdoc cref="TemperatureDelta.FromKelvins(double)"/>
        public static TemperatureDelta Kelvins(this float value) => (TemperatureDelta)TemperatureDelta.FromKelvins(value);

        /// <inheritdoc cref="TemperatureDelta.FromKelvins(double)"/>
        public static TemperatureDelta Kelvins(this decimal value) => (TemperatureDelta)TemperatureDelta.FromKelvins(new Number<double, DoubleCalculator>(Decimal.ToDouble(value)));

        #endregion

        #region KelvinDelta

        /// <inheritdoc cref="TemperatureDelta.FromKelvinsDelta(double)"/>
        public static TemperatureDelta KelvinsDelta(this int value) => (TemperatureDelta)TemperatureDelta.FromKelvinsDelta(value);
	
        /// <inheritdoc cref="TemperatureDelta.FromKelvinsDelta(double)"/>
        public static TemperatureDelta KelvinsDelta(this long value) => (TemperatureDelta)TemperatureDelta.FromKelvinsDelta(value);

        /// <inheritdoc cref="TemperatureDelta.FromKelvinsDelta(double)"/>
        public static TemperatureDelta KelvinsDelta(this double value) => (TemperatureDelta)TemperatureDelta.FromKelvinsDelta(new Number<double, DoubleCalculator>(value));

        /// <inheritdoc cref="TemperatureDelta.FromKelvinsDelta(double)"/>
        public static TemperatureDelta KelvinsDelta(this float value) => (TemperatureDelta)TemperatureDelta.FromKelvinsDelta(value);

        /// <inheritdoc cref="TemperatureDelta.FromKelvinsDelta(double)"/>
        public static TemperatureDelta KelvinsDelta(this decimal value) => (TemperatureDelta)TemperatureDelta.FromKelvinsDelta(new Number<double, DoubleCalculator>(Decimal.ToDouble(value)));

        #endregion

    }
}
#endif
