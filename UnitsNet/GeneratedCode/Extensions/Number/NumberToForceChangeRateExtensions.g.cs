//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by \generate-code.bat.
//
//     Changes to this file will be lost when the code is regenerated.
//     The build server regenerates the code before each build and a pre-build
//     step will regenerate the code on each local build.
//
//     See https://github.com/angularsen/UnitsNet/wiki/Adding-a-New-Unit for how to add or edit units.
//
//     Add CustomCode\Quantities\MyUnit.extra.cs files to add code to generated quantities.
//     Add Extensions\MyUnitExtensions.cs to decorate quantities with new behavior.
//     Add UnitDefinitions\MyUnit.json and run GeneratUnits.bat to generate new units or quantities.
//
// </auto-generated>
//------------------------------------------------------------------------------

// Copyright (c) 2013 Andreas Gullberg Larsen (andreas.larsen84@gmail.com).
// https://github.com/angularsen/UnitsNet
// 
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
// 
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
// 
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
// THE SOFTWARE.

using System;
using UnitsNet.InternalHelpers.Calculators;

// Windows Runtime Component does not support extension methods and method overloads: https://msdn.microsoft.com/en-us/library/br230301.aspx
#if !WINDOWS_UWP
namespace UnitsNet.Extensions.NumberToForceChangeRate
{
    public static class NumberToForceChangeRateExtensions
    {
        #region CentinewtonPerSecond

        /// <inheritdoc cref="ForceChangeRate.FromCentinewtonsPerSecond(double)"/>
        public static ForceChangeRate CentinewtonsPerSecond(this int value) => (ForceChangeRate)ForceChangeRate.FromCentinewtonsPerSecond(value);
	
        /// <inheritdoc cref="ForceChangeRate.FromCentinewtonsPerSecond(double)"/>
        public static ForceChangeRate CentinewtonsPerSecond(this long value) => (ForceChangeRate)ForceChangeRate.FromCentinewtonsPerSecond(value);

        /// <inheritdoc cref="ForceChangeRate.FromCentinewtonsPerSecond(double)"/>
        public static ForceChangeRate CentinewtonsPerSecond(this double value) => (ForceChangeRate)ForceChangeRate.FromCentinewtonsPerSecond(new Number<double, DoubleCalculator>(value));

        /// <inheritdoc cref="ForceChangeRate.FromCentinewtonsPerSecond(double)"/>
        public static ForceChangeRate CentinewtonsPerSecond(this float value) => (ForceChangeRate)ForceChangeRate.FromCentinewtonsPerSecond(value);

        /// <inheritdoc cref="ForceChangeRate.FromCentinewtonsPerSecond(double)"/>
        public static ForceChangeRate CentinewtonsPerSecond(this decimal value) => (ForceChangeRate)ForceChangeRate.FromCentinewtonsPerSecond(new Number<double, DoubleCalculator>(Decimal.ToDouble(value)));

        #endregion

        #region DecanewtonPerMinute

        /// <inheritdoc cref="ForceChangeRate.FromDecanewtonsPerMinute(double)"/>
        public static ForceChangeRate DecanewtonsPerMinute(this int value) => (ForceChangeRate)ForceChangeRate.FromDecanewtonsPerMinute(value);
	
        /// <inheritdoc cref="ForceChangeRate.FromDecanewtonsPerMinute(double)"/>
        public static ForceChangeRate DecanewtonsPerMinute(this long value) => (ForceChangeRate)ForceChangeRate.FromDecanewtonsPerMinute(value);

        /// <inheritdoc cref="ForceChangeRate.FromDecanewtonsPerMinute(double)"/>
        public static ForceChangeRate DecanewtonsPerMinute(this double value) => (ForceChangeRate)ForceChangeRate.FromDecanewtonsPerMinute(new Number<double, DoubleCalculator>(value));

        /// <inheritdoc cref="ForceChangeRate.FromDecanewtonsPerMinute(double)"/>
        public static ForceChangeRate DecanewtonsPerMinute(this float value) => (ForceChangeRate)ForceChangeRate.FromDecanewtonsPerMinute(value);

        /// <inheritdoc cref="ForceChangeRate.FromDecanewtonsPerMinute(double)"/>
        public static ForceChangeRate DecanewtonsPerMinute(this decimal value) => (ForceChangeRate)ForceChangeRate.FromDecanewtonsPerMinute(new Number<double, DoubleCalculator>(Decimal.ToDouble(value)));

        #endregion

        #region DecanewtonPerSecond

        /// <inheritdoc cref="ForceChangeRate.FromDecanewtonsPerSecond(double)"/>
        public static ForceChangeRate DecanewtonsPerSecond(this int value) => (ForceChangeRate)ForceChangeRate.FromDecanewtonsPerSecond(value);
	
        /// <inheritdoc cref="ForceChangeRate.FromDecanewtonsPerSecond(double)"/>
        public static ForceChangeRate DecanewtonsPerSecond(this long value) => (ForceChangeRate)ForceChangeRate.FromDecanewtonsPerSecond(value);

        /// <inheritdoc cref="ForceChangeRate.FromDecanewtonsPerSecond(double)"/>
        public static ForceChangeRate DecanewtonsPerSecond(this double value) => (ForceChangeRate)ForceChangeRate.FromDecanewtonsPerSecond(new Number<double, DoubleCalculator>(value));

        /// <inheritdoc cref="ForceChangeRate.FromDecanewtonsPerSecond(double)"/>
        public static ForceChangeRate DecanewtonsPerSecond(this float value) => (ForceChangeRate)ForceChangeRate.FromDecanewtonsPerSecond(value);

        /// <inheritdoc cref="ForceChangeRate.FromDecanewtonsPerSecond(double)"/>
        public static ForceChangeRate DecanewtonsPerSecond(this decimal value) => (ForceChangeRate)ForceChangeRate.FromDecanewtonsPerSecond(new Number<double, DoubleCalculator>(Decimal.ToDouble(value)));

        #endregion

        #region DecinewtonPerSecond

        /// <inheritdoc cref="ForceChangeRate.FromDecinewtonsPerSecond(double)"/>
        public static ForceChangeRate DecinewtonsPerSecond(this int value) => (ForceChangeRate)ForceChangeRate.FromDecinewtonsPerSecond(value);
	
        /// <inheritdoc cref="ForceChangeRate.FromDecinewtonsPerSecond(double)"/>
        public static ForceChangeRate DecinewtonsPerSecond(this long value) => (ForceChangeRate)ForceChangeRate.FromDecinewtonsPerSecond(value);

        /// <inheritdoc cref="ForceChangeRate.FromDecinewtonsPerSecond(double)"/>
        public static ForceChangeRate DecinewtonsPerSecond(this double value) => (ForceChangeRate)ForceChangeRate.FromDecinewtonsPerSecond(new Number<double, DoubleCalculator>(value));

        /// <inheritdoc cref="ForceChangeRate.FromDecinewtonsPerSecond(double)"/>
        public static ForceChangeRate DecinewtonsPerSecond(this float value) => (ForceChangeRate)ForceChangeRate.FromDecinewtonsPerSecond(value);

        /// <inheritdoc cref="ForceChangeRate.FromDecinewtonsPerSecond(double)"/>
        public static ForceChangeRate DecinewtonsPerSecond(this decimal value) => (ForceChangeRate)ForceChangeRate.FromDecinewtonsPerSecond(new Number<double, DoubleCalculator>(Decimal.ToDouble(value)));

        #endregion

        #region KilonewtonPerMinute

        /// <inheritdoc cref="ForceChangeRate.FromKilonewtonsPerMinute(double)"/>
        public static ForceChangeRate KilonewtonsPerMinute(this int value) => (ForceChangeRate)ForceChangeRate.FromKilonewtonsPerMinute(value);
	
        /// <inheritdoc cref="ForceChangeRate.FromKilonewtonsPerMinute(double)"/>
        public static ForceChangeRate KilonewtonsPerMinute(this long value) => (ForceChangeRate)ForceChangeRate.FromKilonewtonsPerMinute(value);

        /// <inheritdoc cref="ForceChangeRate.FromKilonewtonsPerMinute(double)"/>
        public static ForceChangeRate KilonewtonsPerMinute(this double value) => (ForceChangeRate)ForceChangeRate.FromKilonewtonsPerMinute(new Number<double, DoubleCalculator>(value));

        /// <inheritdoc cref="ForceChangeRate.FromKilonewtonsPerMinute(double)"/>
        public static ForceChangeRate KilonewtonsPerMinute(this float value) => (ForceChangeRate)ForceChangeRate.FromKilonewtonsPerMinute(value);

        /// <inheritdoc cref="ForceChangeRate.FromKilonewtonsPerMinute(double)"/>
        public static ForceChangeRate KilonewtonsPerMinute(this decimal value) => (ForceChangeRate)ForceChangeRate.FromKilonewtonsPerMinute(new Number<double, DoubleCalculator>(Decimal.ToDouble(value)));

        #endregion

        #region KilonewtonPerSecond

        /// <inheritdoc cref="ForceChangeRate.FromKilonewtonsPerSecond(double)"/>
        public static ForceChangeRate KilonewtonsPerSecond(this int value) => (ForceChangeRate)ForceChangeRate.FromKilonewtonsPerSecond(value);
	
        /// <inheritdoc cref="ForceChangeRate.FromKilonewtonsPerSecond(double)"/>
        public static ForceChangeRate KilonewtonsPerSecond(this long value) => (ForceChangeRate)ForceChangeRate.FromKilonewtonsPerSecond(value);

        /// <inheritdoc cref="ForceChangeRate.FromKilonewtonsPerSecond(double)"/>
        public static ForceChangeRate KilonewtonsPerSecond(this double value) => (ForceChangeRate)ForceChangeRate.FromKilonewtonsPerSecond(new Number<double, DoubleCalculator>(value));

        /// <inheritdoc cref="ForceChangeRate.FromKilonewtonsPerSecond(double)"/>
        public static ForceChangeRate KilonewtonsPerSecond(this float value) => (ForceChangeRate)ForceChangeRate.FromKilonewtonsPerSecond(value);

        /// <inheritdoc cref="ForceChangeRate.FromKilonewtonsPerSecond(double)"/>
        public static ForceChangeRate KilonewtonsPerSecond(this decimal value) => (ForceChangeRate)ForceChangeRate.FromKilonewtonsPerSecond(new Number<double, DoubleCalculator>(Decimal.ToDouble(value)));

        #endregion

        #region MicronewtonPerSecond

        /// <inheritdoc cref="ForceChangeRate.FromMicronewtonsPerSecond(double)"/>
        public static ForceChangeRate MicronewtonsPerSecond(this int value) => (ForceChangeRate)ForceChangeRate.FromMicronewtonsPerSecond(value);
	
        /// <inheritdoc cref="ForceChangeRate.FromMicronewtonsPerSecond(double)"/>
        public static ForceChangeRate MicronewtonsPerSecond(this long value) => (ForceChangeRate)ForceChangeRate.FromMicronewtonsPerSecond(value);

        /// <inheritdoc cref="ForceChangeRate.FromMicronewtonsPerSecond(double)"/>
        public static ForceChangeRate MicronewtonsPerSecond(this double value) => (ForceChangeRate)ForceChangeRate.FromMicronewtonsPerSecond(new Number<double, DoubleCalculator>(value));

        /// <inheritdoc cref="ForceChangeRate.FromMicronewtonsPerSecond(double)"/>
        public static ForceChangeRate MicronewtonsPerSecond(this float value) => (ForceChangeRate)ForceChangeRate.FromMicronewtonsPerSecond(value);

        /// <inheritdoc cref="ForceChangeRate.FromMicronewtonsPerSecond(double)"/>
        public static ForceChangeRate MicronewtonsPerSecond(this decimal value) => (ForceChangeRate)ForceChangeRate.FromMicronewtonsPerSecond(new Number<double, DoubleCalculator>(Decimal.ToDouble(value)));

        #endregion

        #region MillinewtonPerSecond

        /// <inheritdoc cref="ForceChangeRate.FromMillinewtonsPerSecond(double)"/>
        public static ForceChangeRate MillinewtonsPerSecond(this int value) => (ForceChangeRate)ForceChangeRate.FromMillinewtonsPerSecond(value);
	
        /// <inheritdoc cref="ForceChangeRate.FromMillinewtonsPerSecond(double)"/>
        public static ForceChangeRate MillinewtonsPerSecond(this long value) => (ForceChangeRate)ForceChangeRate.FromMillinewtonsPerSecond(value);

        /// <inheritdoc cref="ForceChangeRate.FromMillinewtonsPerSecond(double)"/>
        public static ForceChangeRate MillinewtonsPerSecond(this double value) => (ForceChangeRate)ForceChangeRate.FromMillinewtonsPerSecond(new Number<double, DoubleCalculator>(value));

        /// <inheritdoc cref="ForceChangeRate.FromMillinewtonsPerSecond(double)"/>
        public static ForceChangeRate MillinewtonsPerSecond(this float value) => (ForceChangeRate)ForceChangeRate.FromMillinewtonsPerSecond(value);

        /// <inheritdoc cref="ForceChangeRate.FromMillinewtonsPerSecond(double)"/>
        public static ForceChangeRate MillinewtonsPerSecond(this decimal value) => (ForceChangeRate)ForceChangeRate.FromMillinewtonsPerSecond(new Number<double, DoubleCalculator>(Decimal.ToDouble(value)));

        #endregion

        #region NanonewtonPerSecond

        /// <inheritdoc cref="ForceChangeRate.FromNanonewtonsPerSecond(double)"/>
        public static ForceChangeRate NanonewtonsPerSecond(this int value) => (ForceChangeRate)ForceChangeRate.FromNanonewtonsPerSecond(value);
	
        /// <inheritdoc cref="ForceChangeRate.FromNanonewtonsPerSecond(double)"/>
        public static ForceChangeRate NanonewtonsPerSecond(this long value) => (ForceChangeRate)ForceChangeRate.FromNanonewtonsPerSecond(value);

        /// <inheritdoc cref="ForceChangeRate.FromNanonewtonsPerSecond(double)"/>
        public static ForceChangeRate NanonewtonsPerSecond(this double value) => (ForceChangeRate)ForceChangeRate.FromNanonewtonsPerSecond(new Number<double, DoubleCalculator>(value));

        /// <inheritdoc cref="ForceChangeRate.FromNanonewtonsPerSecond(double)"/>
        public static ForceChangeRate NanonewtonsPerSecond(this float value) => (ForceChangeRate)ForceChangeRate.FromNanonewtonsPerSecond(value);

        /// <inheritdoc cref="ForceChangeRate.FromNanonewtonsPerSecond(double)"/>
        public static ForceChangeRate NanonewtonsPerSecond(this decimal value) => (ForceChangeRate)ForceChangeRate.FromNanonewtonsPerSecond(new Number<double, DoubleCalculator>(Decimal.ToDouble(value)));

        #endregion

        #region NewtonPerMinute

        /// <inheritdoc cref="ForceChangeRate.FromNewtonsPerMinute(double)"/>
        public static ForceChangeRate NewtonsPerMinute(this int value) => (ForceChangeRate)ForceChangeRate.FromNewtonsPerMinute(value);
	
        /// <inheritdoc cref="ForceChangeRate.FromNewtonsPerMinute(double)"/>
        public static ForceChangeRate NewtonsPerMinute(this long value) => (ForceChangeRate)ForceChangeRate.FromNewtonsPerMinute(value);

        /// <inheritdoc cref="ForceChangeRate.FromNewtonsPerMinute(double)"/>
        public static ForceChangeRate NewtonsPerMinute(this double value) => (ForceChangeRate)ForceChangeRate.FromNewtonsPerMinute(new Number<double, DoubleCalculator>(value));

        /// <inheritdoc cref="ForceChangeRate.FromNewtonsPerMinute(double)"/>
        public static ForceChangeRate NewtonsPerMinute(this float value) => (ForceChangeRate)ForceChangeRate.FromNewtonsPerMinute(value);

        /// <inheritdoc cref="ForceChangeRate.FromNewtonsPerMinute(double)"/>
        public static ForceChangeRate NewtonsPerMinute(this decimal value) => (ForceChangeRate)ForceChangeRate.FromNewtonsPerMinute(new Number<double, DoubleCalculator>(Decimal.ToDouble(value)));

        #endregion

        #region NewtonPerSecond

        /// <inheritdoc cref="ForceChangeRate.FromNewtonsPerSecond(double)"/>
        public static ForceChangeRate NewtonsPerSecond(this int value) => (ForceChangeRate)ForceChangeRate.FromNewtonsPerSecond(value);
	
        /// <inheritdoc cref="ForceChangeRate.FromNewtonsPerSecond(double)"/>
        public static ForceChangeRate NewtonsPerSecond(this long value) => (ForceChangeRate)ForceChangeRate.FromNewtonsPerSecond(value);

        /// <inheritdoc cref="ForceChangeRate.FromNewtonsPerSecond(double)"/>
        public static ForceChangeRate NewtonsPerSecond(this double value) => (ForceChangeRate)ForceChangeRate.FromNewtonsPerSecond(new Number<double, DoubleCalculator>(value));

        /// <inheritdoc cref="ForceChangeRate.FromNewtonsPerSecond(double)"/>
        public static ForceChangeRate NewtonsPerSecond(this float value) => (ForceChangeRate)ForceChangeRate.FromNewtonsPerSecond(value);

        /// <inheritdoc cref="ForceChangeRate.FromNewtonsPerSecond(double)"/>
        public static ForceChangeRate NewtonsPerSecond(this decimal value) => (ForceChangeRate)ForceChangeRate.FromNewtonsPerSecond(new Number<double, DoubleCalculator>(Decimal.ToDouble(value)));

        #endregion

    }
}
#endif
