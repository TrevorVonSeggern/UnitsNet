//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by \generate-code.bat.
//
//     Changes to this file will be lost when the code is regenerated.
//     The build server regenerates the code before each build and a pre-build
//     step will regenerate the code on each local build.
//
//     See https://github.com/angularsen/UnitsNet/wiki/Adding-a-New-Unit for how to add or edit units.
//
//     Add CustomCode\Quantities\MyUnit.extra.cs files to add code to generated quantities.
//     Add Extensions\MyUnitExtensions.cs to decorate quantities with new behavior.
//     Add UnitDefinitions\MyUnit.json and run GeneratUnits.bat to generate new units or quantities.
//
// </auto-generated>
//------------------------------------------------------------------------------

// Copyright (c) 2013 Andreas Gullberg Larsen (andreas.larsen84@gmail.com).
// https://github.com/angularsen/UnitsNet
// 
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
// 
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
// 
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
// THE SOFTWARE.

using System;
using UnitsNet.InternalHelpers.Calculators;

// Windows Runtime Component does not support extension methods and method overloads: https://msdn.microsoft.com/en-us/library/br230301.aspx
#if !WINDOWS_UWP
namespace UnitsNet.Extensions.NumberToMolarMass
{
    public static class NumberToMolarMassExtensions
    {
        #region CentigramPerMole

        /// <inheritdoc cref="MolarMass.FromCentigramsPerMole(double)"/>
        public static MolarMass CentigramsPerMole(this int value) => (MolarMass)MolarMass.FromCentigramsPerMole(value);
	
        /// <inheritdoc cref="MolarMass.FromCentigramsPerMole(double)"/>
        public static MolarMass CentigramsPerMole(this long value) => (MolarMass)MolarMass.FromCentigramsPerMole(value);

        /// <inheritdoc cref="MolarMass.FromCentigramsPerMole(double)"/>
        public static MolarMass CentigramsPerMole(this double value) => (MolarMass)MolarMass.FromCentigramsPerMole(new Number<double, DoubleCalculator>(value));

        /// <inheritdoc cref="MolarMass.FromCentigramsPerMole(double)"/>
        public static MolarMass CentigramsPerMole(this float value) => (MolarMass)MolarMass.FromCentigramsPerMole(value);

        /// <inheritdoc cref="MolarMass.FromCentigramsPerMole(double)"/>
        public static MolarMass CentigramsPerMole(this decimal value) => (MolarMass)MolarMass.FromCentigramsPerMole(new Number<double, DoubleCalculator>(Decimal.ToDouble(value)));

        #endregion

        #region DecagramPerMole

        /// <inheritdoc cref="MolarMass.FromDecagramsPerMole(double)"/>
        public static MolarMass DecagramsPerMole(this int value) => (MolarMass)MolarMass.FromDecagramsPerMole(value);
	
        /// <inheritdoc cref="MolarMass.FromDecagramsPerMole(double)"/>
        public static MolarMass DecagramsPerMole(this long value) => (MolarMass)MolarMass.FromDecagramsPerMole(value);

        /// <inheritdoc cref="MolarMass.FromDecagramsPerMole(double)"/>
        public static MolarMass DecagramsPerMole(this double value) => (MolarMass)MolarMass.FromDecagramsPerMole(new Number<double, DoubleCalculator>(value));

        /// <inheritdoc cref="MolarMass.FromDecagramsPerMole(double)"/>
        public static MolarMass DecagramsPerMole(this float value) => (MolarMass)MolarMass.FromDecagramsPerMole(value);

        /// <inheritdoc cref="MolarMass.FromDecagramsPerMole(double)"/>
        public static MolarMass DecagramsPerMole(this decimal value) => (MolarMass)MolarMass.FromDecagramsPerMole(new Number<double, DoubleCalculator>(Decimal.ToDouble(value)));

        #endregion

        #region DecigramPerMole

        /// <inheritdoc cref="MolarMass.FromDecigramsPerMole(double)"/>
        public static MolarMass DecigramsPerMole(this int value) => (MolarMass)MolarMass.FromDecigramsPerMole(value);
	
        /// <inheritdoc cref="MolarMass.FromDecigramsPerMole(double)"/>
        public static MolarMass DecigramsPerMole(this long value) => (MolarMass)MolarMass.FromDecigramsPerMole(value);

        /// <inheritdoc cref="MolarMass.FromDecigramsPerMole(double)"/>
        public static MolarMass DecigramsPerMole(this double value) => (MolarMass)MolarMass.FromDecigramsPerMole(new Number<double, DoubleCalculator>(value));

        /// <inheritdoc cref="MolarMass.FromDecigramsPerMole(double)"/>
        public static MolarMass DecigramsPerMole(this float value) => (MolarMass)MolarMass.FromDecigramsPerMole(value);

        /// <inheritdoc cref="MolarMass.FromDecigramsPerMole(double)"/>
        public static MolarMass DecigramsPerMole(this decimal value) => (MolarMass)MolarMass.FromDecigramsPerMole(new Number<double, DoubleCalculator>(Decimal.ToDouble(value)));

        #endregion

        #region GramPerMole

        /// <inheritdoc cref="MolarMass.FromGramsPerMole(double)"/>
        public static MolarMass GramsPerMole(this int value) => (MolarMass)MolarMass.FromGramsPerMole(value);
	
        /// <inheritdoc cref="MolarMass.FromGramsPerMole(double)"/>
        public static MolarMass GramsPerMole(this long value) => (MolarMass)MolarMass.FromGramsPerMole(value);

        /// <inheritdoc cref="MolarMass.FromGramsPerMole(double)"/>
        public static MolarMass GramsPerMole(this double value) => (MolarMass)MolarMass.FromGramsPerMole(new Number<double, DoubleCalculator>(value));

        /// <inheritdoc cref="MolarMass.FromGramsPerMole(double)"/>
        public static MolarMass GramsPerMole(this float value) => (MolarMass)MolarMass.FromGramsPerMole(value);

        /// <inheritdoc cref="MolarMass.FromGramsPerMole(double)"/>
        public static MolarMass GramsPerMole(this decimal value) => (MolarMass)MolarMass.FromGramsPerMole(new Number<double, DoubleCalculator>(Decimal.ToDouble(value)));

        #endregion

        #region HectogramPerMole

        /// <inheritdoc cref="MolarMass.FromHectogramsPerMole(double)"/>
        public static MolarMass HectogramsPerMole(this int value) => (MolarMass)MolarMass.FromHectogramsPerMole(value);
	
        /// <inheritdoc cref="MolarMass.FromHectogramsPerMole(double)"/>
        public static MolarMass HectogramsPerMole(this long value) => (MolarMass)MolarMass.FromHectogramsPerMole(value);

        /// <inheritdoc cref="MolarMass.FromHectogramsPerMole(double)"/>
        public static MolarMass HectogramsPerMole(this double value) => (MolarMass)MolarMass.FromHectogramsPerMole(new Number<double, DoubleCalculator>(value));

        /// <inheritdoc cref="MolarMass.FromHectogramsPerMole(double)"/>
        public static MolarMass HectogramsPerMole(this float value) => (MolarMass)MolarMass.FromHectogramsPerMole(value);

        /// <inheritdoc cref="MolarMass.FromHectogramsPerMole(double)"/>
        public static MolarMass HectogramsPerMole(this decimal value) => (MolarMass)MolarMass.FromHectogramsPerMole(new Number<double, DoubleCalculator>(Decimal.ToDouble(value)));

        #endregion

        #region KilogramPerMole

        /// <inheritdoc cref="MolarMass.FromKilogramsPerMole(double)"/>
        public static MolarMass KilogramsPerMole(this int value) => (MolarMass)MolarMass.FromKilogramsPerMole(value);
	
        /// <inheritdoc cref="MolarMass.FromKilogramsPerMole(double)"/>
        public static MolarMass KilogramsPerMole(this long value) => (MolarMass)MolarMass.FromKilogramsPerMole(value);

        /// <inheritdoc cref="MolarMass.FromKilogramsPerMole(double)"/>
        public static MolarMass KilogramsPerMole(this double value) => (MolarMass)MolarMass.FromKilogramsPerMole(new Number<double, DoubleCalculator>(value));

        /// <inheritdoc cref="MolarMass.FromKilogramsPerMole(double)"/>
        public static MolarMass KilogramsPerMole(this float value) => (MolarMass)MolarMass.FromKilogramsPerMole(value);

        /// <inheritdoc cref="MolarMass.FromKilogramsPerMole(double)"/>
        public static MolarMass KilogramsPerMole(this decimal value) => (MolarMass)MolarMass.FromKilogramsPerMole(new Number<double, DoubleCalculator>(Decimal.ToDouble(value)));

        #endregion

        #region KilopoundPerMole

        /// <inheritdoc cref="MolarMass.FromKilopoundsPerMole(double)"/>
        public static MolarMass KilopoundsPerMole(this int value) => (MolarMass)MolarMass.FromKilopoundsPerMole(value);
	
        /// <inheritdoc cref="MolarMass.FromKilopoundsPerMole(double)"/>
        public static MolarMass KilopoundsPerMole(this long value) => (MolarMass)MolarMass.FromKilopoundsPerMole(value);

        /// <inheritdoc cref="MolarMass.FromKilopoundsPerMole(double)"/>
        public static MolarMass KilopoundsPerMole(this double value) => (MolarMass)MolarMass.FromKilopoundsPerMole(new Number<double, DoubleCalculator>(value));

        /// <inheritdoc cref="MolarMass.FromKilopoundsPerMole(double)"/>
        public static MolarMass KilopoundsPerMole(this float value) => (MolarMass)MolarMass.FromKilopoundsPerMole(value);

        /// <inheritdoc cref="MolarMass.FromKilopoundsPerMole(double)"/>
        public static MolarMass KilopoundsPerMole(this decimal value) => (MolarMass)MolarMass.FromKilopoundsPerMole(new Number<double, DoubleCalculator>(Decimal.ToDouble(value)));

        #endregion

        #region MegapoundPerMole

        /// <inheritdoc cref="MolarMass.FromMegapoundsPerMole(double)"/>
        public static MolarMass MegapoundsPerMole(this int value) => (MolarMass)MolarMass.FromMegapoundsPerMole(value);
	
        /// <inheritdoc cref="MolarMass.FromMegapoundsPerMole(double)"/>
        public static MolarMass MegapoundsPerMole(this long value) => (MolarMass)MolarMass.FromMegapoundsPerMole(value);

        /// <inheritdoc cref="MolarMass.FromMegapoundsPerMole(double)"/>
        public static MolarMass MegapoundsPerMole(this double value) => (MolarMass)MolarMass.FromMegapoundsPerMole(new Number<double, DoubleCalculator>(value));

        /// <inheritdoc cref="MolarMass.FromMegapoundsPerMole(double)"/>
        public static MolarMass MegapoundsPerMole(this float value) => (MolarMass)MolarMass.FromMegapoundsPerMole(value);

        /// <inheritdoc cref="MolarMass.FromMegapoundsPerMole(double)"/>
        public static MolarMass MegapoundsPerMole(this decimal value) => (MolarMass)MolarMass.FromMegapoundsPerMole(new Number<double, DoubleCalculator>(Decimal.ToDouble(value)));

        #endregion

        #region MicrogramPerMole

        /// <inheritdoc cref="MolarMass.FromMicrogramsPerMole(double)"/>
        public static MolarMass MicrogramsPerMole(this int value) => (MolarMass)MolarMass.FromMicrogramsPerMole(value);
	
        /// <inheritdoc cref="MolarMass.FromMicrogramsPerMole(double)"/>
        public static MolarMass MicrogramsPerMole(this long value) => (MolarMass)MolarMass.FromMicrogramsPerMole(value);

        /// <inheritdoc cref="MolarMass.FromMicrogramsPerMole(double)"/>
        public static MolarMass MicrogramsPerMole(this double value) => (MolarMass)MolarMass.FromMicrogramsPerMole(new Number<double, DoubleCalculator>(value));

        /// <inheritdoc cref="MolarMass.FromMicrogramsPerMole(double)"/>
        public static MolarMass MicrogramsPerMole(this float value) => (MolarMass)MolarMass.FromMicrogramsPerMole(value);

        /// <inheritdoc cref="MolarMass.FromMicrogramsPerMole(double)"/>
        public static MolarMass MicrogramsPerMole(this decimal value) => (MolarMass)MolarMass.FromMicrogramsPerMole(new Number<double, DoubleCalculator>(Decimal.ToDouble(value)));

        #endregion

        #region MilligramPerMole

        /// <inheritdoc cref="MolarMass.FromMilligramsPerMole(double)"/>
        public static MolarMass MilligramsPerMole(this int value) => (MolarMass)MolarMass.FromMilligramsPerMole(value);
	
        /// <inheritdoc cref="MolarMass.FromMilligramsPerMole(double)"/>
        public static MolarMass MilligramsPerMole(this long value) => (MolarMass)MolarMass.FromMilligramsPerMole(value);

        /// <inheritdoc cref="MolarMass.FromMilligramsPerMole(double)"/>
        public static MolarMass MilligramsPerMole(this double value) => (MolarMass)MolarMass.FromMilligramsPerMole(new Number<double, DoubleCalculator>(value));

        /// <inheritdoc cref="MolarMass.FromMilligramsPerMole(double)"/>
        public static MolarMass MilligramsPerMole(this float value) => (MolarMass)MolarMass.FromMilligramsPerMole(value);

        /// <inheritdoc cref="MolarMass.FromMilligramsPerMole(double)"/>
        public static MolarMass MilligramsPerMole(this decimal value) => (MolarMass)MolarMass.FromMilligramsPerMole(new Number<double, DoubleCalculator>(Decimal.ToDouble(value)));

        #endregion

        #region NanogramPerMole

        /// <inheritdoc cref="MolarMass.FromNanogramsPerMole(double)"/>
        public static MolarMass NanogramsPerMole(this int value) => (MolarMass)MolarMass.FromNanogramsPerMole(value);
	
        /// <inheritdoc cref="MolarMass.FromNanogramsPerMole(double)"/>
        public static MolarMass NanogramsPerMole(this long value) => (MolarMass)MolarMass.FromNanogramsPerMole(value);

        /// <inheritdoc cref="MolarMass.FromNanogramsPerMole(double)"/>
        public static MolarMass NanogramsPerMole(this double value) => (MolarMass)MolarMass.FromNanogramsPerMole(new Number<double, DoubleCalculator>(value));

        /// <inheritdoc cref="MolarMass.FromNanogramsPerMole(double)"/>
        public static MolarMass NanogramsPerMole(this float value) => (MolarMass)MolarMass.FromNanogramsPerMole(value);

        /// <inheritdoc cref="MolarMass.FromNanogramsPerMole(double)"/>
        public static MolarMass NanogramsPerMole(this decimal value) => (MolarMass)MolarMass.FromNanogramsPerMole(new Number<double, DoubleCalculator>(Decimal.ToDouble(value)));

        #endregion

        #region PoundPerMole

        /// <inheritdoc cref="MolarMass.FromPoundsPerMole(double)"/>
        public static MolarMass PoundsPerMole(this int value) => (MolarMass)MolarMass.FromPoundsPerMole(value);
	
        /// <inheritdoc cref="MolarMass.FromPoundsPerMole(double)"/>
        public static MolarMass PoundsPerMole(this long value) => (MolarMass)MolarMass.FromPoundsPerMole(value);

        /// <inheritdoc cref="MolarMass.FromPoundsPerMole(double)"/>
        public static MolarMass PoundsPerMole(this double value) => (MolarMass)MolarMass.FromPoundsPerMole(new Number<double, DoubleCalculator>(value));

        /// <inheritdoc cref="MolarMass.FromPoundsPerMole(double)"/>
        public static MolarMass PoundsPerMole(this float value) => (MolarMass)MolarMass.FromPoundsPerMole(value);

        /// <inheritdoc cref="MolarMass.FromPoundsPerMole(double)"/>
        public static MolarMass PoundsPerMole(this decimal value) => (MolarMass)MolarMass.FromPoundsPerMole(new Number<double, DoubleCalculator>(Decimal.ToDouble(value)));

        #endregion

    }
}
#endif
