//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by \generate-code.bat.
//
//     Changes to this file will be lost when the code is regenerated.
//     The build server regenerates the code before each build and a pre-build
//     step will regenerate the code on each local build.
//
//     See https://github.com/angularsen/UnitsNet/wiki/Adding-a-New-Unit for how to add or edit units.
//
//     Add CustomCode\Quantities\MyUnit.extra.cs files to add code to generated quantities.
//     Add Extensions\MyUnitExtensions.cs to decorate quantities with new behavior.
//     Add UnitDefinitions\MyUnit.json and run GeneratUnits.bat to generate new units or quantities.
//
// </auto-generated>
//------------------------------------------------------------------------------

// Copyright (c) 2013 Andreas Gullberg Larsen (andreas.larsen84@gmail.com).
// https://github.com/angularsen/UnitsNet
// 
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
// 
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
// 
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
// THE SOFTWARE.

using System;
using UnitsNet.InternalHelpers.Calculators;

// Windows Runtime Component does not support extension methods and method overloads: https://msdn.microsoft.com/en-us/library/br230301.aspx
#if !WINDOWS_UWP
namespace UnitsNet.Extensions.NumberToPressure
{
    public static class NumberToPressureExtensions
    {
        #region Atmosphere

        /// <inheritdoc cref="Pressure.FromAtmospheres(double)"/>
        public static Pressure Atmospheres(this int value) => (Pressure)Pressure.FromAtmospheres(value);
	
        /// <inheritdoc cref="Pressure.FromAtmospheres(double)"/>
        public static Pressure Atmospheres(this long value) => (Pressure)Pressure.FromAtmospheres(value);

        /// <inheritdoc cref="Pressure.FromAtmospheres(double)"/>
        public static Pressure Atmospheres(this double value) => (Pressure)Pressure.FromAtmospheres(new Number<double, DoubleCalculator>(value));

        /// <inheritdoc cref="Pressure.FromAtmospheres(double)"/>
        public static Pressure Atmospheres(this float value) => (Pressure)Pressure.FromAtmospheres(value);

        /// <inheritdoc cref="Pressure.FromAtmospheres(double)"/>
        public static Pressure Atmospheres(this decimal value) => (Pressure)Pressure.FromAtmospheres(new Number<double, DoubleCalculator>(Decimal.ToDouble(value)));

        #endregion

        #region Bar

        /// <inheritdoc cref="Pressure.FromBars(double)"/>
        public static Pressure Bars(this int value) => (Pressure)Pressure.FromBars(value);
	
        /// <inheritdoc cref="Pressure.FromBars(double)"/>
        public static Pressure Bars(this long value) => (Pressure)Pressure.FromBars(value);

        /// <inheritdoc cref="Pressure.FromBars(double)"/>
        public static Pressure Bars(this double value) => (Pressure)Pressure.FromBars(new Number<double, DoubleCalculator>(value));

        /// <inheritdoc cref="Pressure.FromBars(double)"/>
        public static Pressure Bars(this float value) => (Pressure)Pressure.FromBars(value);

        /// <inheritdoc cref="Pressure.FromBars(double)"/>
        public static Pressure Bars(this decimal value) => (Pressure)Pressure.FromBars(new Number<double, DoubleCalculator>(Decimal.ToDouble(value)));

        #endregion

        #region Centibar

        /// <inheritdoc cref="Pressure.FromCentibars(double)"/>
        public static Pressure Centibars(this int value) => (Pressure)Pressure.FromCentibars(value);
	
        /// <inheritdoc cref="Pressure.FromCentibars(double)"/>
        public static Pressure Centibars(this long value) => (Pressure)Pressure.FromCentibars(value);

        /// <inheritdoc cref="Pressure.FromCentibars(double)"/>
        public static Pressure Centibars(this double value) => (Pressure)Pressure.FromCentibars(new Number<double, DoubleCalculator>(value));

        /// <inheritdoc cref="Pressure.FromCentibars(double)"/>
        public static Pressure Centibars(this float value) => (Pressure)Pressure.FromCentibars(value);

        /// <inheritdoc cref="Pressure.FromCentibars(double)"/>
        public static Pressure Centibars(this decimal value) => (Pressure)Pressure.FromCentibars(new Number<double, DoubleCalculator>(Decimal.ToDouble(value)));

        #endregion

        #region Decapascal

        /// <inheritdoc cref="Pressure.FromDecapascals(double)"/>
        public static Pressure Decapascals(this int value) => (Pressure)Pressure.FromDecapascals(value);
	
        /// <inheritdoc cref="Pressure.FromDecapascals(double)"/>
        public static Pressure Decapascals(this long value) => (Pressure)Pressure.FromDecapascals(value);

        /// <inheritdoc cref="Pressure.FromDecapascals(double)"/>
        public static Pressure Decapascals(this double value) => (Pressure)Pressure.FromDecapascals(new Number<double, DoubleCalculator>(value));

        /// <inheritdoc cref="Pressure.FromDecapascals(double)"/>
        public static Pressure Decapascals(this float value) => (Pressure)Pressure.FromDecapascals(value);

        /// <inheritdoc cref="Pressure.FromDecapascals(double)"/>
        public static Pressure Decapascals(this decimal value) => (Pressure)Pressure.FromDecapascals(new Number<double, DoubleCalculator>(Decimal.ToDouble(value)));

        #endregion

        #region Decibar

        /// <inheritdoc cref="Pressure.FromDecibars(double)"/>
        public static Pressure Decibars(this int value) => (Pressure)Pressure.FromDecibars(value);
	
        /// <inheritdoc cref="Pressure.FromDecibars(double)"/>
        public static Pressure Decibars(this long value) => (Pressure)Pressure.FromDecibars(value);

        /// <inheritdoc cref="Pressure.FromDecibars(double)"/>
        public static Pressure Decibars(this double value) => (Pressure)Pressure.FromDecibars(new Number<double, DoubleCalculator>(value));

        /// <inheritdoc cref="Pressure.FromDecibars(double)"/>
        public static Pressure Decibars(this float value) => (Pressure)Pressure.FromDecibars(value);

        /// <inheritdoc cref="Pressure.FromDecibars(double)"/>
        public static Pressure Decibars(this decimal value) => (Pressure)Pressure.FromDecibars(new Number<double, DoubleCalculator>(Decimal.ToDouble(value)));

        #endregion

        #region FootOfHead

        /// <inheritdoc cref="Pressure.FromFeetOfHead(double)"/>
        public static Pressure FeetOfHead(this int value) => (Pressure)Pressure.FromFeetOfHead(value);
	
        /// <inheritdoc cref="Pressure.FromFeetOfHead(double)"/>
        public static Pressure FeetOfHead(this long value) => (Pressure)Pressure.FromFeetOfHead(value);

        /// <inheritdoc cref="Pressure.FromFeetOfHead(double)"/>
        public static Pressure FeetOfHead(this double value) => (Pressure)Pressure.FromFeetOfHead(new Number<double, DoubleCalculator>(value));

        /// <inheritdoc cref="Pressure.FromFeetOfHead(double)"/>
        public static Pressure FeetOfHead(this float value) => (Pressure)Pressure.FromFeetOfHead(value);

        /// <inheritdoc cref="Pressure.FromFeetOfHead(double)"/>
        public static Pressure FeetOfHead(this decimal value) => (Pressure)Pressure.FromFeetOfHead(new Number<double, DoubleCalculator>(Decimal.ToDouble(value)));

        #endregion

        #region Gigapascal

        /// <inheritdoc cref="Pressure.FromGigapascals(double)"/>
        public static Pressure Gigapascals(this int value) => (Pressure)Pressure.FromGigapascals(value);
	
        /// <inheritdoc cref="Pressure.FromGigapascals(double)"/>
        public static Pressure Gigapascals(this long value) => (Pressure)Pressure.FromGigapascals(value);

        /// <inheritdoc cref="Pressure.FromGigapascals(double)"/>
        public static Pressure Gigapascals(this double value) => (Pressure)Pressure.FromGigapascals(new Number<double, DoubleCalculator>(value));

        /// <inheritdoc cref="Pressure.FromGigapascals(double)"/>
        public static Pressure Gigapascals(this float value) => (Pressure)Pressure.FromGigapascals(value);

        /// <inheritdoc cref="Pressure.FromGigapascals(double)"/>
        public static Pressure Gigapascals(this decimal value) => (Pressure)Pressure.FromGigapascals(new Number<double, DoubleCalculator>(Decimal.ToDouble(value)));

        #endregion

        #region Hectopascal

        /// <inheritdoc cref="Pressure.FromHectopascals(double)"/>
        public static Pressure Hectopascals(this int value) => (Pressure)Pressure.FromHectopascals(value);
	
        /// <inheritdoc cref="Pressure.FromHectopascals(double)"/>
        public static Pressure Hectopascals(this long value) => (Pressure)Pressure.FromHectopascals(value);

        /// <inheritdoc cref="Pressure.FromHectopascals(double)"/>
        public static Pressure Hectopascals(this double value) => (Pressure)Pressure.FromHectopascals(new Number<double, DoubleCalculator>(value));

        /// <inheritdoc cref="Pressure.FromHectopascals(double)"/>
        public static Pressure Hectopascals(this float value) => (Pressure)Pressure.FromHectopascals(value);

        /// <inheritdoc cref="Pressure.FromHectopascals(double)"/>
        public static Pressure Hectopascals(this decimal value) => (Pressure)Pressure.FromHectopascals(new Number<double, DoubleCalculator>(Decimal.ToDouble(value)));

        #endregion

        #region InchOfMercury

        /// <inheritdoc cref="Pressure.FromInchesOfMercury(double)"/>
        public static Pressure InchesOfMercury(this int value) => (Pressure)Pressure.FromInchesOfMercury(value);
	
        /// <inheritdoc cref="Pressure.FromInchesOfMercury(double)"/>
        public static Pressure InchesOfMercury(this long value) => (Pressure)Pressure.FromInchesOfMercury(value);

        /// <inheritdoc cref="Pressure.FromInchesOfMercury(double)"/>
        public static Pressure InchesOfMercury(this double value) => (Pressure)Pressure.FromInchesOfMercury(new Number<double, DoubleCalculator>(value));

        /// <inheritdoc cref="Pressure.FromInchesOfMercury(double)"/>
        public static Pressure InchesOfMercury(this float value) => (Pressure)Pressure.FromInchesOfMercury(value);

        /// <inheritdoc cref="Pressure.FromInchesOfMercury(double)"/>
        public static Pressure InchesOfMercury(this decimal value) => (Pressure)Pressure.FromInchesOfMercury(new Number<double, DoubleCalculator>(Decimal.ToDouble(value)));

        #endregion

        #region Kilobar

        /// <inheritdoc cref="Pressure.FromKilobars(double)"/>
        public static Pressure Kilobars(this int value) => (Pressure)Pressure.FromKilobars(value);
	
        /// <inheritdoc cref="Pressure.FromKilobars(double)"/>
        public static Pressure Kilobars(this long value) => (Pressure)Pressure.FromKilobars(value);

        /// <inheritdoc cref="Pressure.FromKilobars(double)"/>
        public static Pressure Kilobars(this double value) => (Pressure)Pressure.FromKilobars(new Number<double, DoubleCalculator>(value));

        /// <inheritdoc cref="Pressure.FromKilobars(double)"/>
        public static Pressure Kilobars(this float value) => (Pressure)Pressure.FromKilobars(value);

        /// <inheritdoc cref="Pressure.FromKilobars(double)"/>
        public static Pressure Kilobars(this decimal value) => (Pressure)Pressure.FromKilobars(new Number<double, DoubleCalculator>(Decimal.ToDouble(value)));

        #endregion

        #region KilogramForcePerSquareCentimeter

        /// <inheritdoc cref="Pressure.FromKilogramsForcePerSquareCentimeter(double)"/>
        public static Pressure KilogramsForcePerSquareCentimeter(this int value) => (Pressure)Pressure.FromKilogramsForcePerSquareCentimeter(value);
	
        /// <inheritdoc cref="Pressure.FromKilogramsForcePerSquareCentimeter(double)"/>
        public static Pressure KilogramsForcePerSquareCentimeter(this long value) => (Pressure)Pressure.FromKilogramsForcePerSquareCentimeter(value);

        /// <inheritdoc cref="Pressure.FromKilogramsForcePerSquareCentimeter(double)"/>
        public static Pressure KilogramsForcePerSquareCentimeter(this double value) => (Pressure)Pressure.FromKilogramsForcePerSquareCentimeter(new Number<double, DoubleCalculator>(value));

        /// <inheritdoc cref="Pressure.FromKilogramsForcePerSquareCentimeter(double)"/>
        public static Pressure KilogramsForcePerSquareCentimeter(this float value) => (Pressure)Pressure.FromKilogramsForcePerSquareCentimeter(value);

        /// <inheritdoc cref="Pressure.FromKilogramsForcePerSquareCentimeter(double)"/>
        public static Pressure KilogramsForcePerSquareCentimeter(this decimal value) => (Pressure)Pressure.FromKilogramsForcePerSquareCentimeter(new Number<double, DoubleCalculator>(Decimal.ToDouble(value)));

        #endregion

        #region KilogramForcePerSquareMeter

        /// <inheritdoc cref="Pressure.FromKilogramsForcePerSquareMeter(double)"/>
        public static Pressure KilogramsForcePerSquareMeter(this int value) => (Pressure)Pressure.FromKilogramsForcePerSquareMeter(value);
	
        /// <inheritdoc cref="Pressure.FromKilogramsForcePerSquareMeter(double)"/>
        public static Pressure KilogramsForcePerSquareMeter(this long value) => (Pressure)Pressure.FromKilogramsForcePerSquareMeter(value);

        /// <inheritdoc cref="Pressure.FromKilogramsForcePerSquareMeter(double)"/>
        public static Pressure KilogramsForcePerSquareMeter(this double value) => (Pressure)Pressure.FromKilogramsForcePerSquareMeter(new Number<double, DoubleCalculator>(value));

        /// <inheritdoc cref="Pressure.FromKilogramsForcePerSquareMeter(double)"/>
        public static Pressure KilogramsForcePerSquareMeter(this float value) => (Pressure)Pressure.FromKilogramsForcePerSquareMeter(value);

        /// <inheritdoc cref="Pressure.FromKilogramsForcePerSquareMeter(double)"/>
        public static Pressure KilogramsForcePerSquareMeter(this decimal value) => (Pressure)Pressure.FromKilogramsForcePerSquareMeter(new Number<double, DoubleCalculator>(Decimal.ToDouble(value)));

        #endregion

        #region KilogramForcePerSquareMillimeter

        /// <inheritdoc cref="Pressure.FromKilogramsForcePerSquareMillimeter(double)"/>
        public static Pressure KilogramsForcePerSquareMillimeter(this int value) => (Pressure)Pressure.FromKilogramsForcePerSquareMillimeter(value);
	
        /// <inheritdoc cref="Pressure.FromKilogramsForcePerSquareMillimeter(double)"/>
        public static Pressure KilogramsForcePerSquareMillimeter(this long value) => (Pressure)Pressure.FromKilogramsForcePerSquareMillimeter(value);

        /// <inheritdoc cref="Pressure.FromKilogramsForcePerSquareMillimeter(double)"/>
        public static Pressure KilogramsForcePerSquareMillimeter(this double value) => (Pressure)Pressure.FromKilogramsForcePerSquareMillimeter(new Number<double, DoubleCalculator>(value));

        /// <inheritdoc cref="Pressure.FromKilogramsForcePerSquareMillimeter(double)"/>
        public static Pressure KilogramsForcePerSquareMillimeter(this float value) => (Pressure)Pressure.FromKilogramsForcePerSquareMillimeter(value);

        /// <inheritdoc cref="Pressure.FromKilogramsForcePerSquareMillimeter(double)"/>
        public static Pressure KilogramsForcePerSquareMillimeter(this decimal value) => (Pressure)Pressure.FromKilogramsForcePerSquareMillimeter(new Number<double, DoubleCalculator>(Decimal.ToDouble(value)));

        #endregion

        #region KilonewtonPerSquareCentimeter

        /// <inheritdoc cref="Pressure.FromKilonewtonsPerSquareCentimeter(double)"/>
        public static Pressure KilonewtonsPerSquareCentimeter(this int value) => (Pressure)Pressure.FromKilonewtonsPerSquareCentimeter(value);
	
        /// <inheritdoc cref="Pressure.FromKilonewtonsPerSquareCentimeter(double)"/>
        public static Pressure KilonewtonsPerSquareCentimeter(this long value) => (Pressure)Pressure.FromKilonewtonsPerSquareCentimeter(value);

        /// <inheritdoc cref="Pressure.FromKilonewtonsPerSquareCentimeter(double)"/>
        public static Pressure KilonewtonsPerSquareCentimeter(this double value) => (Pressure)Pressure.FromKilonewtonsPerSquareCentimeter(new Number<double, DoubleCalculator>(value));

        /// <inheritdoc cref="Pressure.FromKilonewtonsPerSquareCentimeter(double)"/>
        public static Pressure KilonewtonsPerSquareCentimeter(this float value) => (Pressure)Pressure.FromKilonewtonsPerSquareCentimeter(value);

        /// <inheritdoc cref="Pressure.FromKilonewtonsPerSquareCentimeter(double)"/>
        public static Pressure KilonewtonsPerSquareCentimeter(this decimal value) => (Pressure)Pressure.FromKilonewtonsPerSquareCentimeter(new Number<double, DoubleCalculator>(Decimal.ToDouble(value)));

        #endregion

        #region KilonewtonPerSquareMeter

        /// <inheritdoc cref="Pressure.FromKilonewtonsPerSquareMeter(double)"/>
        public static Pressure KilonewtonsPerSquareMeter(this int value) => (Pressure)Pressure.FromKilonewtonsPerSquareMeter(value);
	
        /// <inheritdoc cref="Pressure.FromKilonewtonsPerSquareMeter(double)"/>
        public static Pressure KilonewtonsPerSquareMeter(this long value) => (Pressure)Pressure.FromKilonewtonsPerSquareMeter(value);

        /// <inheritdoc cref="Pressure.FromKilonewtonsPerSquareMeter(double)"/>
        public static Pressure KilonewtonsPerSquareMeter(this double value) => (Pressure)Pressure.FromKilonewtonsPerSquareMeter(new Number<double, DoubleCalculator>(value));

        /// <inheritdoc cref="Pressure.FromKilonewtonsPerSquareMeter(double)"/>
        public static Pressure KilonewtonsPerSquareMeter(this float value) => (Pressure)Pressure.FromKilonewtonsPerSquareMeter(value);

        /// <inheritdoc cref="Pressure.FromKilonewtonsPerSquareMeter(double)"/>
        public static Pressure KilonewtonsPerSquareMeter(this decimal value) => (Pressure)Pressure.FromKilonewtonsPerSquareMeter(new Number<double, DoubleCalculator>(Decimal.ToDouble(value)));

        #endregion

        #region KilonewtonPerSquareMillimeter

        /// <inheritdoc cref="Pressure.FromKilonewtonsPerSquareMillimeter(double)"/>
        public static Pressure KilonewtonsPerSquareMillimeter(this int value) => (Pressure)Pressure.FromKilonewtonsPerSquareMillimeter(value);
	
        /// <inheritdoc cref="Pressure.FromKilonewtonsPerSquareMillimeter(double)"/>
        public static Pressure KilonewtonsPerSquareMillimeter(this long value) => (Pressure)Pressure.FromKilonewtonsPerSquareMillimeter(value);

        /// <inheritdoc cref="Pressure.FromKilonewtonsPerSquareMillimeter(double)"/>
        public static Pressure KilonewtonsPerSquareMillimeter(this double value) => (Pressure)Pressure.FromKilonewtonsPerSquareMillimeter(new Number<double, DoubleCalculator>(value));

        /// <inheritdoc cref="Pressure.FromKilonewtonsPerSquareMillimeter(double)"/>
        public static Pressure KilonewtonsPerSquareMillimeter(this float value) => (Pressure)Pressure.FromKilonewtonsPerSquareMillimeter(value);

        /// <inheritdoc cref="Pressure.FromKilonewtonsPerSquareMillimeter(double)"/>
        public static Pressure KilonewtonsPerSquareMillimeter(this decimal value) => (Pressure)Pressure.FromKilonewtonsPerSquareMillimeter(new Number<double, DoubleCalculator>(Decimal.ToDouble(value)));

        #endregion

        #region Kilopascal

        /// <inheritdoc cref="Pressure.FromKilopascals(double)"/>
        public static Pressure Kilopascals(this int value) => (Pressure)Pressure.FromKilopascals(value);
	
        /// <inheritdoc cref="Pressure.FromKilopascals(double)"/>
        public static Pressure Kilopascals(this long value) => (Pressure)Pressure.FromKilopascals(value);

        /// <inheritdoc cref="Pressure.FromKilopascals(double)"/>
        public static Pressure Kilopascals(this double value) => (Pressure)Pressure.FromKilopascals(new Number<double, DoubleCalculator>(value));

        /// <inheritdoc cref="Pressure.FromKilopascals(double)"/>
        public static Pressure Kilopascals(this float value) => (Pressure)Pressure.FromKilopascals(value);

        /// <inheritdoc cref="Pressure.FromKilopascals(double)"/>
        public static Pressure Kilopascals(this decimal value) => (Pressure)Pressure.FromKilopascals(new Number<double, DoubleCalculator>(Decimal.ToDouble(value)));

        #endregion

        #region KilopoundForcePerSquareFoot

        /// <inheritdoc cref="Pressure.FromKilopoundsForcePerSquareFoot(double)"/>
        public static Pressure KilopoundsForcePerSquareFoot(this int value) => (Pressure)Pressure.FromKilopoundsForcePerSquareFoot(value);
	
        /// <inheritdoc cref="Pressure.FromKilopoundsForcePerSquareFoot(double)"/>
        public static Pressure KilopoundsForcePerSquareFoot(this long value) => (Pressure)Pressure.FromKilopoundsForcePerSquareFoot(value);

        /// <inheritdoc cref="Pressure.FromKilopoundsForcePerSquareFoot(double)"/>
        public static Pressure KilopoundsForcePerSquareFoot(this double value) => (Pressure)Pressure.FromKilopoundsForcePerSquareFoot(new Number<double, DoubleCalculator>(value));

        /// <inheritdoc cref="Pressure.FromKilopoundsForcePerSquareFoot(double)"/>
        public static Pressure KilopoundsForcePerSquareFoot(this float value) => (Pressure)Pressure.FromKilopoundsForcePerSquareFoot(value);

        /// <inheritdoc cref="Pressure.FromKilopoundsForcePerSquareFoot(double)"/>
        public static Pressure KilopoundsForcePerSquareFoot(this decimal value) => (Pressure)Pressure.FromKilopoundsForcePerSquareFoot(new Number<double, DoubleCalculator>(Decimal.ToDouble(value)));

        #endregion

        #region KilopoundForcePerSquareInch

        /// <inheritdoc cref="Pressure.FromKilopoundsForcePerSquareInch(double)"/>
        public static Pressure KilopoundsForcePerSquareInch(this int value) => (Pressure)Pressure.FromKilopoundsForcePerSquareInch(value);
	
        /// <inheritdoc cref="Pressure.FromKilopoundsForcePerSquareInch(double)"/>
        public static Pressure KilopoundsForcePerSquareInch(this long value) => (Pressure)Pressure.FromKilopoundsForcePerSquareInch(value);

        /// <inheritdoc cref="Pressure.FromKilopoundsForcePerSquareInch(double)"/>
        public static Pressure KilopoundsForcePerSquareInch(this double value) => (Pressure)Pressure.FromKilopoundsForcePerSquareInch(new Number<double, DoubleCalculator>(value));

        /// <inheritdoc cref="Pressure.FromKilopoundsForcePerSquareInch(double)"/>
        public static Pressure KilopoundsForcePerSquareInch(this float value) => (Pressure)Pressure.FromKilopoundsForcePerSquareInch(value);

        /// <inheritdoc cref="Pressure.FromKilopoundsForcePerSquareInch(double)"/>
        public static Pressure KilopoundsForcePerSquareInch(this decimal value) => (Pressure)Pressure.FromKilopoundsForcePerSquareInch(new Number<double, DoubleCalculator>(Decimal.ToDouble(value)));

        #endregion

        #region Megabar

        /// <inheritdoc cref="Pressure.FromMegabars(double)"/>
        public static Pressure Megabars(this int value) => (Pressure)Pressure.FromMegabars(value);
	
        /// <inheritdoc cref="Pressure.FromMegabars(double)"/>
        public static Pressure Megabars(this long value) => (Pressure)Pressure.FromMegabars(value);

        /// <inheritdoc cref="Pressure.FromMegabars(double)"/>
        public static Pressure Megabars(this double value) => (Pressure)Pressure.FromMegabars(new Number<double, DoubleCalculator>(value));

        /// <inheritdoc cref="Pressure.FromMegabars(double)"/>
        public static Pressure Megabars(this float value) => (Pressure)Pressure.FromMegabars(value);

        /// <inheritdoc cref="Pressure.FromMegabars(double)"/>
        public static Pressure Megabars(this decimal value) => (Pressure)Pressure.FromMegabars(new Number<double, DoubleCalculator>(Decimal.ToDouble(value)));

        #endregion

        #region Megapascal

        /// <inheritdoc cref="Pressure.FromMegapascals(double)"/>
        public static Pressure Megapascals(this int value) => (Pressure)Pressure.FromMegapascals(value);
	
        /// <inheritdoc cref="Pressure.FromMegapascals(double)"/>
        public static Pressure Megapascals(this long value) => (Pressure)Pressure.FromMegapascals(value);

        /// <inheritdoc cref="Pressure.FromMegapascals(double)"/>
        public static Pressure Megapascals(this double value) => (Pressure)Pressure.FromMegapascals(new Number<double, DoubleCalculator>(value));

        /// <inheritdoc cref="Pressure.FromMegapascals(double)"/>
        public static Pressure Megapascals(this float value) => (Pressure)Pressure.FromMegapascals(value);

        /// <inheritdoc cref="Pressure.FromMegapascals(double)"/>
        public static Pressure Megapascals(this decimal value) => (Pressure)Pressure.FromMegapascals(new Number<double, DoubleCalculator>(Decimal.ToDouble(value)));

        #endregion

        #region MeterOfHead

        /// <inheritdoc cref="Pressure.FromMetersOfHead(double)"/>
        public static Pressure MetersOfHead(this int value) => (Pressure)Pressure.FromMetersOfHead(value);
	
        /// <inheritdoc cref="Pressure.FromMetersOfHead(double)"/>
        public static Pressure MetersOfHead(this long value) => (Pressure)Pressure.FromMetersOfHead(value);

        /// <inheritdoc cref="Pressure.FromMetersOfHead(double)"/>
        public static Pressure MetersOfHead(this double value) => (Pressure)Pressure.FromMetersOfHead(new Number<double, DoubleCalculator>(value));

        /// <inheritdoc cref="Pressure.FromMetersOfHead(double)"/>
        public static Pressure MetersOfHead(this float value) => (Pressure)Pressure.FromMetersOfHead(value);

        /// <inheritdoc cref="Pressure.FromMetersOfHead(double)"/>
        public static Pressure MetersOfHead(this decimal value) => (Pressure)Pressure.FromMetersOfHead(new Number<double, DoubleCalculator>(Decimal.ToDouble(value)));

        #endregion

        #region Micropascal

        /// <inheritdoc cref="Pressure.FromMicropascals(double)"/>
        public static Pressure Micropascals(this int value) => (Pressure)Pressure.FromMicropascals(value);
	
        /// <inheritdoc cref="Pressure.FromMicropascals(double)"/>
        public static Pressure Micropascals(this long value) => (Pressure)Pressure.FromMicropascals(value);

        /// <inheritdoc cref="Pressure.FromMicropascals(double)"/>
        public static Pressure Micropascals(this double value) => (Pressure)Pressure.FromMicropascals(new Number<double, DoubleCalculator>(value));

        /// <inheritdoc cref="Pressure.FromMicropascals(double)"/>
        public static Pressure Micropascals(this float value) => (Pressure)Pressure.FromMicropascals(value);

        /// <inheritdoc cref="Pressure.FromMicropascals(double)"/>
        public static Pressure Micropascals(this decimal value) => (Pressure)Pressure.FromMicropascals(new Number<double, DoubleCalculator>(Decimal.ToDouble(value)));

        #endregion

        #region Millibar

        /// <inheritdoc cref="Pressure.FromMillibars(double)"/>
        public static Pressure Millibars(this int value) => (Pressure)Pressure.FromMillibars(value);
	
        /// <inheritdoc cref="Pressure.FromMillibars(double)"/>
        public static Pressure Millibars(this long value) => (Pressure)Pressure.FromMillibars(value);

        /// <inheritdoc cref="Pressure.FromMillibars(double)"/>
        public static Pressure Millibars(this double value) => (Pressure)Pressure.FromMillibars(new Number<double, DoubleCalculator>(value));

        /// <inheritdoc cref="Pressure.FromMillibars(double)"/>
        public static Pressure Millibars(this float value) => (Pressure)Pressure.FromMillibars(value);

        /// <inheritdoc cref="Pressure.FromMillibars(double)"/>
        public static Pressure Millibars(this decimal value) => (Pressure)Pressure.FromMillibars(new Number<double, DoubleCalculator>(Decimal.ToDouble(value)));

        #endregion

        #region MillimeterOfMercury

        /// <inheritdoc cref="Pressure.FromMillimetersOfMercury(double)"/>
        public static Pressure MillimetersOfMercury(this int value) => (Pressure)Pressure.FromMillimetersOfMercury(value);
	
        /// <inheritdoc cref="Pressure.FromMillimetersOfMercury(double)"/>
        public static Pressure MillimetersOfMercury(this long value) => (Pressure)Pressure.FromMillimetersOfMercury(value);

        /// <inheritdoc cref="Pressure.FromMillimetersOfMercury(double)"/>
        public static Pressure MillimetersOfMercury(this double value) => (Pressure)Pressure.FromMillimetersOfMercury(new Number<double, DoubleCalculator>(value));

        /// <inheritdoc cref="Pressure.FromMillimetersOfMercury(double)"/>
        public static Pressure MillimetersOfMercury(this float value) => (Pressure)Pressure.FromMillimetersOfMercury(value);

        /// <inheritdoc cref="Pressure.FromMillimetersOfMercury(double)"/>
        public static Pressure MillimetersOfMercury(this decimal value) => (Pressure)Pressure.FromMillimetersOfMercury(new Number<double, DoubleCalculator>(Decimal.ToDouble(value)));

        #endregion

        #region NewtonPerSquareCentimeter

        /// <inheritdoc cref="Pressure.FromNewtonsPerSquareCentimeter(double)"/>
        public static Pressure NewtonsPerSquareCentimeter(this int value) => (Pressure)Pressure.FromNewtonsPerSquareCentimeter(value);
	
        /// <inheritdoc cref="Pressure.FromNewtonsPerSquareCentimeter(double)"/>
        public static Pressure NewtonsPerSquareCentimeter(this long value) => (Pressure)Pressure.FromNewtonsPerSquareCentimeter(value);

        /// <inheritdoc cref="Pressure.FromNewtonsPerSquareCentimeter(double)"/>
        public static Pressure NewtonsPerSquareCentimeter(this double value) => (Pressure)Pressure.FromNewtonsPerSquareCentimeter(new Number<double, DoubleCalculator>(value));

        /// <inheritdoc cref="Pressure.FromNewtonsPerSquareCentimeter(double)"/>
        public static Pressure NewtonsPerSquareCentimeter(this float value) => (Pressure)Pressure.FromNewtonsPerSquareCentimeter(value);

        /// <inheritdoc cref="Pressure.FromNewtonsPerSquareCentimeter(double)"/>
        public static Pressure NewtonsPerSquareCentimeter(this decimal value) => (Pressure)Pressure.FromNewtonsPerSquareCentimeter(new Number<double, DoubleCalculator>(Decimal.ToDouble(value)));

        #endregion

        #region NewtonPerSquareMeter

        /// <inheritdoc cref="Pressure.FromNewtonsPerSquareMeter(double)"/>
        public static Pressure NewtonsPerSquareMeter(this int value) => (Pressure)Pressure.FromNewtonsPerSquareMeter(value);
	
        /// <inheritdoc cref="Pressure.FromNewtonsPerSquareMeter(double)"/>
        public static Pressure NewtonsPerSquareMeter(this long value) => (Pressure)Pressure.FromNewtonsPerSquareMeter(value);

        /// <inheritdoc cref="Pressure.FromNewtonsPerSquareMeter(double)"/>
        public static Pressure NewtonsPerSquareMeter(this double value) => (Pressure)Pressure.FromNewtonsPerSquareMeter(new Number<double, DoubleCalculator>(value));

        /// <inheritdoc cref="Pressure.FromNewtonsPerSquareMeter(double)"/>
        public static Pressure NewtonsPerSquareMeter(this float value) => (Pressure)Pressure.FromNewtonsPerSquareMeter(value);

        /// <inheritdoc cref="Pressure.FromNewtonsPerSquareMeter(double)"/>
        public static Pressure NewtonsPerSquareMeter(this decimal value) => (Pressure)Pressure.FromNewtonsPerSquareMeter(new Number<double, DoubleCalculator>(Decimal.ToDouble(value)));

        #endregion

        #region NewtonPerSquareMillimeter

        /// <inheritdoc cref="Pressure.FromNewtonsPerSquareMillimeter(double)"/>
        public static Pressure NewtonsPerSquareMillimeter(this int value) => (Pressure)Pressure.FromNewtonsPerSquareMillimeter(value);
	
        /// <inheritdoc cref="Pressure.FromNewtonsPerSquareMillimeter(double)"/>
        public static Pressure NewtonsPerSquareMillimeter(this long value) => (Pressure)Pressure.FromNewtonsPerSquareMillimeter(value);

        /// <inheritdoc cref="Pressure.FromNewtonsPerSquareMillimeter(double)"/>
        public static Pressure NewtonsPerSquareMillimeter(this double value) => (Pressure)Pressure.FromNewtonsPerSquareMillimeter(new Number<double, DoubleCalculator>(value));

        /// <inheritdoc cref="Pressure.FromNewtonsPerSquareMillimeter(double)"/>
        public static Pressure NewtonsPerSquareMillimeter(this float value) => (Pressure)Pressure.FromNewtonsPerSquareMillimeter(value);

        /// <inheritdoc cref="Pressure.FromNewtonsPerSquareMillimeter(double)"/>
        public static Pressure NewtonsPerSquareMillimeter(this decimal value) => (Pressure)Pressure.FromNewtonsPerSquareMillimeter(new Number<double, DoubleCalculator>(Decimal.ToDouble(value)));

        #endregion

        #region Pascal

        /// <inheritdoc cref="Pressure.FromPascals(double)"/>
        public static Pressure Pascals(this int value) => (Pressure)Pressure.FromPascals(value);
	
        /// <inheritdoc cref="Pressure.FromPascals(double)"/>
        public static Pressure Pascals(this long value) => (Pressure)Pressure.FromPascals(value);

        /// <inheritdoc cref="Pressure.FromPascals(double)"/>
        public static Pressure Pascals(this double value) => (Pressure)Pressure.FromPascals(new Number<double, DoubleCalculator>(value));

        /// <inheritdoc cref="Pressure.FromPascals(double)"/>
        public static Pressure Pascals(this float value) => (Pressure)Pressure.FromPascals(value);

        /// <inheritdoc cref="Pressure.FromPascals(double)"/>
        public static Pressure Pascals(this decimal value) => (Pressure)Pressure.FromPascals(new Number<double, DoubleCalculator>(Decimal.ToDouble(value)));

        #endregion

        #region PoundForcePerSquareFoot

        /// <inheritdoc cref="Pressure.FromPoundsForcePerSquareFoot(double)"/>
        public static Pressure PoundsForcePerSquareFoot(this int value) => (Pressure)Pressure.FromPoundsForcePerSquareFoot(value);
	
        /// <inheritdoc cref="Pressure.FromPoundsForcePerSquareFoot(double)"/>
        public static Pressure PoundsForcePerSquareFoot(this long value) => (Pressure)Pressure.FromPoundsForcePerSquareFoot(value);

        /// <inheritdoc cref="Pressure.FromPoundsForcePerSquareFoot(double)"/>
        public static Pressure PoundsForcePerSquareFoot(this double value) => (Pressure)Pressure.FromPoundsForcePerSquareFoot(new Number<double, DoubleCalculator>(value));

        /// <inheritdoc cref="Pressure.FromPoundsForcePerSquareFoot(double)"/>
        public static Pressure PoundsForcePerSquareFoot(this float value) => (Pressure)Pressure.FromPoundsForcePerSquareFoot(value);

        /// <inheritdoc cref="Pressure.FromPoundsForcePerSquareFoot(double)"/>
        public static Pressure PoundsForcePerSquareFoot(this decimal value) => (Pressure)Pressure.FromPoundsForcePerSquareFoot(new Number<double, DoubleCalculator>(Decimal.ToDouble(value)));

        #endregion

        #region PoundForcePerSquareInch

        /// <inheritdoc cref="Pressure.FromPoundsForcePerSquareInch(double)"/>
        public static Pressure PoundsForcePerSquareInch(this int value) => (Pressure)Pressure.FromPoundsForcePerSquareInch(value);
	
        /// <inheritdoc cref="Pressure.FromPoundsForcePerSquareInch(double)"/>
        public static Pressure PoundsForcePerSquareInch(this long value) => (Pressure)Pressure.FromPoundsForcePerSquareInch(value);

        /// <inheritdoc cref="Pressure.FromPoundsForcePerSquareInch(double)"/>
        public static Pressure PoundsForcePerSquareInch(this double value) => (Pressure)Pressure.FromPoundsForcePerSquareInch(new Number<double, DoubleCalculator>(value));

        /// <inheritdoc cref="Pressure.FromPoundsForcePerSquareInch(double)"/>
        public static Pressure PoundsForcePerSquareInch(this float value) => (Pressure)Pressure.FromPoundsForcePerSquareInch(value);

        /// <inheritdoc cref="Pressure.FromPoundsForcePerSquareInch(double)"/>
        public static Pressure PoundsForcePerSquareInch(this decimal value) => (Pressure)Pressure.FromPoundsForcePerSquareInch(new Number<double, DoubleCalculator>(Decimal.ToDouble(value)));

        #endregion

        #region Psi

        /// <inheritdoc cref="Pressure.FromPsi(double)"/>
        public static Pressure Psi(this int value) => (Pressure)Pressure.FromPsi(value);
	
        /// <inheritdoc cref="Pressure.FromPsi(double)"/>
        public static Pressure Psi(this long value) => (Pressure)Pressure.FromPsi(value);

        /// <inheritdoc cref="Pressure.FromPsi(double)"/>
        public static Pressure Psi(this double value) => (Pressure)Pressure.FromPsi(new Number<double, DoubleCalculator>(value));

        /// <inheritdoc cref="Pressure.FromPsi(double)"/>
        public static Pressure Psi(this float value) => (Pressure)Pressure.FromPsi(value);

        /// <inheritdoc cref="Pressure.FromPsi(double)"/>
        public static Pressure Psi(this decimal value) => (Pressure)Pressure.FromPsi(new Number<double, DoubleCalculator>(Decimal.ToDouble(value)));

        #endregion

        #region TechnicalAtmosphere

        /// <inheritdoc cref="Pressure.FromTechnicalAtmospheres(double)"/>
        public static Pressure TechnicalAtmospheres(this int value) => (Pressure)Pressure.FromTechnicalAtmospheres(value);
	
        /// <inheritdoc cref="Pressure.FromTechnicalAtmospheres(double)"/>
        public static Pressure TechnicalAtmospheres(this long value) => (Pressure)Pressure.FromTechnicalAtmospheres(value);

        /// <inheritdoc cref="Pressure.FromTechnicalAtmospheres(double)"/>
        public static Pressure TechnicalAtmospheres(this double value) => (Pressure)Pressure.FromTechnicalAtmospheres(new Number<double, DoubleCalculator>(value));

        /// <inheritdoc cref="Pressure.FromTechnicalAtmospheres(double)"/>
        public static Pressure TechnicalAtmospheres(this float value) => (Pressure)Pressure.FromTechnicalAtmospheres(value);

        /// <inheritdoc cref="Pressure.FromTechnicalAtmospheres(double)"/>
        public static Pressure TechnicalAtmospheres(this decimal value) => (Pressure)Pressure.FromTechnicalAtmospheres(new Number<double, DoubleCalculator>(Decimal.ToDouble(value)));

        #endregion

        #region TonneForcePerSquareCentimeter

        /// <inheritdoc cref="Pressure.FromTonnesForcePerSquareCentimeter(double)"/>
        public static Pressure TonnesForcePerSquareCentimeter(this int value) => (Pressure)Pressure.FromTonnesForcePerSquareCentimeter(value);
	
        /// <inheritdoc cref="Pressure.FromTonnesForcePerSquareCentimeter(double)"/>
        public static Pressure TonnesForcePerSquareCentimeter(this long value) => (Pressure)Pressure.FromTonnesForcePerSquareCentimeter(value);

        /// <inheritdoc cref="Pressure.FromTonnesForcePerSquareCentimeter(double)"/>
        public static Pressure TonnesForcePerSquareCentimeter(this double value) => (Pressure)Pressure.FromTonnesForcePerSquareCentimeter(new Number<double, DoubleCalculator>(value));

        /// <inheritdoc cref="Pressure.FromTonnesForcePerSquareCentimeter(double)"/>
        public static Pressure TonnesForcePerSquareCentimeter(this float value) => (Pressure)Pressure.FromTonnesForcePerSquareCentimeter(value);

        /// <inheritdoc cref="Pressure.FromTonnesForcePerSquareCentimeter(double)"/>
        public static Pressure TonnesForcePerSquareCentimeter(this decimal value) => (Pressure)Pressure.FromTonnesForcePerSquareCentimeter(new Number<double, DoubleCalculator>(Decimal.ToDouble(value)));

        #endregion

        #region TonneForcePerSquareMeter

        /// <inheritdoc cref="Pressure.FromTonnesForcePerSquareMeter(double)"/>
        public static Pressure TonnesForcePerSquareMeter(this int value) => (Pressure)Pressure.FromTonnesForcePerSquareMeter(value);
	
        /// <inheritdoc cref="Pressure.FromTonnesForcePerSquareMeter(double)"/>
        public static Pressure TonnesForcePerSquareMeter(this long value) => (Pressure)Pressure.FromTonnesForcePerSquareMeter(value);

        /// <inheritdoc cref="Pressure.FromTonnesForcePerSquareMeter(double)"/>
        public static Pressure TonnesForcePerSquareMeter(this double value) => (Pressure)Pressure.FromTonnesForcePerSquareMeter(new Number<double, DoubleCalculator>(value));

        /// <inheritdoc cref="Pressure.FromTonnesForcePerSquareMeter(double)"/>
        public static Pressure TonnesForcePerSquareMeter(this float value) => (Pressure)Pressure.FromTonnesForcePerSquareMeter(value);

        /// <inheritdoc cref="Pressure.FromTonnesForcePerSquareMeter(double)"/>
        public static Pressure TonnesForcePerSquareMeter(this decimal value) => (Pressure)Pressure.FromTonnesForcePerSquareMeter(new Number<double, DoubleCalculator>(Decimal.ToDouble(value)));

        #endregion

        #region TonneForcePerSquareMillimeter

        /// <inheritdoc cref="Pressure.FromTonnesForcePerSquareMillimeter(double)"/>
        public static Pressure TonnesForcePerSquareMillimeter(this int value) => (Pressure)Pressure.FromTonnesForcePerSquareMillimeter(value);
	
        /// <inheritdoc cref="Pressure.FromTonnesForcePerSquareMillimeter(double)"/>
        public static Pressure TonnesForcePerSquareMillimeter(this long value) => (Pressure)Pressure.FromTonnesForcePerSquareMillimeter(value);

        /// <inheritdoc cref="Pressure.FromTonnesForcePerSquareMillimeter(double)"/>
        public static Pressure TonnesForcePerSquareMillimeter(this double value) => (Pressure)Pressure.FromTonnesForcePerSquareMillimeter(new Number<double, DoubleCalculator>(value));

        /// <inheritdoc cref="Pressure.FromTonnesForcePerSquareMillimeter(double)"/>
        public static Pressure TonnesForcePerSquareMillimeter(this float value) => (Pressure)Pressure.FromTonnesForcePerSquareMillimeter(value);

        /// <inheritdoc cref="Pressure.FromTonnesForcePerSquareMillimeter(double)"/>
        public static Pressure TonnesForcePerSquareMillimeter(this decimal value) => (Pressure)Pressure.FromTonnesForcePerSquareMillimeter(new Number<double, DoubleCalculator>(Decimal.ToDouble(value)));

        #endregion

        #region Torr

        /// <inheritdoc cref="Pressure.FromTorrs(double)"/>
        public static Pressure Torrs(this int value) => (Pressure)Pressure.FromTorrs(value);
	
        /// <inheritdoc cref="Pressure.FromTorrs(double)"/>
        public static Pressure Torrs(this long value) => (Pressure)Pressure.FromTorrs(value);

        /// <inheritdoc cref="Pressure.FromTorrs(double)"/>
        public static Pressure Torrs(this double value) => (Pressure)Pressure.FromTorrs(new Number<double, DoubleCalculator>(value));

        /// <inheritdoc cref="Pressure.FromTorrs(double)"/>
        public static Pressure Torrs(this float value) => (Pressure)Pressure.FromTorrs(value);

        /// <inheritdoc cref="Pressure.FromTorrs(double)"/>
        public static Pressure Torrs(this decimal value) => (Pressure)Pressure.FromTorrs(new Number<double, DoubleCalculator>(Decimal.ToDouble(value)));

        #endregion

    }
}
#endif
