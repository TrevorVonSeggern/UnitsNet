//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by \generate-code.bat.
//
//     Changes to this file will be lost when the code is regenerated.
//     The build server regenerates the code before each build and a pre-build
//     step will regenerate the code on each local build.
//
//     See https://github.com/angularsen/UnitsNet/wiki/Adding-a-New-Unit for how to add or edit units.
//
//     Add CustomCode\Quantities\MyUnit.extra.cs files to add code to generated quantities.
//     Add Extensions\MyUnitExtensions.cs to decorate quantities with new behavior.
//     Add UnitDefinitions\MyUnit.json and run GeneratUnits.bat to generate new units or quantities.
//
// </auto-generated>
//------------------------------------------------------------------------------

// Copyright (c) 2013 Andreas Gullberg Larsen (andreas.larsen84@gmail.com).
// https://github.com/angularsen/UnitsNet
// 
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
// 
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
// 
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
// THE SOFTWARE.

using System;
using UnitsNet.InternalHelpers.Calculators;

// Windows Runtime Component does not support extension methods and method overloads: https://msdn.microsoft.com/en-us/library/br230301.aspx
#if !WINDOWS_UWP
namespace UnitsNet.Extensions.NumberToSpeed
{
    public static class NumberToSpeedExtensions
    {
        #region CentimeterPerHour

        /// <inheritdoc cref="Speed.FromCentimetersPerHour(double)"/>
        public static Speed CentimetersPerHour(this int value) => (Speed)Speed.FromCentimetersPerHour(value);
	
        /// <inheritdoc cref="Speed.FromCentimetersPerHour(double)"/>
        public static Speed CentimetersPerHour(this long value) => (Speed)Speed.FromCentimetersPerHour(value);

        /// <inheritdoc cref="Speed.FromCentimetersPerHour(double)"/>
        public static Speed CentimetersPerHour(this double value) => (Speed)Speed.FromCentimetersPerHour(new Number<double, DoubleCalculator>(value));

        /// <inheritdoc cref="Speed.FromCentimetersPerHour(double)"/>
        public static Speed CentimetersPerHour(this float value) => (Speed)Speed.FromCentimetersPerHour(value);

        /// <inheritdoc cref="Speed.FromCentimetersPerHour(double)"/>
        public static Speed CentimetersPerHour(this decimal value) => (Speed)Speed.FromCentimetersPerHour(new Number<double, DoubleCalculator>(Decimal.ToDouble(value)));

        #endregion

        #region CentimeterPerMinute

        /// <inheritdoc cref="Speed.FromCentimetersPerMinutes(double)"/>
        public static Speed CentimetersPerMinutes(this int value) => (Speed)Speed.FromCentimetersPerMinutes(value);
	
        /// <inheritdoc cref="Speed.FromCentimetersPerMinutes(double)"/>
        public static Speed CentimetersPerMinutes(this long value) => (Speed)Speed.FromCentimetersPerMinutes(value);

        /// <inheritdoc cref="Speed.FromCentimetersPerMinutes(double)"/>
        public static Speed CentimetersPerMinutes(this double value) => (Speed)Speed.FromCentimetersPerMinutes(new Number<double, DoubleCalculator>(value));

        /// <inheritdoc cref="Speed.FromCentimetersPerMinutes(double)"/>
        public static Speed CentimetersPerMinutes(this float value) => (Speed)Speed.FromCentimetersPerMinutes(value);

        /// <inheritdoc cref="Speed.FromCentimetersPerMinutes(double)"/>
        public static Speed CentimetersPerMinutes(this decimal value) => (Speed)Speed.FromCentimetersPerMinutes(new Number<double, DoubleCalculator>(Decimal.ToDouble(value)));

        #endregion

        #region CentimeterPerSecond

        /// <inheritdoc cref="Speed.FromCentimetersPerSecond(double)"/>
        public static Speed CentimetersPerSecond(this int value) => (Speed)Speed.FromCentimetersPerSecond(value);
	
        /// <inheritdoc cref="Speed.FromCentimetersPerSecond(double)"/>
        public static Speed CentimetersPerSecond(this long value) => (Speed)Speed.FromCentimetersPerSecond(value);

        /// <inheritdoc cref="Speed.FromCentimetersPerSecond(double)"/>
        public static Speed CentimetersPerSecond(this double value) => (Speed)Speed.FromCentimetersPerSecond(new Number<double, DoubleCalculator>(value));

        /// <inheritdoc cref="Speed.FromCentimetersPerSecond(double)"/>
        public static Speed CentimetersPerSecond(this float value) => (Speed)Speed.FromCentimetersPerSecond(value);

        /// <inheritdoc cref="Speed.FromCentimetersPerSecond(double)"/>
        public static Speed CentimetersPerSecond(this decimal value) => (Speed)Speed.FromCentimetersPerSecond(new Number<double, DoubleCalculator>(Decimal.ToDouble(value)));

        #endregion

        #region DecimeterPerMinute

        /// <inheritdoc cref="Speed.FromDecimetersPerMinutes(double)"/>
        public static Speed DecimetersPerMinutes(this int value) => (Speed)Speed.FromDecimetersPerMinutes(value);
	
        /// <inheritdoc cref="Speed.FromDecimetersPerMinutes(double)"/>
        public static Speed DecimetersPerMinutes(this long value) => (Speed)Speed.FromDecimetersPerMinutes(value);

        /// <inheritdoc cref="Speed.FromDecimetersPerMinutes(double)"/>
        public static Speed DecimetersPerMinutes(this double value) => (Speed)Speed.FromDecimetersPerMinutes(new Number<double, DoubleCalculator>(value));

        /// <inheritdoc cref="Speed.FromDecimetersPerMinutes(double)"/>
        public static Speed DecimetersPerMinutes(this float value) => (Speed)Speed.FromDecimetersPerMinutes(value);

        /// <inheritdoc cref="Speed.FromDecimetersPerMinutes(double)"/>
        public static Speed DecimetersPerMinutes(this decimal value) => (Speed)Speed.FromDecimetersPerMinutes(new Number<double, DoubleCalculator>(Decimal.ToDouble(value)));

        #endregion

        #region DecimeterPerSecond

        /// <inheritdoc cref="Speed.FromDecimetersPerSecond(double)"/>
        public static Speed DecimetersPerSecond(this int value) => (Speed)Speed.FromDecimetersPerSecond(value);
	
        /// <inheritdoc cref="Speed.FromDecimetersPerSecond(double)"/>
        public static Speed DecimetersPerSecond(this long value) => (Speed)Speed.FromDecimetersPerSecond(value);

        /// <inheritdoc cref="Speed.FromDecimetersPerSecond(double)"/>
        public static Speed DecimetersPerSecond(this double value) => (Speed)Speed.FromDecimetersPerSecond(new Number<double, DoubleCalculator>(value));

        /// <inheritdoc cref="Speed.FromDecimetersPerSecond(double)"/>
        public static Speed DecimetersPerSecond(this float value) => (Speed)Speed.FromDecimetersPerSecond(value);

        /// <inheritdoc cref="Speed.FromDecimetersPerSecond(double)"/>
        public static Speed DecimetersPerSecond(this decimal value) => (Speed)Speed.FromDecimetersPerSecond(new Number<double, DoubleCalculator>(Decimal.ToDouble(value)));

        #endregion

        #region FootPerHour

        /// <inheritdoc cref="Speed.FromFeetPerHour(double)"/>
        public static Speed FeetPerHour(this int value) => (Speed)Speed.FromFeetPerHour(value);
	
        /// <inheritdoc cref="Speed.FromFeetPerHour(double)"/>
        public static Speed FeetPerHour(this long value) => (Speed)Speed.FromFeetPerHour(value);

        /// <inheritdoc cref="Speed.FromFeetPerHour(double)"/>
        public static Speed FeetPerHour(this double value) => (Speed)Speed.FromFeetPerHour(new Number<double, DoubleCalculator>(value));

        /// <inheritdoc cref="Speed.FromFeetPerHour(double)"/>
        public static Speed FeetPerHour(this float value) => (Speed)Speed.FromFeetPerHour(value);

        /// <inheritdoc cref="Speed.FromFeetPerHour(double)"/>
        public static Speed FeetPerHour(this decimal value) => (Speed)Speed.FromFeetPerHour(new Number<double, DoubleCalculator>(Decimal.ToDouble(value)));

        #endregion

        #region FootPerMinute

        /// <inheritdoc cref="Speed.FromFeetPerMinute(double)"/>
        public static Speed FeetPerMinute(this int value) => (Speed)Speed.FromFeetPerMinute(value);
	
        /// <inheritdoc cref="Speed.FromFeetPerMinute(double)"/>
        public static Speed FeetPerMinute(this long value) => (Speed)Speed.FromFeetPerMinute(value);

        /// <inheritdoc cref="Speed.FromFeetPerMinute(double)"/>
        public static Speed FeetPerMinute(this double value) => (Speed)Speed.FromFeetPerMinute(new Number<double, DoubleCalculator>(value));

        /// <inheritdoc cref="Speed.FromFeetPerMinute(double)"/>
        public static Speed FeetPerMinute(this float value) => (Speed)Speed.FromFeetPerMinute(value);

        /// <inheritdoc cref="Speed.FromFeetPerMinute(double)"/>
        public static Speed FeetPerMinute(this decimal value) => (Speed)Speed.FromFeetPerMinute(new Number<double, DoubleCalculator>(Decimal.ToDouble(value)));

        #endregion

        #region FootPerSecond

        /// <inheritdoc cref="Speed.FromFeetPerSecond(double)"/>
        public static Speed FeetPerSecond(this int value) => (Speed)Speed.FromFeetPerSecond(value);
	
        /// <inheritdoc cref="Speed.FromFeetPerSecond(double)"/>
        public static Speed FeetPerSecond(this long value) => (Speed)Speed.FromFeetPerSecond(value);

        /// <inheritdoc cref="Speed.FromFeetPerSecond(double)"/>
        public static Speed FeetPerSecond(this double value) => (Speed)Speed.FromFeetPerSecond(new Number<double, DoubleCalculator>(value));

        /// <inheritdoc cref="Speed.FromFeetPerSecond(double)"/>
        public static Speed FeetPerSecond(this float value) => (Speed)Speed.FromFeetPerSecond(value);

        /// <inheritdoc cref="Speed.FromFeetPerSecond(double)"/>
        public static Speed FeetPerSecond(this decimal value) => (Speed)Speed.FromFeetPerSecond(new Number<double, DoubleCalculator>(Decimal.ToDouble(value)));

        #endregion

        #region InchPerHour

        /// <inheritdoc cref="Speed.FromInchesPerHour(double)"/>
        public static Speed InchesPerHour(this int value) => (Speed)Speed.FromInchesPerHour(value);
	
        /// <inheritdoc cref="Speed.FromInchesPerHour(double)"/>
        public static Speed InchesPerHour(this long value) => (Speed)Speed.FromInchesPerHour(value);

        /// <inheritdoc cref="Speed.FromInchesPerHour(double)"/>
        public static Speed InchesPerHour(this double value) => (Speed)Speed.FromInchesPerHour(new Number<double, DoubleCalculator>(value));

        /// <inheritdoc cref="Speed.FromInchesPerHour(double)"/>
        public static Speed InchesPerHour(this float value) => (Speed)Speed.FromInchesPerHour(value);

        /// <inheritdoc cref="Speed.FromInchesPerHour(double)"/>
        public static Speed InchesPerHour(this decimal value) => (Speed)Speed.FromInchesPerHour(new Number<double, DoubleCalculator>(Decimal.ToDouble(value)));

        #endregion

        #region InchPerMinute

        /// <inheritdoc cref="Speed.FromInchesPerMinute(double)"/>
        public static Speed InchesPerMinute(this int value) => (Speed)Speed.FromInchesPerMinute(value);
	
        /// <inheritdoc cref="Speed.FromInchesPerMinute(double)"/>
        public static Speed InchesPerMinute(this long value) => (Speed)Speed.FromInchesPerMinute(value);

        /// <inheritdoc cref="Speed.FromInchesPerMinute(double)"/>
        public static Speed InchesPerMinute(this double value) => (Speed)Speed.FromInchesPerMinute(new Number<double, DoubleCalculator>(value));

        /// <inheritdoc cref="Speed.FromInchesPerMinute(double)"/>
        public static Speed InchesPerMinute(this float value) => (Speed)Speed.FromInchesPerMinute(value);

        /// <inheritdoc cref="Speed.FromInchesPerMinute(double)"/>
        public static Speed InchesPerMinute(this decimal value) => (Speed)Speed.FromInchesPerMinute(new Number<double, DoubleCalculator>(Decimal.ToDouble(value)));

        #endregion

        #region InchPerSecond

        /// <inheritdoc cref="Speed.FromInchesPerSecond(double)"/>
        public static Speed InchesPerSecond(this int value) => (Speed)Speed.FromInchesPerSecond(value);
	
        /// <inheritdoc cref="Speed.FromInchesPerSecond(double)"/>
        public static Speed InchesPerSecond(this long value) => (Speed)Speed.FromInchesPerSecond(value);

        /// <inheritdoc cref="Speed.FromInchesPerSecond(double)"/>
        public static Speed InchesPerSecond(this double value) => (Speed)Speed.FromInchesPerSecond(new Number<double, DoubleCalculator>(value));

        /// <inheritdoc cref="Speed.FromInchesPerSecond(double)"/>
        public static Speed InchesPerSecond(this float value) => (Speed)Speed.FromInchesPerSecond(value);

        /// <inheritdoc cref="Speed.FromInchesPerSecond(double)"/>
        public static Speed InchesPerSecond(this decimal value) => (Speed)Speed.FromInchesPerSecond(new Number<double, DoubleCalculator>(Decimal.ToDouble(value)));

        #endregion

        #region KilometerPerHour

        /// <inheritdoc cref="Speed.FromKilometersPerHour(double)"/>
        public static Speed KilometersPerHour(this int value) => (Speed)Speed.FromKilometersPerHour(value);
	
        /// <inheritdoc cref="Speed.FromKilometersPerHour(double)"/>
        public static Speed KilometersPerHour(this long value) => (Speed)Speed.FromKilometersPerHour(value);

        /// <inheritdoc cref="Speed.FromKilometersPerHour(double)"/>
        public static Speed KilometersPerHour(this double value) => (Speed)Speed.FromKilometersPerHour(new Number<double, DoubleCalculator>(value));

        /// <inheritdoc cref="Speed.FromKilometersPerHour(double)"/>
        public static Speed KilometersPerHour(this float value) => (Speed)Speed.FromKilometersPerHour(value);

        /// <inheritdoc cref="Speed.FromKilometersPerHour(double)"/>
        public static Speed KilometersPerHour(this decimal value) => (Speed)Speed.FromKilometersPerHour(new Number<double, DoubleCalculator>(Decimal.ToDouble(value)));

        #endregion

        #region KilometerPerMinute

        /// <inheritdoc cref="Speed.FromKilometersPerMinutes(double)"/>
        public static Speed KilometersPerMinutes(this int value) => (Speed)Speed.FromKilometersPerMinutes(value);
	
        /// <inheritdoc cref="Speed.FromKilometersPerMinutes(double)"/>
        public static Speed KilometersPerMinutes(this long value) => (Speed)Speed.FromKilometersPerMinutes(value);

        /// <inheritdoc cref="Speed.FromKilometersPerMinutes(double)"/>
        public static Speed KilometersPerMinutes(this double value) => (Speed)Speed.FromKilometersPerMinutes(new Number<double, DoubleCalculator>(value));

        /// <inheritdoc cref="Speed.FromKilometersPerMinutes(double)"/>
        public static Speed KilometersPerMinutes(this float value) => (Speed)Speed.FromKilometersPerMinutes(value);

        /// <inheritdoc cref="Speed.FromKilometersPerMinutes(double)"/>
        public static Speed KilometersPerMinutes(this decimal value) => (Speed)Speed.FromKilometersPerMinutes(new Number<double, DoubleCalculator>(Decimal.ToDouble(value)));

        #endregion

        #region KilometerPerSecond

        /// <inheritdoc cref="Speed.FromKilometersPerSecond(double)"/>
        public static Speed KilometersPerSecond(this int value) => (Speed)Speed.FromKilometersPerSecond(value);
	
        /// <inheritdoc cref="Speed.FromKilometersPerSecond(double)"/>
        public static Speed KilometersPerSecond(this long value) => (Speed)Speed.FromKilometersPerSecond(value);

        /// <inheritdoc cref="Speed.FromKilometersPerSecond(double)"/>
        public static Speed KilometersPerSecond(this double value) => (Speed)Speed.FromKilometersPerSecond(new Number<double, DoubleCalculator>(value));

        /// <inheritdoc cref="Speed.FromKilometersPerSecond(double)"/>
        public static Speed KilometersPerSecond(this float value) => (Speed)Speed.FromKilometersPerSecond(value);

        /// <inheritdoc cref="Speed.FromKilometersPerSecond(double)"/>
        public static Speed KilometersPerSecond(this decimal value) => (Speed)Speed.FromKilometersPerSecond(new Number<double, DoubleCalculator>(Decimal.ToDouble(value)));

        #endregion

        #region Knot

        /// <inheritdoc cref="Speed.FromKnots(double)"/>
        public static Speed Knots(this int value) => (Speed)Speed.FromKnots(value);
	
        /// <inheritdoc cref="Speed.FromKnots(double)"/>
        public static Speed Knots(this long value) => (Speed)Speed.FromKnots(value);

        /// <inheritdoc cref="Speed.FromKnots(double)"/>
        public static Speed Knots(this double value) => (Speed)Speed.FromKnots(new Number<double, DoubleCalculator>(value));

        /// <inheritdoc cref="Speed.FromKnots(double)"/>
        public static Speed Knots(this float value) => (Speed)Speed.FromKnots(value);

        /// <inheritdoc cref="Speed.FromKnots(double)"/>
        public static Speed Knots(this decimal value) => (Speed)Speed.FromKnots(new Number<double, DoubleCalculator>(Decimal.ToDouble(value)));

        #endregion

        #region MeterPerHour

        /// <inheritdoc cref="Speed.FromMetersPerHour(double)"/>
        public static Speed MetersPerHour(this int value) => (Speed)Speed.FromMetersPerHour(value);
	
        /// <inheritdoc cref="Speed.FromMetersPerHour(double)"/>
        public static Speed MetersPerHour(this long value) => (Speed)Speed.FromMetersPerHour(value);

        /// <inheritdoc cref="Speed.FromMetersPerHour(double)"/>
        public static Speed MetersPerHour(this double value) => (Speed)Speed.FromMetersPerHour(new Number<double, DoubleCalculator>(value));

        /// <inheritdoc cref="Speed.FromMetersPerHour(double)"/>
        public static Speed MetersPerHour(this float value) => (Speed)Speed.FromMetersPerHour(value);

        /// <inheritdoc cref="Speed.FromMetersPerHour(double)"/>
        public static Speed MetersPerHour(this decimal value) => (Speed)Speed.FromMetersPerHour(new Number<double, DoubleCalculator>(Decimal.ToDouble(value)));

        #endregion

        #region MeterPerMinute

        /// <inheritdoc cref="Speed.FromMetersPerMinutes(double)"/>
        public static Speed MetersPerMinutes(this int value) => (Speed)Speed.FromMetersPerMinutes(value);
	
        /// <inheritdoc cref="Speed.FromMetersPerMinutes(double)"/>
        public static Speed MetersPerMinutes(this long value) => (Speed)Speed.FromMetersPerMinutes(value);

        /// <inheritdoc cref="Speed.FromMetersPerMinutes(double)"/>
        public static Speed MetersPerMinutes(this double value) => (Speed)Speed.FromMetersPerMinutes(new Number<double, DoubleCalculator>(value));

        /// <inheritdoc cref="Speed.FromMetersPerMinutes(double)"/>
        public static Speed MetersPerMinutes(this float value) => (Speed)Speed.FromMetersPerMinutes(value);

        /// <inheritdoc cref="Speed.FromMetersPerMinutes(double)"/>
        public static Speed MetersPerMinutes(this decimal value) => (Speed)Speed.FromMetersPerMinutes(new Number<double, DoubleCalculator>(Decimal.ToDouble(value)));

        #endregion

        #region MeterPerSecond

        /// <inheritdoc cref="Speed.FromMetersPerSecond(double)"/>
        public static Speed MetersPerSecond(this int value) => (Speed)Speed.FromMetersPerSecond(value);
	
        /// <inheritdoc cref="Speed.FromMetersPerSecond(double)"/>
        public static Speed MetersPerSecond(this long value) => (Speed)Speed.FromMetersPerSecond(value);

        /// <inheritdoc cref="Speed.FromMetersPerSecond(double)"/>
        public static Speed MetersPerSecond(this double value) => (Speed)Speed.FromMetersPerSecond(new Number<double, DoubleCalculator>(value));

        /// <inheritdoc cref="Speed.FromMetersPerSecond(double)"/>
        public static Speed MetersPerSecond(this float value) => (Speed)Speed.FromMetersPerSecond(value);

        /// <inheritdoc cref="Speed.FromMetersPerSecond(double)"/>
        public static Speed MetersPerSecond(this decimal value) => (Speed)Speed.FromMetersPerSecond(new Number<double, DoubleCalculator>(Decimal.ToDouble(value)));

        #endregion

        #region MicrometerPerMinute

        /// <inheritdoc cref="Speed.FromMicrometersPerMinutes(double)"/>
        public static Speed MicrometersPerMinutes(this int value) => (Speed)Speed.FromMicrometersPerMinutes(value);
	
        /// <inheritdoc cref="Speed.FromMicrometersPerMinutes(double)"/>
        public static Speed MicrometersPerMinutes(this long value) => (Speed)Speed.FromMicrometersPerMinutes(value);

        /// <inheritdoc cref="Speed.FromMicrometersPerMinutes(double)"/>
        public static Speed MicrometersPerMinutes(this double value) => (Speed)Speed.FromMicrometersPerMinutes(new Number<double, DoubleCalculator>(value));

        /// <inheritdoc cref="Speed.FromMicrometersPerMinutes(double)"/>
        public static Speed MicrometersPerMinutes(this float value) => (Speed)Speed.FromMicrometersPerMinutes(value);

        /// <inheritdoc cref="Speed.FromMicrometersPerMinutes(double)"/>
        public static Speed MicrometersPerMinutes(this decimal value) => (Speed)Speed.FromMicrometersPerMinutes(new Number<double, DoubleCalculator>(Decimal.ToDouble(value)));

        #endregion

        #region MicrometerPerSecond

        /// <inheritdoc cref="Speed.FromMicrometersPerSecond(double)"/>
        public static Speed MicrometersPerSecond(this int value) => (Speed)Speed.FromMicrometersPerSecond(value);
	
        /// <inheritdoc cref="Speed.FromMicrometersPerSecond(double)"/>
        public static Speed MicrometersPerSecond(this long value) => (Speed)Speed.FromMicrometersPerSecond(value);

        /// <inheritdoc cref="Speed.FromMicrometersPerSecond(double)"/>
        public static Speed MicrometersPerSecond(this double value) => (Speed)Speed.FromMicrometersPerSecond(new Number<double, DoubleCalculator>(value));

        /// <inheritdoc cref="Speed.FromMicrometersPerSecond(double)"/>
        public static Speed MicrometersPerSecond(this float value) => (Speed)Speed.FromMicrometersPerSecond(value);

        /// <inheritdoc cref="Speed.FromMicrometersPerSecond(double)"/>
        public static Speed MicrometersPerSecond(this decimal value) => (Speed)Speed.FromMicrometersPerSecond(new Number<double, DoubleCalculator>(Decimal.ToDouble(value)));

        #endregion

        #region MilePerHour

        /// <inheritdoc cref="Speed.FromMilesPerHour(double)"/>
        public static Speed MilesPerHour(this int value) => (Speed)Speed.FromMilesPerHour(value);
	
        /// <inheritdoc cref="Speed.FromMilesPerHour(double)"/>
        public static Speed MilesPerHour(this long value) => (Speed)Speed.FromMilesPerHour(value);

        /// <inheritdoc cref="Speed.FromMilesPerHour(double)"/>
        public static Speed MilesPerHour(this double value) => (Speed)Speed.FromMilesPerHour(new Number<double, DoubleCalculator>(value));

        /// <inheritdoc cref="Speed.FromMilesPerHour(double)"/>
        public static Speed MilesPerHour(this float value) => (Speed)Speed.FromMilesPerHour(value);

        /// <inheritdoc cref="Speed.FromMilesPerHour(double)"/>
        public static Speed MilesPerHour(this decimal value) => (Speed)Speed.FromMilesPerHour(new Number<double, DoubleCalculator>(Decimal.ToDouble(value)));

        #endregion

        #region MillimeterPerHour

        /// <inheritdoc cref="Speed.FromMillimetersPerHour(double)"/>
        public static Speed MillimetersPerHour(this int value) => (Speed)Speed.FromMillimetersPerHour(value);
	
        /// <inheritdoc cref="Speed.FromMillimetersPerHour(double)"/>
        public static Speed MillimetersPerHour(this long value) => (Speed)Speed.FromMillimetersPerHour(value);

        /// <inheritdoc cref="Speed.FromMillimetersPerHour(double)"/>
        public static Speed MillimetersPerHour(this double value) => (Speed)Speed.FromMillimetersPerHour(new Number<double, DoubleCalculator>(value));

        /// <inheritdoc cref="Speed.FromMillimetersPerHour(double)"/>
        public static Speed MillimetersPerHour(this float value) => (Speed)Speed.FromMillimetersPerHour(value);

        /// <inheritdoc cref="Speed.FromMillimetersPerHour(double)"/>
        public static Speed MillimetersPerHour(this decimal value) => (Speed)Speed.FromMillimetersPerHour(new Number<double, DoubleCalculator>(Decimal.ToDouble(value)));

        #endregion

        #region MillimeterPerMinute

        /// <inheritdoc cref="Speed.FromMillimetersPerMinutes(double)"/>
        public static Speed MillimetersPerMinutes(this int value) => (Speed)Speed.FromMillimetersPerMinutes(value);
	
        /// <inheritdoc cref="Speed.FromMillimetersPerMinutes(double)"/>
        public static Speed MillimetersPerMinutes(this long value) => (Speed)Speed.FromMillimetersPerMinutes(value);

        /// <inheritdoc cref="Speed.FromMillimetersPerMinutes(double)"/>
        public static Speed MillimetersPerMinutes(this double value) => (Speed)Speed.FromMillimetersPerMinutes(new Number<double, DoubleCalculator>(value));

        /// <inheritdoc cref="Speed.FromMillimetersPerMinutes(double)"/>
        public static Speed MillimetersPerMinutes(this float value) => (Speed)Speed.FromMillimetersPerMinutes(value);

        /// <inheritdoc cref="Speed.FromMillimetersPerMinutes(double)"/>
        public static Speed MillimetersPerMinutes(this decimal value) => (Speed)Speed.FromMillimetersPerMinutes(new Number<double, DoubleCalculator>(Decimal.ToDouble(value)));

        #endregion

        #region MillimeterPerSecond

        /// <inheritdoc cref="Speed.FromMillimetersPerSecond(double)"/>
        public static Speed MillimetersPerSecond(this int value) => (Speed)Speed.FromMillimetersPerSecond(value);
	
        /// <inheritdoc cref="Speed.FromMillimetersPerSecond(double)"/>
        public static Speed MillimetersPerSecond(this long value) => (Speed)Speed.FromMillimetersPerSecond(value);

        /// <inheritdoc cref="Speed.FromMillimetersPerSecond(double)"/>
        public static Speed MillimetersPerSecond(this double value) => (Speed)Speed.FromMillimetersPerSecond(new Number<double, DoubleCalculator>(value));

        /// <inheritdoc cref="Speed.FromMillimetersPerSecond(double)"/>
        public static Speed MillimetersPerSecond(this float value) => (Speed)Speed.FromMillimetersPerSecond(value);

        /// <inheritdoc cref="Speed.FromMillimetersPerSecond(double)"/>
        public static Speed MillimetersPerSecond(this decimal value) => (Speed)Speed.FromMillimetersPerSecond(new Number<double, DoubleCalculator>(Decimal.ToDouble(value)));

        #endregion

        #region NanometerPerMinute

        /// <inheritdoc cref="Speed.FromNanometersPerMinutes(double)"/>
        public static Speed NanometersPerMinutes(this int value) => (Speed)Speed.FromNanometersPerMinutes(value);
	
        /// <inheritdoc cref="Speed.FromNanometersPerMinutes(double)"/>
        public static Speed NanometersPerMinutes(this long value) => (Speed)Speed.FromNanometersPerMinutes(value);

        /// <inheritdoc cref="Speed.FromNanometersPerMinutes(double)"/>
        public static Speed NanometersPerMinutes(this double value) => (Speed)Speed.FromNanometersPerMinutes(new Number<double, DoubleCalculator>(value));

        /// <inheritdoc cref="Speed.FromNanometersPerMinutes(double)"/>
        public static Speed NanometersPerMinutes(this float value) => (Speed)Speed.FromNanometersPerMinutes(value);

        /// <inheritdoc cref="Speed.FromNanometersPerMinutes(double)"/>
        public static Speed NanometersPerMinutes(this decimal value) => (Speed)Speed.FromNanometersPerMinutes(new Number<double, DoubleCalculator>(Decimal.ToDouble(value)));

        #endregion

        #region NanometerPerSecond

        /// <inheritdoc cref="Speed.FromNanometersPerSecond(double)"/>
        public static Speed NanometersPerSecond(this int value) => (Speed)Speed.FromNanometersPerSecond(value);
	
        /// <inheritdoc cref="Speed.FromNanometersPerSecond(double)"/>
        public static Speed NanometersPerSecond(this long value) => (Speed)Speed.FromNanometersPerSecond(value);

        /// <inheritdoc cref="Speed.FromNanometersPerSecond(double)"/>
        public static Speed NanometersPerSecond(this double value) => (Speed)Speed.FromNanometersPerSecond(new Number<double, DoubleCalculator>(value));

        /// <inheritdoc cref="Speed.FromNanometersPerSecond(double)"/>
        public static Speed NanometersPerSecond(this float value) => (Speed)Speed.FromNanometersPerSecond(value);

        /// <inheritdoc cref="Speed.FromNanometersPerSecond(double)"/>
        public static Speed NanometersPerSecond(this decimal value) => (Speed)Speed.FromNanometersPerSecond(new Number<double, DoubleCalculator>(Decimal.ToDouble(value)));

        #endregion

        #region UsSurveyFootPerHour

        /// <inheritdoc cref="Speed.FromUsSurveyFeetPerHour(double)"/>
        public static Speed UsSurveyFeetPerHour(this int value) => (Speed)Speed.FromUsSurveyFeetPerHour(value);
	
        /// <inheritdoc cref="Speed.FromUsSurveyFeetPerHour(double)"/>
        public static Speed UsSurveyFeetPerHour(this long value) => (Speed)Speed.FromUsSurveyFeetPerHour(value);

        /// <inheritdoc cref="Speed.FromUsSurveyFeetPerHour(double)"/>
        public static Speed UsSurveyFeetPerHour(this double value) => (Speed)Speed.FromUsSurveyFeetPerHour(new Number<double, DoubleCalculator>(value));

        /// <inheritdoc cref="Speed.FromUsSurveyFeetPerHour(double)"/>
        public static Speed UsSurveyFeetPerHour(this float value) => (Speed)Speed.FromUsSurveyFeetPerHour(value);

        /// <inheritdoc cref="Speed.FromUsSurveyFeetPerHour(double)"/>
        public static Speed UsSurveyFeetPerHour(this decimal value) => (Speed)Speed.FromUsSurveyFeetPerHour(new Number<double, DoubleCalculator>(Decimal.ToDouble(value)));

        #endregion

        #region UsSurveyFootPerMinute

        /// <inheritdoc cref="Speed.FromUsSurveyFeetPerMinute(double)"/>
        public static Speed UsSurveyFeetPerMinute(this int value) => (Speed)Speed.FromUsSurveyFeetPerMinute(value);
	
        /// <inheritdoc cref="Speed.FromUsSurveyFeetPerMinute(double)"/>
        public static Speed UsSurveyFeetPerMinute(this long value) => (Speed)Speed.FromUsSurveyFeetPerMinute(value);

        /// <inheritdoc cref="Speed.FromUsSurveyFeetPerMinute(double)"/>
        public static Speed UsSurveyFeetPerMinute(this double value) => (Speed)Speed.FromUsSurveyFeetPerMinute(new Number<double, DoubleCalculator>(value));

        /// <inheritdoc cref="Speed.FromUsSurveyFeetPerMinute(double)"/>
        public static Speed UsSurveyFeetPerMinute(this float value) => (Speed)Speed.FromUsSurveyFeetPerMinute(value);

        /// <inheritdoc cref="Speed.FromUsSurveyFeetPerMinute(double)"/>
        public static Speed UsSurveyFeetPerMinute(this decimal value) => (Speed)Speed.FromUsSurveyFeetPerMinute(new Number<double, DoubleCalculator>(Decimal.ToDouble(value)));

        #endregion

        #region UsSurveyFootPerSecond

        /// <inheritdoc cref="Speed.FromUsSurveyFeetPerSecond(double)"/>
        public static Speed UsSurveyFeetPerSecond(this int value) => (Speed)Speed.FromUsSurveyFeetPerSecond(value);
	
        /// <inheritdoc cref="Speed.FromUsSurveyFeetPerSecond(double)"/>
        public static Speed UsSurveyFeetPerSecond(this long value) => (Speed)Speed.FromUsSurveyFeetPerSecond(value);

        /// <inheritdoc cref="Speed.FromUsSurveyFeetPerSecond(double)"/>
        public static Speed UsSurveyFeetPerSecond(this double value) => (Speed)Speed.FromUsSurveyFeetPerSecond(new Number<double, DoubleCalculator>(value));

        /// <inheritdoc cref="Speed.FromUsSurveyFeetPerSecond(double)"/>
        public static Speed UsSurveyFeetPerSecond(this float value) => (Speed)Speed.FromUsSurveyFeetPerSecond(value);

        /// <inheritdoc cref="Speed.FromUsSurveyFeetPerSecond(double)"/>
        public static Speed UsSurveyFeetPerSecond(this decimal value) => (Speed)Speed.FromUsSurveyFeetPerSecond(new Number<double, DoubleCalculator>(Decimal.ToDouble(value)));

        #endregion

        #region YardPerHour

        /// <inheritdoc cref="Speed.FromYardsPerHour(double)"/>
        public static Speed YardsPerHour(this int value) => (Speed)Speed.FromYardsPerHour(value);
	
        /// <inheritdoc cref="Speed.FromYardsPerHour(double)"/>
        public static Speed YardsPerHour(this long value) => (Speed)Speed.FromYardsPerHour(value);

        /// <inheritdoc cref="Speed.FromYardsPerHour(double)"/>
        public static Speed YardsPerHour(this double value) => (Speed)Speed.FromYardsPerHour(new Number<double, DoubleCalculator>(value));

        /// <inheritdoc cref="Speed.FromYardsPerHour(double)"/>
        public static Speed YardsPerHour(this float value) => (Speed)Speed.FromYardsPerHour(value);

        /// <inheritdoc cref="Speed.FromYardsPerHour(double)"/>
        public static Speed YardsPerHour(this decimal value) => (Speed)Speed.FromYardsPerHour(new Number<double, DoubleCalculator>(Decimal.ToDouble(value)));

        #endregion

        #region YardPerMinute

        /// <inheritdoc cref="Speed.FromYardsPerMinute(double)"/>
        public static Speed YardsPerMinute(this int value) => (Speed)Speed.FromYardsPerMinute(value);
	
        /// <inheritdoc cref="Speed.FromYardsPerMinute(double)"/>
        public static Speed YardsPerMinute(this long value) => (Speed)Speed.FromYardsPerMinute(value);

        /// <inheritdoc cref="Speed.FromYardsPerMinute(double)"/>
        public static Speed YardsPerMinute(this double value) => (Speed)Speed.FromYardsPerMinute(new Number<double, DoubleCalculator>(value));

        /// <inheritdoc cref="Speed.FromYardsPerMinute(double)"/>
        public static Speed YardsPerMinute(this float value) => (Speed)Speed.FromYardsPerMinute(value);

        /// <inheritdoc cref="Speed.FromYardsPerMinute(double)"/>
        public static Speed YardsPerMinute(this decimal value) => (Speed)Speed.FromYardsPerMinute(new Number<double, DoubleCalculator>(Decimal.ToDouble(value)));

        #endregion

        #region YardPerSecond

        /// <inheritdoc cref="Speed.FromYardsPerSecond(double)"/>
        public static Speed YardsPerSecond(this int value) => (Speed)Speed.FromYardsPerSecond(value);
	
        /// <inheritdoc cref="Speed.FromYardsPerSecond(double)"/>
        public static Speed YardsPerSecond(this long value) => (Speed)Speed.FromYardsPerSecond(value);

        /// <inheritdoc cref="Speed.FromYardsPerSecond(double)"/>
        public static Speed YardsPerSecond(this double value) => (Speed)Speed.FromYardsPerSecond(new Number<double, DoubleCalculator>(value));

        /// <inheritdoc cref="Speed.FromYardsPerSecond(double)"/>
        public static Speed YardsPerSecond(this float value) => (Speed)Speed.FromYardsPerSecond(value);

        /// <inheritdoc cref="Speed.FromYardsPerSecond(double)"/>
        public static Speed YardsPerSecond(this decimal value) => (Speed)Speed.FromYardsPerSecond(new Number<double, DoubleCalculator>(Decimal.ToDouble(value)));

        #endregion

    }
}
#endif
