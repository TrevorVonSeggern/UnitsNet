//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by \generate-code.bat.
//
//     Changes to this file will be lost when the code is regenerated.
//     The build server regenerates the code before each build and a pre-build
//     step will regenerate the code on each local build.
//
//     See https://github.com/angularsen/UnitsNet/wiki/Adding-a-New-Unit for how to add or edit units.
//
//     Add CustomCode\Quantities\MyUnit.extra.cs files to add code to generated quantities.
//     Add Extensions\MyUnitExtensions.cs to decorate quantities with new behavior.
//     Add UnitDefinitions\MyUnit.json and run GeneratUnits.bat to generate new units or quantities.
//
// </auto-generated>
//------------------------------------------------------------------------------

// Copyright (c) 2013 Andreas Gullberg Larsen (andreas.larsen84@gmail.com).
// https://github.com/angularsen/UnitsNet
// 
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
// 
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
// 
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
// THE SOFTWARE.

using System;
using UnitsNet.InternalHelpers.Calculators;

// Windows Runtime Component does not support extension methods and method overloads: https://msdn.microsoft.com/en-us/library/br230301.aspx
#if !WINDOWS_UWP
namespace UnitsNet.Extensions.NumberToArea
{
    public static class NumberToAreaExtensions
    {
        #region Acre

        /// <inheritdoc cref="Area.FromAcres(double)"/>
        public static Area Acres(this int value) => (Area)Area.FromAcres(value);
	
        /// <inheritdoc cref="Area.FromAcres(double)"/>
        public static Area Acres(this long value) => (Area)Area.FromAcres(value);

        /// <inheritdoc cref="Area.FromAcres(double)"/>
        public static Area Acres(this double value) => (Area)Area.FromAcres(new Number<double, DoubleCalculator>(value));

        /// <inheritdoc cref="Area.FromAcres(double)"/>
        public static Area Acres(this float value) => (Area)Area.FromAcres(value);

        /// <inheritdoc cref="Area.FromAcres(double)"/>
        public static Area Acres(this decimal value) => (Area)Area.FromAcres(new Number<double, DoubleCalculator>(Decimal.ToDouble(value)));

        #endregion

        #region Hectare

        /// <inheritdoc cref="Area.FromHectares(double)"/>
        public static Area Hectares(this int value) => (Area)Area.FromHectares(value);
	
        /// <inheritdoc cref="Area.FromHectares(double)"/>
        public static Area Hectares(this long value) => (Area)Area.FromHectares(value);

        /// <inheritdoc cref="Area.FromHectares(double)"/>
        public static Area Hectares(this double value) => (Area)Area.FromHectares(new Number<double, DoubleCalculator>(value));

        /// <inheritdoc cref="Area.FromHectares(double)"/>
        public static Area Hectares(this float value) => (Area)Area.FromHectares(value);

        /// <inheritdoc cref="Area.FromHectares(double)"/>
        public static Area Hectares(this decimal value) => (Area)Area.FromHectares(new Number<double, DoubleCalculator>(Decimal.ToDouble(value)));

        #endregion

        #region SquareCentimeter

        /// <inheritdoc cref="Area.FromSquareCentimeters(double)"/>
        public static Area SquareCentimeters(this int value) => (Area)Area.FromSquareCentimeters(value);
	
        /// <inheritdoc cref="Area.FromSquareCentimeters(double)"/>
        public static Area SquareCentimeters(this long value) => (Area)Area.FromSquareCentimeters(value);

        /// <inheritdoc cref="Area.FromSquareCentimeters(double)"/>
        public static Area SquareCentimeters(this double value) => (Area)Area.FromSquareCentimeters(new Number<double, DoubleCalculator>(value));

        /// <inheritdoc cref="Area.FromSquareCentimeters(double)"/>
        public static Area SquareCentimeters(this float value) => (Area)Area.FromSquareCentimeters(value);

        /// <inheritdoc cref="Area.FromSquareCentimeters(double)"/>
        public static Area SquareCentimeters(this decimal value) => (Area)Area.FromSquareCentimeters(new Number<double, DoubleCalculator>(Decimal.ToDouble(value)));

        #endregion

        #region SquareDecimeter

        /// <inheritdoc cref="Area.FromSquareDecimeters(double)"/>
        public static Area SquareDecimeters(this int value) => (Area)Area.FromSquareDecimeters(value);
	
        /// <inheritdoc cref="Area.FromSquareDecimeters(double)"/>
        public static Area SquareDecimeters(this long value) => (Area)Area.FromSquareDecimeters(value);

        /// <inheritdoc cref="Area.FromSquareDecimeters(double)"/>
        public static Area SquareDecimeters(this double value) => (Area)Area.FromSquareDecimeters(new Number<double, DoubleCalculator>(value));

        /// <inheritdoc cref="Area.FromSquareDecimeters(double)"/>
        public static Area SquareDecimeters(this float value) => (Area)Area.FromSquareDecimeters(value);

        /// <inheritdoc cref="Area.FromSquareDecimeters(double)"/>
        public static Area SquareDecimeters(this decimal value) => (Area)Area.FromSquareDecimeters(new Number<double, DoubleCalculator>(Decimal.ToDouble(value)));

        #endregion

        #region SquareFoot

        /// <inheritdoc cref="Area.FromSquareFeet(double)"/>
        public static Area SquareFeet(this int value) => (Area)Area.FromSquareFeet(value);
	
        /// <inheritdoc cref="Area.FromSquareFeet(double)"/>
        public static Area SquareFeet(this long value) => (Area)Area.FromSquareFeet(value);

        /// <inheritdoc cref="Area.FromSquareFeet(double)"/>
        public static Area SquareFeet(this double value) => (Area)Area.FromSquareFeet(new Number<double, DoubleCalculator>(value));

        /// <inheritdoc cref="Area.FromSquareFeet(double)"/>
        public static Area SquareFeet(this float value) => (Area)Area.FromSquareFeet(value);

        /// <inheritdoc cref="Area.FromSquareFeet(double)"/>
        public static Area SquareFeet(this decimal value) => (Area)Area.FromSquareFeet(new Number<double, DoubleCalculator>(Decimal.ToDouble(value)));

        #endregion

        #region SquareInch

        /// <inheritdoc cref="Area.FromSquareInches(double)"/>
        public static Area SquareInches(this int value) => (Area)Area.FromSquareInches(value);
	
        /// <inheritdoc cref="Area.FromSquareInches(double)"/>
        public static Area SquareInches(this long value) => (Area)Area.FromSquareInches(value);

        /// <inheritdoc cref="Area.FromSquareInches(double)"/>
        public static Area SquareInches(this double value) => (Area)Area.FromSquareInches(new Number<double, DoubleCalculator>(value));

        /// <inheritdoc cref="Area.FromSquareInches(double)"/>
        public static Area SquareInches(this float value) => (Area)Area.FromSquareInches(value);

        /// <inheritdoc cref="Area.FromSquareInches(double)"/>
        public static Area SquareInches(this decimal value) => (Area)Area.FromSquareInches(new Number<double, DoubleCalculator>(Decimal.ToDouble(value)));

        #endregion

        #region SquareKilometer

        /// <inheritdoc cref="Area.FromSquareKilometers(double)"/>
        public static Area SquareKilometers(this int value) => (Area)Area.FromSquareKilometers(value);
	
        /// <inheritdoc cref="Area.FromSquareKilometers(double)"/>
        public static Area SquareKilometers(this long value) => (Area)Area.FromSquareKilometers(value);

        /// <inheritdoc cref="Area.FromSquareKilometers(double)"/>
        public static Area SquareKilometers(this double value) => (Area)Area.FromSquareKilometers(new Number<double, DoubleCalculator>(value));

        /// <inheritdoc cref="Area.FromSquareKilometers(double)"/>
        public static Area SquareKilometers(this float value) => (Area)Area.FromSquareKilometers(value);

        /// <inheritdoc cref="Area.FromSquareKilometers(double)"/>
        public static Area SquareKilometers(this decimal value) => (Area)Area.FromSquareKilometers(new Number<double, DoubleCalculator>(Decimal.ToDouble(value)));

        #endregion

        #region SquareMeter

        /// <inheritdoc cref="Area.FromSquareMeters(double)"/>
        public static Area SquareMeters(this int value) => (Area)Area.FromSquareMeters(value);
	
        /// <inheritdoc cref="Area.FromSquareMeters(double)"/>
        public static Area SquareMeters(this long value) => (Area)Area.FromSquareMeters(value);

        /// <inheritdoc cref="Area.FromSquareMeters(double)"/>
        public static Area SquareMeters(this double value) => (Area)Area.FromSquareMeters(new Number<double, DoubleCalculator>(value));

        /// <inheritdoc cref="Area.FromSquareMeters(double)"/>
        public static Area SquareMeters(this float value) => (Area)Area.FromSquareMeters(value);

        /// <inheritdoc cref="Area.FromSquareMeters(double)"/>
        public static Area SquareMeters(this decimal value) => (Area)Area.FromSquareMeters(new Number<double, DoubleCalculator>(Decimal.ToDouble(value)));

        #endregion

        #region SquareMicrometer

        /// <inheritdoc cref="Area.FromSquareMicrometers(double)"/>
        public static Area SquareMicrometers(this int value) => (Area)Area.FromSquareMicrometers(value);
	
        /// <inheritdoc cref="Area.FromSquareMicrometers(double)"/>
        public static Area SquareMicrometers(this long value) => (Area)Area.FromSquareMicrometers(value);

        /// <inheritdoc cref="Area.FromSquareMicrometers(double)"/>
        public static Area SquareMicrometers(this double value) => (Area)Area.FromSquareMicrometers(new Number<double, DoubleCalculator>(value));

        /// <inheritdoc cref="Area.FromSquareMicrometers(double)"/>
        public static Area SquareMicrometers(this float value) => (Area)Area.FromSquareMicrometers(value);

        /// <inheritdoc cref="Area.FromSquareMicrometers(double)"/>
        public static Area SquareMicrometers(this decimal value) => (Area)Area.FromSquareMicrometers(new Number<double, DoubleCalculator>(Decimal.ToDouble(value)));

        #endregion

        #region SquareMile

        /// <inheritdoc cref="Area.FromSquareMiles(double)"/>
        public static Area SquareMiles(this int value) => (Area)Area.FromSquareMiles(value);
	
        /// <inheritdoc cref="Area.FromSquareMiles(double)"/>
        public static Area SquareMiles(this long value) => (Area)Area.FromSquareMiles(value);

        /// <inheritdoc cref="Area.FromSquareMiles(double)"/>
        public static Area SquareMiles(this double value) => (Area)Area.FromSquareMiles(new Number<double, DoubleCalculator>(value));

        /// <inheritdoc cref="Area.FromSquareMiles(double)"/>
        public static Area SquareMiles(this float value) => (Area)Area.FromSquareMiles(value);

        /// <inheritdoc cref="Area.FromSquareMiles(double)"/>
        public static Area SquareMiles(this decimal value) => (Area)Area.FromSquareMiles(new Number<double, DoubleCalculator>(Decimal.ToDouble(value)));

        #endregion

        #region SquareMillimeter

        /// <inheritdoc cref="Area.FromSquareMillimeters(double)"/>
        public static Area SquareMillimeters(this int value) => (Area)Area.FromSquareMillimeters(value);
	
        /// <inheritdoc cref="Area.FromSquareMillimeters(double)"/>
        public static Area SquareMillimeters(this long value) => (Area)Area.FromSquareMillimeters(value);

        /// <inheritdoc cref="Area.FromSquareMillimeters(double)"/>
        public static Area SquareMillimeters(this double value) => (Area)Area.FromSquareMillimeters(new Number<double, DoubleCalculator>(value));

        /// <inheritdoc cref="Area.FromSquareMillimeters(double)"/>
        public static Area SquareMillimeters(this float value) => (Area)Area.FromSquareMillimeters(value);

        /// <inheritdoc cref="Area.FromSquareMillimeters(double)"/>
        public static Area SquareMillimeters(this decimal value) => (Area)Area.FromSquareMillimeters(new Number<double, DoubleCalculator>(Decimal.ToDouble(value)));

        #endregion

        #region SquareYard

        /// <inheritdoc cref="Area.FromSquareYards(double)"/>
        public static Area SquareYards(this int value) => (Area)Area.FromSquareYards(value);
	
        /// <inheritdoc cref="Area.FromSquareYards(double)"/>
        public static Area SquareYards(this long value) => (Area)Area.FromSquareYards(value);

        /// <inheritdoc cref="Area.FromSquareYards(double)"/>
        public static Area SquareYards(this double value) => (Area)Area.FromSquareYards(new Number<double, DoubleCalculator>(value));

        /// <inheritdoc cref="Area.FromSquareYards(double)"/>
        public static Area SquareYards(this float value) => (Area)Area.FromSquareYards(value);

        /// <inheritdoc cref="Area.FromSquareYards(double)"/>
        public static Area SquareYards(this decimal value) => (Area)Area.FromSquareYards(new Number<double, DoubleCalculator>(Decimal.ToDouble(value)));

        #endregion

    }
}
#endif
