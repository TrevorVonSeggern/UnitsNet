//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by \generate-code.bat.
//
//     Changes to this file will be lost when the code is regenerated.
//     The build server regenerates the code before each build and a pre-build
//     step will regenerate the code on each local build.
//
//     See https://github.com/angularsen/UnitsNet/wiki/Adding-a-New-Unit for how to add or edit units.
//
//     Add CustomCode\Quantities\MyUnit.extra.cs files to add code to generated quantities.
//     Add Extensions\MyUnitExtensions.cs to decorate quantities with new behavior.
//     Add UnitDefinitions\MyUnit.json and run GeneratUnits.bat to generate new units or quantities.
//
// </auto-generated>
//------------------------------------------------------------------------------

// Copyright (c) 2013 Andreas Gullberg Larsen (andreas.larsen84@gmail.com).
// https://github.com/angularsen/UnitsNet
// 
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
// 
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
// 
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
// THE SOFTWARE.

using System;
using UnitsNet.InternalHelpers.Calculators;

// Windows Runtime Component does not support extension methods and method overloads: https://msdn.microsoft.com/en-us/library/br230301.aspx
#if !WINDOWS_UWP
namespace UnitsNet.Extensions.NumberToFlow
{
    public static class NumberToFlowExtensions
    {
        #region CentilitersPerMinute

        /// <inheritdoc cref="Flow.FromCentilitersPerMinute(double)"/>
        public static Flow CentilitersPerMinute(this int value) => (Flow)Flow.FromCentilitersPerMinute(value);
	
        /// <inheritdoc cref="Flow.FromCentilitersPerMinute(double)"/>
        public static Flow CentilitersPerMinute(this long value) => (Flow)Flow.FromCentilitersPerMinute(value);

        /// <inheritdoc cref="Flow.FromCentilitersPerMinute(double)"/>
        public static Flow CentilitersPerMinute(this double value) => (Flow)Flow.FromCentilitersPerMinute(new Number<double, DoubleCalculator>(value));

        /// <inheritdoc cref="Flow.FromCentilitersPerMinute(double)"/>
        public static Flow CentilitersPerMinute(this float value) => (Flow)Flow.FromCentilitersPerMinute(value);

        /// <inheritdoc cref="Flow.FromCentilitersPerMinute(double)"/>
        public static Flow CentilitersPerMinute(this decimal value) => (Flow)Flow.FromCentilitersPerMinute(new Number<double, DoubleCalculator>(Decimal.ToDouble(value)));

        #endregion

        #region CubicDecimeterPerMinute

        /// <inheritdoc cref="Flow.FromCubicDecimetersPerMinute(double)"/>
        public static Flow CubicDecimetersPerMinute(this int value) => (Flow)Flow.FromCubicDecimetersPerMinute(value);
	
        /// <inheritdoc cref="Flow.FromCubicDecimetersPerMinute(double)"/>
        public static Flow CubicDecimetersPerMinute(this long value) => (Flow)Flow.FromCubicDecimetersPerMinute(value);

        /// <inheritdoc cref="Flow.FromCubicDecimetersPerMinute(double)"/>
        public static Flow CubicDecimetersPerMinute(this double value) => (Flow)Flow.FromCubicDecimetersPerMinute(new Number<double, DoubleCalculator>(value));

        /// <inheritdoc cref="Flow.FromCubicDecimetersPerMinute(double)"/>
        public static Flow CubicDecimetersPerMinute(this float value) => (Flow)Flow.FromCubicDecimetersPerMinute(value);

        /// <inheritdoc cref="Flow.FromCubicDecimetersPerMinute(double)"/>
        public static Flow CubicDecimetersPerMinute(this decimal value) => (Flow)Flow.FromCubicDecimetersPerMinute(new Number<double, DoubleCalculator>(Decimal.ToDouble(value)));

        #endregion

        #region CubicFootPerHour

        /// <inheritdoc cref="Flow.FromCubicFeetPerHour(double)"/>
        public static Flow CubicFeetPerHour(this int value) => (Flow)Flow.FromCubicFeetPerHour(value);
	
        /// <inheritdoc cref="Flow.FromCubicFeetPerHour(double)"/>
        public static Flow CubicFeetPerHour(this long value) => (Flow)Flow.FromCubicFeetPerHour(value);

        /// <inheritdoc cref="Flow.FromCubicFeetPerHour(double)"/>
        public static Flow CubicFeetPerHour(this double value) => (Flow)Flow.FromCubicFeetPerHour(new Number<double, DoubleCalculator>(value));

        /// <inheritdoc cref="Flow.FromCubicFeetPerHour(double)"/>
        public static Flow CubicFeetPerHour(this float value) => (Flow)Flow.FromCubicFeetPerHour(value);

        /// <inheritdoc cref="Flow.FromCubicFeetPerHour(double)"/>
        public static Flow CubicFeetPerHour(this decimal value) => (Flow)Flow.FromCubicFeetPerHour(new Number<double, DoubleCalculator>(Decimal.ToDouble(value)));

        #endregion

        #region CubicFootPerSecond

        /// <inheritdoc cref="Flow.FromCubicFeetPerSecond(double)"/>
        public static Flow CubicFeetPerSecond(this int value) => (Flow)Flow.FromCubicFeetPerSecond(value);
	
        /// <inheritdoc cref="Flow.FromCubicFeetPerSecond(double)"/>
        public static Flow CubicFeetPerSecond(this long value) => (Flow)Flow.FromCubicFeetPerSecond(value);

        /// <inheritdoc cref="Flow.FromCubicFeetPerSecond(double)"/>
        public static Flow CubicFeetPerSecond(this double value) => (Flow)Flow.FromCubicFeetPerSecond(new Number<double, DoubleCalculator>(value));

        /// <inheritdoc cref="Flow.FromCubicFeetPerSecond(double)"/>
        public static Flow CubicFeetPerSecond(this float value) => (Flow)Flow.FromCubicFeetPerSecond(value);

        /// <inheritdoc cref="Flow.FromCubicFeetPerSecond(double)"/>
        public static Flow CubicFeetPerSecond(this decimal value) => (Flow)Flow.FromCubicFeetPerSecond(new Number<double, DoubleCalculator>(Decimal.ToDouble(value)));

        #endregion

        #region CubicMeterPerHour

        /// <inheritdoc cref="Flow.FromCubicMetersPerHour(double)"/>
        public static Flow CubicMetersPerHour(this int value) => (Flow)Flow.FromCubicMetersPerHour(value);
	
        /// <inheritdoc cref="Flow.FromCubicMetersPerHour(double)"/>
        public static Flow CubicMetersPerHour(this long value) => (Flow)Flow.FromCubicMetersPerHour(value);

        /// <inheritdoc cref="Flow.FromCubicMetersPerHour(double)"/>
        public static Flow CubicMetersPerHour(this double value) => (Flow)Flow.FromCubicMetersPerHour(new Number<double, DoubleCalculator>(value));

        /// <inheritdoc cref="Flow.FromCubicMetersPerHour(double)"/>
        public static Flow CubicMetersPerHour(this float value) => (Flow)Flow.FromCubicMetersPerHour(value);

        /// <inheritdoc cref="Flow.FromCubicMetersPerHour(double)"/>
        public static Flow CubicMetersPerHour(this decimal value) => (Flow)Flow.FromCubicMetersPerHour(new Number<double, DoubleCalculator>(Decimal.ToDouble(value)));

        #endregion

        #region CubicMeterPerSecond

        /// <inheritdoc cref="Flow.FromCubicMetersPerSecond(double)"/>
        public static Flow CubicMetersPerSecond(this int value) => (Flow)Flow.FromCubicMetersPerSecond(value);
	
        /// <inheritdoc cref="Flow.FromCubicMetersPerSecond(double)"/>
        public static Flow CubicMetersPerSecond(this long value) => (Flow)Flow.FromCubicMetersPerSecond(value);

        /// <inheritdoc cref="Flow.FromCubicMetersPerSecond(double)"/>
        public static Flow CubicMetersPerSecond(this double value) => (Flow)Flow.FromCubicMetersPerSecond(new Number<double, DoubleCalculator>(value));

        /// <inheritdoc cref="Flow.FromCubicMetersPerSecond(double)"/>
        public static Flow CubicMetersPerSecond(this float value) => (Flow)Flow.FromCubicMetersPerSecond(value);

        /// <inheritdoc cref="Flow.FromCubicMetersPerSecond(double)"/>
        public static Flow CubicMetersPerSecond(this decimal value) => (Flow)Flow.FromCubicMetersPerSecond(new Number<double, DoubleCalculator>(Decimal.ToDouble(value)));

        #endregion

        #region DecilitersPerMinute

        /// <inheritdoc cref="Flow.FromDecilitersPerMinute(double)"/>
        public static Flow DecilitersPerMinute(this int value) => (Flow)Flow.FromDecilitersPerMinute(value);
	
        /// <inheritdoc cref="Flow.FromDecilitersPerMinute(double)"/>
        public static Flow DecilitersPerMinute(this long value) => (Flow)Flow.FromDecilitersPerMinute(value);

        /// <inheritdoc cref="Flow.FromDecilitersPerMinute(double)"/>
        public static Flow DecilitersPerMinute(this double value) => (Flow)Flow.FromDecilitersPerMinute(new Number<double, DoubleCalculator>(value));

        /// <inheritdoc cref="Flow.FromDecilitersPerMinute(double)"/>
        public static Flow DecilitersPerMinute(this float value) => (Flow)Flow.FromDecilitersPerMinute(value);

        /// <inheritdoc cref="Flow.FromDecilitersPerMinute(double)"/>
        public static Flow DecilitersPerMinute(this decimal value) => (Flow)Flow.FromDecilitersPerMinute(new Number<double, DoubleCalculator>(Decimal.ToDouble(value)));

        #endregion

        #region KilolitersPerMinute

        /// <inheritdoc cref="Flow.FromKilolitersPerMinute(double)"/>
        public static Flow KilolitersPerMinute(this int value) => (Flow)Flow.FromKilolitersPerMinute(value);
	
        /// <inheritdoc cref="Flow.FromKilolitersPerMinute(double)"/>
        public static Flow KilolitersPerMinute(this long value) => (Flow)Flow.FromKilolitersPerMinute(value);

        /// <inheritdoc cref="Flow.FromKilolitersPerMinute(double)"/>
        public static Flow KilolitersPerMinute(this double value) => (Flow)Flow.FromKilolitersPerMinute(new Number<double, DoubleCalculator>(value));

        /// <inheritdoc cref="Flow.FromKilolitersPerMinute(double)"/>
        public static Flow KilolitersPerMinute(this float value) => (Flow)Flow.FromKilolitersPerMinute(value);

        /// <inheritdoc cref="Flow.FromKilolitersPerMinute(double)"/>
        public static Flow KilolitersPerMinute(this decimal value) => (Flow)Flow.FromKilolitersPerMinute(new Number<double, DoubleCalculator>(Decimal.ToDouble(value)));

        #endregion

        #region LitersPerHour

        /// <inheritdoc cref="Flow.FromLitersPerHour(double)"/>
        public static Flow LitersPerHour(this int value) => (Flow)Flow.FromLitersPerHour(value);
	
        /// <inheritdoc cref="Flow.FromLitersPerHour(double)"/>
        public static Flow LitersPerHour(this long value) => (Flow)Flow.FromLitersPerHour(value);

        /// <inheritdoc cref="Flow.FromLitersPerHour(double)"/>
        public static Flow LitersPerHour(this double value) => (Flow)Flow.FromLitersPerHour(new Number<double, DoubleCalculator>(value));

        /// <inheritdoc cref="Flow.FromLitersPerHour(double)"/>
        public static Flow LitersPerHour(this float value) => (Flow)Flow.FromLitersPerHour(value);

        /// <inheritdoc cref="Flow.FromLitersPerHour(double)"/>
        public static Flow LitersPerHour(this decimal value) => (Flow)Flow.FromLitersPerHour(new Number<double, DoubleCalculator>(Decimal.ToDouble(value)));

        #endregion

        #region LitersPerMinute

        /// <inheritdoc cref="Flow.FromLitersPerMinute(double)"/>
        public static Flow LitersPerMinute(this int value) => (Flow)Flow.FromLitersPerMinute(value);
	
        /// <inheritdoc cref="Flow.FromLitersPerMinute(double)"/>
        public static Flow LitersPerMinute(this long value) => (Flow)Flow.FromLitersPerMinute(value);

        /// <inheritdoc cref="Flow.FromLitersPerMinute(double)"/>
        public static Flow LitersPerMinute(this double value) => (Flow)Flow.FromLitersPerMinute(new Number<double, DoubleCalculator>(value));

        /// <inheritdoc cref="Flow.FromLitersPerMinute(double)"/>
        public static Flow LitersPerMinute(this float value) => (Flow)Flow.FromLitersPerMinute(value);

        /// <inheritdoc cref="Flow.FromLitersPerMinute(double)"/>
        public static Flow LitersPerMinute(this decimal value) => (Flow)Flow.FromLitersPerMinute(new Number<double, DoubleCalculator>(Decimal.ToDouble(value)));

        #endregion

        #region LitersPerSecond

        /// <inheritdoc cref="Flow.FromLitersPerSecond(double)"/>
        public static Flow LitersPerSecond(this int value) => (Flow)Flow.FromLitersPerSecond(value);
	
        /// <inheritdoc cref="Flow.FromLitersPerSecond(double)"/>
        public static Flow LitersPerSecond(this long value) => (Flow)Flow.FromLitersPerSecond(value);

        /// <inheritdoc cref="Flow.FromLitersPerSecond(double)"/>
        public static Flow LitersPerSecond(this double value) => (Flow)Flow.FromLitersPerSecond(new Number<double, DoubleCalculator>(value));

        /// <inheritdoc cref="Flow.FromLitersPerSecond(double)"/>
        public static Flow LitersPerSecond(this float value) => (Flow)Flow.FromLitersPerSecond(value);

        /// <inheritdoc cref="Flow.FromLitersPerSecond(double)"/>
        public static Flow LitersPerSecond(this decimal value) => (Flow)Flow.FromLitersPerSecond(new Number<double, DoubleCalculator>(Decimal.ToDouble(value)));

        #endregion

        #region MicrolitersPerMinute

        /// <inheritdoc cref="Flow.FromMicrolitersPerMinute(double)"/>
        public static Flow MicrolitersPerMinute(this int value) => (Flow)Flow.FromMicrolitersPerMinute(value);
	
        /// <inheritdoc cref="Flow.FromMicrolitersPerMinute(double)"/>
        public static Flow MicrolitersPerMinute(this long value) => (Flow)Flow.FromMicrolitersPerMinute(value);

        /// <inheritdoc cref="Flow.FromMicrolitersPerMinute(double)"/>
        public static Flow MicrolitersPerMinute(this double value) => (Flow)Flow.FromMicrolitersPerMinute(new Number<double, DoubleCalculator>(value));

        /// <inheritdoc cref="Flow.FromMicrolitersPerMinute(double)"/>
        public static Flow MicrolitersPerMinute(this float value) => (Flow)Flow.FromMicrolitersPerMinute(value);

        /// <inheritdoc cref="Flow.FromMicrolitersPerMinute(double)"/>
        public static Flow MicrolitersPerMinute(this decimal value) => (Flow)Flow.FromMicrolitersPerMinute(new Number<double, DoubleCalculator>(Decimal.ToDouble(value)));

        #endregion

        #region MillilitersPerMinute

        /// <inheritdoc cref="Flow.FromMillilitersPerMinute(double)"/>
        public static Flow MillilitersPerMinute(this int value) => (Flow)Flow.FromMillilitersPerMinute(value);
	
        /// <inheritdoc cref="Flow.FromMillilitersPerMinute(double)"/>
        public static Flow MillilitersPerMinute(this long value) => (Flow)Flow.FromMillilitersPerMinute(value);

        /// <inheritdoc cref="Flow.FromMillilitersPerMinute(double)"/>
        public static Flow MillilitersPerMinute(this double value) => (Flow)Flow.FromMillilitersPerMinute(new Number<double, DoubleCalculator>(value));

        /// <inheritdoc cref="Flow.FromMillilitersPerMinute(double)"/>
        public static Flow MillilitersPerMinute(this float value) => (Flow)Flow.FromMillilitersPerMinute(value);

        /// <inheritdoc cref="Flow.FromMillilitersPerMinute(double)"/>
        public static Flow MillilitersPerMinute(this decimal value) => (Flow)Flow.FromMillilitersPerMinute(new Number<double, DoubleCalculator>(Decimal.ToDouble(value)));

        #endregion

        #region MillionUsGallonsPerDay

        /// <inheritdoc cref="Flow.FromMillionUsGallonsPerDay(double)"/>
        public static Flow MillionUsGallonsPerDay(this int value) => (Flow)Flow.FromMillionUsGallonsPerDay(value);
	
        /// <inheritdoc cref="Flow.FromMillionUsGallonsPerDay(double)"/>
        public static Flow MillionUsGallonsPerDay(this long value) => (Flow)Flow.FromMillionUsGallonsPerDay(value);

        /// <inheritdoc cref="Flow.FromMillionUsGallonsPerDay(double)"/>
        public static Flow MillionUsGallonsPerDay(this double value) => (Flow)Flow.FromMillionUsGallonsPerDay(new Number<double, DoubleCalculator>(value));

        /// <inheritdoc cref="Flow.FromMillionUsGallonsPerDay(double)"/>
        public static Flow MillionUsGallonsPerDay(this float value) => (Flow)Flow.FromMillionUsGallonsPerDay(value);

        /// <inheritdoc cref="Flow.FromMillionUsGallonsPerDay(double)"/>
        public static Flow MillionUsGallonsPerDay(this decimal value) => (Flow)Flow.FromMillionUsGallonsPerDay(new Number<double, DoubleCalculator>(Decimal.ToDouble(value)));

        #endregion

        #region NanolitersPerMinute

        /// <inheritdoc cref="Flow.FromNanolitersPerMinute(double)"/>
        public static Flow NanolitersPerMinute(this int value) => (Flow)Flow.FromNanolitersPerMinute(value);
	
        /// <inheritdoc cref="Flow.FromNanolitersPerMinute(double)"/>
        public static Flow NanolitersPerMinute(this long value) => (Flow)Flow.FromNanolitersPerMinute(value);

        /// <inheritdoc cref="Flow.FromNanolitersPerMinute(double)"/>
        public static Flow NanolitersPerMinute(this double value) => (Flow)Flow.FromNanolitersPerMinute(new Number<double, DoubleCalculator>(value));

        /// <inheritdoc cref="Flow.FromNanolitersPerMinute(double)"/>
        public static Flow NanolitersPerMinute(this float value) => (Flow)Flow.FromNanolitersPerMinute(value);

        /// <inheritdoc cref="Flow.FromNanolitersPerMinute(double)"/>
        public static Flow NanolitersPerMinute(this decimal value) => (Flow)Flow.FromNanolitersPerMinute(new Number<double, DoubleCalculator>(Decimal.ToDouble(value)));

        #endregion

        #region OilBarrelsPerDay

        /// <inheritdoc cref="Flow.FromOilBarrelsPerDay(double)"/>
        public static Flow OilBarrelsPerDay(this int value) => (Flow)Flow.FromOilBarrelsPerDay(value);
	
        /// <inheritdoc cref="Flow.FromOilBarrelsPerDay(double)"/>
        public static Flow OilBarrelsPerDay(this long value) => (Flow)Flow.FromOilBarrelsPerDay(value);

        /// <inheritdoc cref="Flow.FromOilBarrelsPerDay(double)"/>
        public static Flow OilBarrelsPerDay(this double value) => (Flow)Flow.FromOilBarrelsPerDay(new Number<double, DoubleCalculator>(value));

        /// <inheritdoc cref="Flow.FromOilBarrelsPerDay(double)"/>
        public static Flow OilBarrelsPerDay(this float value) => (Flow)Flow.FromOilBarrelsPerDay(value);

        /// <inheritdoc cref="Flow.FromOilBarrelsPerDay(double)"/>
        public static Flow OilBarrelsPerDay(this decimal value) => (Flow)Flow.FromOilBarrelsPerDay(new Number<double, DoubleCalculator>(Decimal.ToDouble(value)));

        #endregion

        #region UsGallonsPerMinute

        /// <inheritdoc cref="Flow.FromUsGallonsPerMinute(double)"/>
        public static Flow UsGallonsPerMinute(this int value) => (Flow)Flow.FromUsGallonsPerMinute(value);
	
        /// <inheritdoc cref="Flow.FromUsGallonsPerMinute(double)"/>
        public static Flow UsGallonsPerMinute(this long value) => (Flow)Flow.FromUsGallonsPerMinute(value);

        /// <inheritdoc cref="Flow.FromUsGallonsPerMinute(double)"/>
        public static Flow UsGallonsPerMinute(this double value) => (Flow)Flow.FromUsGallonsPerMinute(new Number<double, DoubleCalculator>(value));

        /// <inheritdoc cref="Flow.FromUsGallonsPerMinute(double)"/>
        public static Flow UsGallonsPerMinute(this float value) => (Flow)Flow.FromUsGallonsPerMinute(value);

        /// <inheritdoc cref="Flow.FromUsGallonsPerMinute(double)"/>
        public static Flow UsGallonsPerMinute(this decimal value) => (Flow)Flow.FromUsGallonsPerMinute(new Number<double, DoubleCalculator>(Decimal.ToDouble(value)));

        #endregion

    }
}
#endif
