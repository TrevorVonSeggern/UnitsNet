//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by \generate-code.bat.
//
//     Changes to this file will be lost when the code is regenerated.
//     The build server regenerates the code before each build and a pre-build
//     step will regenerate the code on each local build.
//
//     See https://github.com/angularsen/UnitsNet/wiki/Adding-a-New-Unit for how to add or edit units.
//
//     Add CustomCode\Quantities\MyUnit.extra.cs files to add code to generated quantities.
//     Add Extensions\MyUnitExtensions.cs to decorate quantities with new behavior.
//     Add UnitDefinitions\MyUnit.json and run GeneratUnits.bat to generate new units or quantities.
//
// </auto-generated>
//------------------------------------------------------------------------------

// Copyright (c) 2013 Andreas Gullberg Larsen (andreas.larsen84@gmail.com).
// https://github.com/angularsen/UnitsNet
// 
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
// 
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
// 
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
// THE SOFTWARE.

using System;
using UnitsNet.InternalHelpers.Calculators;

// Windows Runtime Component does not support extension methods and method overloads: https://msdn.microsoft.com/en-us/library/br230301.aspx
#if !WINDOWS_UWP
namespace UnitsNet.Extensions.NumberToElectricCurrent
{
    public static class NumberToElectricCurrentExtensions
    {
        #region Ampere

        /// <inheritdoc cref="ElectricCurrent.FromAmperes(double)"/>
        public static ElectricCurrent Amperes(this int value) => (ElectricCurrent)ElectricCurrent.FromAmperes(value);
	
        /// <inheritdoc cref="ElectricCurrent.FromAmperes(double)"/>
        public static ElectricCurrent Amperes(this long value) => (ElectricCurrent)ElectricCurrent.FromAmperes(value);

        /// <inheritdoc cref="ElectricCurrent.FromAmperes(double)"/>
        public static ElectricCurrent Amperes(this double value) => (ElectricCurrent)ElectricCurrent.FromAmperes(new Number<double, DoubleCalculator>(value));

        /// <inheritdoc cref="ElectricCurrent.FromAmperes(double)"/>
        public static ElectricCurrent Amperes(this float value) => (ElectricCurrent)ElectricCurrent.FromAmperes(value);

        /// <inheritdoc cref="ElectricCurrent.FromAmperes(double)"/>
        public static ElectricCurrent Amperes(this decimal value) => (ElectricCurrent)ElectricCurrent.FromAmperes(new Number<double, DoubleCalculator>(Decimal.ToDouble(value)));

        #endregion

        #region Kiloampere

        /// <inheritdoc cref="ElectricCurrent.FromKiloamperes(double)"/>
        public static ElectricCurrent Kiloamperes(this int value) => (ElectricCurrent)ElectricCurrent.FromKiloamperes(value);
	
        /// <inheritdoc cref="ElectricCurrent.FromKiloamperes(double)"/>
        public static ElectricCurrent Kiloamperes(this long value) => (ElectricCurrent)ElectricCurrent.FromKiloamperes(value);

        /// <inheritdoc cref="ElectricCurrent.FromKiloamperes(double)"/>
        public static ElectricCurrent Kiloamperes(this double value) => (ElectricCurrent)ElectricCurrent.FromKiloamperes(new Number<double, DoubleCalculator>(value));

        /// <inheritdoc cref="ElectricCurrent.FromKiloamperes(double)"/>
        public static ElectricCurrent Kiloamperes(this float value) => (ElectricCurrent)ElectricCurrent.FromKiloamperes(value);

        /// <inheritdoc cref="ElectricCurrent.FromKiloamperes(double)"/>
        public static ElectricCurrent Kiloamperes(this decimal value) => (ElectricCurrent)ElectricCurrent.FromKiloamperes(new Number<double, DoubleCalculator>(Decimal.ToDouble(value)));

        #endregion

        #region Megaampere

        /// <inheritdoc cref="ElectricCurrent.FromMegaamperes(double)"/>
        public static ElectricCurrent Megaamperes(this int value) => (ElectricCurrent)ElectricCurrent.FromMegaamperes(value);
	
        /// <inheritdoc cref="ElectricCurrent.FromMegaamperes(double)"/>
        public static ElectricCurrent Megaamperes(this long value) => (ElectricCurrent)ElectricCurrent.FromMegaamperes(value);

        /// <inheritdoc cref="ElectricCurrent.FromMegaamperes(double)"/>
        public static ElectricCurrent Megaamperes(this double value) => (ElectricCurrent)ElectricCurrent.FromMegaamperes(new Number<double, DoubleCalculator>(value));

        /// <inheritdoc cref="ElectricCurrent.FromMegaamperes(double)"/>
        public static ElectricCurrent Megaamperes(this float value) => (ElectricCurrent)ElectricCurrent.FromMegaamperes(value);

        /// <inheritdoc cref="ElectricCurrent.FromMegaamperes(double)"/>
        public static ElectricCurrent Megaamperes(this decimal value) => (ElectricCurrent)ElectricCurrent.FromMegaamperes(new Number<double, DoubleCalculator>(Decimal.ToDouble(value)));

        #endregion

        #region Microampere

        /// <inheritdoc cref="ElectricCurrent.FromMicroamperes(double)"/>
        public static ElectricCurrent Microamperes(this int value) => (ElectricCurrent)ElectricCurrent.FromMicroamperes(value);
	
        /// <inheritdoc cref="ElectricCurrent.FromMicroamperes(double)"/>
        public static ElectricCurrent Microamperes(this long value) => (ElectricCurrent)ElectricCurrent.FromMicroamperes(value);

        /// <inheritdoc cref="ElectricCurrent.FromMicroamperes(double)"/>
        public static ElectricCurrent Microamperes(this double value) => (ElectricCurrent)ElectricCurrent.FromMicroamperes(new Number<double, DoubleCalculator>(value));

        /// <inheritdoc cref="ElectricCurrent.FromMicroamperes(double)"/>
        public static ElectricCurrent Microamperes(this float value) => (ElectricCurrent)ElectricCurrent.FromMicroamperes(value);

        /// <inheritdoc cref="ElectricCurrent.FromMicroamperes(double)"/>
        public static ElectricCurrent Microamperes(this decimal value) => (ElectricCurrent)ElectricCurrent.FromMicroamperes(new Number<double, DoubleCalculator>(Decimal.ToDouble(value)));

        #endregion

        #region Milliampere

        /// <inheritdoc cref="ElectricCurrent.FromMilliamperes(double)"/>
        public static ElectricCurrent Milliamperes(this int value) => (ElectricCurrent)ElectricCurrent.FromMilliamperes(value);
	
        /// <inheritdoc cref="ElectricCurrent.FromMilliamperes(double)"/>
        public static ElectricCurrent Milliamperes(this long value) => (ElectricCurrent)ElectricCurrent.FromMilliamperes(value);

        /// <inheritdoc cref="ElectricCurrent.FromMilliamperes(double)"/>
        public static ElectricCurrent Milliamperes(this double value) => (ElectricCurrent)ElectricCurrent.FromMilliamperes(new Number<double, DoubleCalculator>(value));

        /// <inheritdoc cref="ElectricCurrent.FromMilliamperes(double)"/>
        public static ElectricCurrent Milliamperes(this float value) => (ElectricCurrent)ElectricCurrent.FromMilliamperes(value);

        /// <inheritdoc cref="ElectricCurrent.FromMilliamperes(double)"/>
        public static ElectricCurrent Milliamperes(this decimal value) => (ElectricCurrent)ElectricCurrent.FromMilliamperes(new Number<double, DoubleCalculator>(Decimal.ToDouble(value)));

        #endregion

        #region Nanoampere

        /// <inheritdoc cref="ElectricCurrent.FromNanoamperes(double)"/>
        public static ElectricCurrent Nanoamperes(this int value) => (ElectricCurrent)ElectricCurrent.FromNanoamperes(value);
	
        /// <inheritdoc cref="ElectricCurrent.FromNanoamperes(double)"/>
        public static ElectricCurrent Nanoamperes(this long value) => (ElectricCurrent)ElectricCurrent.FromNanoamperes(value);

        /// <inheritdoc cref="ElectricCurrent.FromNanoamperes(double)"/>
        public static ElectricCurrent Nanoamperes(this double value) => (ElectricCurrent)ElectricCurrent.FromNanoamperes(new Number<double, DoubleCalculator>(value));

        /// <inheritdoc cref="ElectricCurrent.FromNanoamperes(double)"/>
        public static ElectricCurrent Nanoamperes(this float value) => (ElectricCurrent)ElectricCurrent.FromNanoamperes(value);

        /// <inheritdoc cref="ElectricCurrent.FromNanoamperes(double)"/>
        public static ElectricCurrent Nanoamperes(this decimal value) => (ElectricCurrent)ElectricCurrent.FromNanoamperes(new Number<double, DoubleCalculator>(Decimal.ToDouble(value)));

        #endregion

        #region Picoampere

        /// <inheritdoc cref="ElectricCurrent.FromPicoamperes(double)"/>
        public static ElectricCurrent Picoamperes(this int value) => (ElectricCurrent)ElectricCurrent.FromPicoamperes(value);
	
        /// <inheritdoc cref="ElectricCurrent.FromPicoamperes(double)"/>
        public static ElectricCurrent Picoamperes(this long value) => (ElectricCurrent)ElectricCurrent.FromPicoamperes(value);

        /// <inheritdoc cref="ElectricCurrent.FromPicoamperes(double)"/>
        public static ElectricCurrent Picoamperes(this double value) => (ElectricCurrent)ElectricCurrent.FromPicoamperes(new Number<double, DoubleCalculator>(value));

        /// <inheritdoc cref="ElectricCurrent.FromPicoamperes(double)"/>
        public static ElectricCurrent Picoamperes(this float value) => (ElectricCurrent)ElectricCurrent.FromPicoamperes(value);

        /// <inheritdoc cref="ElectricCurrent.FromPicoamperes(double)"/>
        public static ElectricCurrent Picoamperes(this decimal value) => (ElectricCurrent)ElectricCurrent.FromPicoamperes(new Number<double, DoubleCalculator>(Decimal.ToDouble(value)));

        #endregion

    }
}
#endif
