//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by \generate-code.bat.
//
//     Changes to this file will be lost when the code is regenerated.
//     The build server regenerates the code before each build and a pre-build
//     step will regenerate the code on each local build.
//
//     See https://github.com/angularsen/UnitsNet/wiki/Adding-a-New-Unit for how to add or edit units.
//
//     Add CustomCode\Quantities\MyUnit.extra.cs files to add code to generated quantities.
//     Add Extensions\MyUnitExtensions.cs to decorate quantities with new behavior.
//     Add UnitDefinitions\MyUnit.json and run GeneratUnits.bat to generate new units or quantities.
//
// </auto-generated>
//------------------------------------------------------------------------------

// Copyright (c) 2013 Andreas Gullberg Larsen (andreas.larsen84@gmail.com).
// https://github.com/angularsen/UnitsNet
// 
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
// 
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
// 
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
// THE SOFTWARE.

using System;
using UnitsNet.InternalHelpers.Calculators;

// Windows Runtime Component does not support extension methods and method overloads: https://msdn.microsoft.com/en-us/library/br230301.aspx
#if !WINDOWS_UWP
namespace UnitsNet.Extensions.NumberToAmountOfSubstance
{
    public static class NumberToAmountOfSubstanceExtensions
    {
        #region Centimole

        /// <inheritdoc cref="AmountOfSubstance.FromCentimoles(double)"/>
        public static AmountOfSubstance Centimoles(this int value) => (AmountOfSubstance)AmountOfSubstance.FromCentimoles(value);
	
        /// <inheritdoc cref="AmountOfSubstance.FromCentimoles(double)"/>
        public static AmountOfSubstance Centimoles(this long value) => (AmountOfSubstance)AmountOfSubstance.FromCentimoles(value);

        /// <inheritdoc cref="AmountOfSubstance.FromCentimoles(double)"/>
        public static AmountOfSubstance Centimoles(this double value) => (AmountOfSubstance)AmountOfSubstance.FromCentimoles(new Number<double, DoubleCalculator>(value));

        /// <inheritdoc cref="AmountOfSubstance.FromCentimoles(double)"/>
        public static AmountOfSubstance Centimoles(this float value) => (AmountOfSubstance)AmountOfSubstance.FromCentimoles(value);

        /// <inheritdoc cref="AmountOfSubstance.FromCentimoles(double)"/>
        public static AmountOfSubstance Centimoles(this decimal value) => (AmountOfSubstance)AmountOfSubstance.FromCentimoles(new Number<double, DoubleCalculator>(Decimal.ToDouble(value)));

        #endregion

        #region CentipoundMole

        /// <inheritdoc cref="AmountOfSubstance.FromCentipoundMoles(double)"/>
        public static AmountOfSubstance CentipoundMoles(this int value) => (AmountOfSubstance)AmountOfSubstance.FromCentipoundMoles(value);
	
        /// <inheritdoc cref="AmountOfSubstance.FromCentipoundMoles(double)"/>
        public static AmountOfSubstance CentipoundMoles(this long value) => (AmountOfSubstance)AmountOfSubstance.FromCentipoundMoles(value);

        /// <inheritdoc cref="AmountOfSubstance.FromCentipoundMoles(double)"/>
        public static AmountOfSubstance CentipoundMoles(this double value) => (AmountOfSubstance)AmountOfSubstance.FromCentipoundMoles(new Number<double, DoubleCalculator>(value));

        /// <inheritdoc cref="AmountOfSubstance.FromCentipoundMoles(double)"/>
        public static AmountOfSubstance CentipoundMoles(this float value) => (AmountOfSubstance)AmountOfSubstance.FromCentipoundMoles(value);

        /// <inheritdoc cref="AmountOfSubstance.FromCentipoundMoles(double)"/>
        public static AmountOfSubstance CentipoundMoles(this decimal value) => (AmountOfSubstance)AmountOfSubstance.FromCentipoundMoles(new Number<double, DoubleCalculator>(Decimal.ToDouble(value)));

        #endregion

        #region Decimole

        /// <inheritdoc cref="AmountOfSubstance.FromDecimoles(double)"/>
        public static AmountOfSubstance Decimoles(this int value) => (AmountOfSubstance)AmountOfSubstance.FromDecimoles(value);
	
        /// <inheritdoc cref="AmountOfSubstance.FromDecimoles(double)"/>
        public static AmountOfSubstance Decimoles(this long value) => (AmountOfSubstance)AmountOfSubstance.FromDecimoles(value);

        /// <inheritdoc cref="AmountOfSubstance.FromDecimoles(double)"/>
        public static AmountOfSubstance Decimoles(this double value) => (AmountOfSubstance)AmountOfSubstance.FromDecimoles(new Number<double, DoubleCalculator>(value));

        /// <inheritdoc cref="AmountOfSubstance.FromDecimoles(double)"/>
        public static AmountOfSubstance Decimoles(this float value) => (AmountOfSubstance)AmountOfSubstance.FromDecimoles(value);

        /// <inheritdoc cref="AmountOfSubstance.FromDecimoles(double)"/>
        public static AmountOfSubstance Decimoles(this decimal value) => (AmountOfSubstance)AmountOfSubstance.FromDecimoles(new Number<double, DoubleCalculator>(Decimal.ToDouble(value)));

        #endregion

        #region DecipoundMole

        /// <inheritdoc cref="AmountOfSubstance.FromDecipoundMoles(double)"/>
        public static AmountOfSubstance DecipoundMoles(this int value) => (AmountOfSubstance)AmountOfSubstance.FromDecipoundMoles(value);
	
        /// <inheritdoc cref="AmountOfSubstance.FromDecipoundMoles(double)"/>
        public static AmountOfSubstance DecipoundMoles(this long value) => (AmountOfSubstance)AmountOfSubstance.FromDecipoundMoles(value);

        /// <inheritdoc cref="AmountOfSubstance.FromDecipoundMoles(double)"/>
        public static AmountOfSubstance DecipoundMoles(this double value) => (AmountOfSubstance)AmountOfSubstance.FromDecipoundMoles(new Number<double, DoubleCalculator>(value));

        /// <inheritdoc cref="AmountOfSubstance.FromDecipoundMoles(double)"/>
        public static AmountOfSubstance DecipoundMoles(this float value) => (AmountOfSubstance)AmountOfSubstance.FromDecipoundMoles(value);

        /// <inheritdoc cref="AmountOfSubstance.FromDecipoundMoles(double)"/>
        public static AmountOfSubstance DecipoundMoles(this decimal value) => (AmountOfSubstance)AmountOfSubstance.FromDecipoundMoles(new Number<double, DoubleCalculator>(Decimal.ToDouble(value)));

        #endregion

        #region Kilomole

        /// <inheritdoc cref="AmountOfSubstance.FromKilomoles(double)"/>
        public static AmountOfSubstance Kilomoles(this int value) => (AmountOfSubstance)AmountOfSubstance.FromKilomoles(value);
	
        /// <inheritdoc cref="AmountOfSubstance.FromKilomoles(double)"/>
        public static AmountOfSubstance Kilomoles(this long value) => (AmountOfSubstance)AmountOfSubstance.FromKilomoles(value);

        /// <inheritdoc cref="AmountOfSubstance.FromKilomoles(double)"/>
        public static AmountOfSubstance Kilomoles(this double value) => (AmountOfSubstance)AmountOfSubstance.FromKilomoles(new Number<double, DoubleCalculator>(value));

        /// <inheritdoc cref="AmountOfSubstance.FromKilomoles(double)"/>
        public static AmountOfSubstance Kilomoles(this float value) => (AmountOfSubstance)AmountOfSubstance.FromKilomoles(value);

        /// <inheritdoc cref="AmountOfSubstance.FromKilomoles(double)"/>
        public static AmountOfSubstance Kilomoles(this decimal value) => (AmountOfSubstance)AmountOfSubstance.FromKilomoles(new Number<double, DoubleCalculator>(Decimal.ToDouble(value)));

        #endregion

        #region KilopoundMole

        /// <inheritdoc cref="AmountOfSubstance.FromKilopoundMoles(double)"/>
        public static AmountOfSubstance KilopoundMoles(this int value) => (AmountOfSubstance)AmountOfSubstance.FromKilopoundMoles(value);
	
        /// <inheritdoc cref="AmountOfSubstance.FromKilopoundMoles(double)"/>
        public static AmountOfSubstance KilopoundMoles(this long value) => (AmountOfSubstance)AmountOfSubstance.FromKilopoundMoles(value);

        /// <inheritdoc cref="AmountOfSubstance.FromKilopoundMoles(double)"/>
        public static AmountOfSubstance KilopoundMoles(this double value) => (AmountOfSubstance)AmountOfSubstance.FromKilopoundMoles(new Number<double, DoubleCalculator>(value));

        /// <inheritdoc cref="AmountOfSubstance.FromKilopoundMoles(double)"/>
        public static AmountOfSubstance KilopoundMoles(this float value) => (AmountOfSubstance)AmountOfSubstance.FromKilopoundMoles(value);

        /// <inheritdoc cref="AmountOfSubstance.FromKilopoundMoles(double)"/>
        public static AmountOfSubstance KilopoundMoles(this decimal value) => (AmountOfSubstance)AmountOfSubstance.FromKilopoundMoles(new Number<double, DoubleCalculator>(Decimal.ToDouble(value)));

        #endregion

        #region Micromole

        /// <inheritdoc cref="AmountOfSubstance.FromMicromoles(double)"/>
        public static AmountOfSubstance Micromoles(this int value) => (AmountOfSubstance)AmountOfSubstance.FromMicromoles(value);
	
        /// <inheritdoc cref="AmountOfSubstance.FromMicromoles(double)"/>
        public static AmountOfSubstance Micromoles(this long value) => (AmountOfSubstance)AmountOfSubstance.FromMicromoles(value);

        /// <inheritdoc cref="AmountOfSubstance.FromMicromoles(double)"/>
        public static AmountOfSubstance Micromoles(this double value) => (AmountOfSubstance)AmountOfSubstance.FromMicromoles(new Number<double, DoubleCalculator>(value));

        /// <inheritdoc cref="AmountOfSubstance.FromMicromoles(double)"/>
        public static AmountOfSubstance Micromoles(this float value) => (AmountOfSubstance)AmountOfSubstance.FromMicromoles(value);

        /// <inheritdoc cref="AmountOfSubstance.FromMicromoles(double)"/>
        public static AmountOfSubstance Micromoles(this decimal value) => (AmountOfSubstance)AmountOfSubstance.FromMicromoles(new Number<double, DoubleCalculator>(Decimal.ToDouble(value)));

        #endregion

        #region MicropoundMole

        /// <inheritdoc cref="AmountOfSubstance.FromMicropoundMoles(double)"/>
        public static AmountOfSubstance MicropoundMoles(this int value) => (AmountOfSubstance)AmountOfSubstance.FromMicropoundMoles(value);
	
        /// <inheritdoc cref="AmountOfSubstance.FromMicropoundMoles(double)"/>
        public static AmountOfSubstance MicropoundMoles(this long value) => (AmountOfSubstance)AmountOfSubstance.FromMicropoundMoles(value);

        /// <inheritdoc cref="AmountOfSubstance.FromMicropoundMoles(double)"/>
        public static AmountOfSubstance MicropoundMoles(this double value) => (AmountOfSubstance)AmountOfSubstance.FromMicropoundMoles(new Number<double, DoubleCalculator>(value));

        /// <inheritdoc cref="AmountOfSubstance.FromMicropoundMoles(double)"/>
        public static AmountOfSubstance MicropoundMoles(this float value) => (AmountOfSubstance)AmountOfSubstance.FromMicropoundMoles(value);

        /// <inheritdoc cref="AmountOfSubstance.FromMicropoundMoles(double)"/>
        public static AmountOfSubstance MicropoundMoles(this decimal value) => (AmountOfSubstance)AmountOfSubstance.FromMicropoundMoles(new Number<double, DoubleCalculator>(Decimal.ToDouble(value)));

        #endregion

        #region Millimole

        /// <inheritdoc cref="AmountOfSubstance.FromMillimoles(double)"/>
        public static AmountOfSubstance Millimoles(this int value) => (AmountOfSubstance)AmountOfSubstance.FromMillimoles(value);
	
        /// <inheritdoc cref="AmountOfSubstance.FromMillimoles(double)"/>
        public static AmountOfSubstance Millimoles(this long value) => (AmountOfSubstance)AmountOfSubstance.FromMillimoles(value);

        /// <inheritdoc cref="AmountOfSubstance.FromMillimoles(double)"/>
        public static AmountOfSubstance Millimoles(this double value) => (AmountOfSubstance)AmountOfSubstance.FromMillimoles(new Number<double, DoubleCalculator>(value));

        /// <inheritdoc cref="AmountOfSubstance.FromMillimoles(double)"/>
        public static AmountOfSubstance Millimoles(this float value) => (AmountOfSubstance)AmountOfSubstance.FromMillimoles(value);

        /// <inheritdoc cref="AmountOfSubstance.FromMillimoles(double)"/>
        public static AmountOfSubstance Millimoles(this decimal value) => (AmountOfSubstance)AmountOfSubstance.FromMillimoles(new Number<double, DoubleCalculator>(Decimal.ToDouble(value)));

        #endregion

        #region MillipoundMole

        /// <inheritdoc cref="AmountOfSubstance.FromMillipoundMoles(double)"/>
        public static AmountOfSubstance MillipoundMoles(this int value) => (AmountOfSubstance)AmountOfSubstance.FromMillipoundMoles(value);
	
        /// <inheritdoc cref="AmountOfSubstance.FromMillipoundMoles(double)"/>
        public static AmountOfSubstance MillipoundMoles(this long value) => (AmountOfSubstance)AmountOfSubstance.FromMillipoundMoles(value);

        /// <inheritdoc cref="AmountOfSubstance.FromMillipoundMoles(double)"/>
        public static AmountOfSubstance MillipoundMoles(this double value) => (AmountOfSubstance)AmountOfSubstance.FromMillipoundMoles(new Number<double, DoubleCalculator>(value));

        /// <inheritdoc cref="AmountOfSubstance.FromMillipoundMoles(double)"/>
        public static AmountOfSubstance MillipoundMoles(this float value) => (AmountOfSubstance)AmountOfSubstance.FromMillipoundMoles(value);

        /// <inheritdoc cref="AmountOfSubstance.FromMillipoundMoles(double)"/>
        public static AmountOfSubstance MillipoundMoles(this decimal value) => (AmountOfSubstance)AmountOfSubstance.FromMillipoundMoles(new Number<double, DoubleCalculator>(Decimal.ToDouble(value)));

        #endregion

        #region Mole

        /// <inheritdoc cref="AmountOfSubstance.FromMoles(double)"/>
        public static AmountOfSubstance Moles(this int value) => (AmountOfSubstance)AmountOfSubstance.FromMoles(value);
	
        /// <inheritdoc cref="AmountOfSubstance.FromMoles(double)"/>
        public static AmountOfSubstance Moles(this long value) => (AmountOfSubstance)AmountOfSubstance.FromMoles(value);

        /// <inheritdoc cref="AmountOfSubstance.FromMoles(double)"/>
        public static AmountOfSubstance Moles(this double value) => (AmountOfSubstance)AmountOfSubstance.FromMoles(new Number<double, DoubleCalculator>(value));

        /// <inheritdoc cref="AmountOfSubstance.FromMoles(double)"/>
        public static AmountOfSubstance Moles(this float value) => (AmountOfSubstance)AmountOfSubstance.FromMoles(value);

        /// <inheritdoc cref="AmountOfSubstance.FromMoles(double)"/>
        public static AmountOfSubstance Moles(this decimal value) => (AmountOfSubstance)AmountOfSubstance.FromMoles(new Number<double, DoubleCalculator>(Decimal.ToDouble(value)));

        #endregion

        #region Nanomole

        /// <inheritdoc cref="AmountOfSubstance.FromNanomoles(double)"/>
        public static AmountOfSubstance Nanomoles(this int value) => (AmountOfSubstance)AmountOfSubstance.FromNanomoles(value);
	
        /// <inheritdoc cref="AmountOfSubstance.FromNanomoles(double)"/>
        public static AmountOfSubstance Nanomoles(this long value) => (AmountOfSubstance)AmountOfSubstance.FromNanomoles(value);

        /// <inheritdoc cref="AmountOfSubstance.FromNanomoles(double)"/>
        public static AmountOfSubstance Nanomoles(this double value) => (AmountOfSubstance)AmountOfSubstance.FromNanomoles(new Number<double, DoubleCalculator>(value));

        /// <inheritdoc cref="AmountOfSubstance.FromNanomoles(double)"/>
        public static AmountOfSubstance Nanomoles(this float value) => (AmountOfSubstance)AmountOfSubstance.FromNanomoles(value);

        /// <inheritdoc cref="AmountOfSubstance.FromNanomoles(double)"/>
        public static AmountOfSubstance Nanomoles(this decimal value) => (AmountOfSubstance)AmountOfSubstance.FromNanomoles(new Number<double, DoubleCalculator>(Decimal.ToDouble(value)));

        #endregion

        #region NanopoundMole

        /// <inheritdoc cref="AmountOfSubstance.FromNanopoundMoles(double)"/>
        public static AmountOfSubstance NanopoundMoles(this int value) => (AmountOfSubstance)AmountOfSubstance.FromNanopoundMoles(value);
	
        /// <inheritdoc cref="AmountOfSubstance.FromNanopoundMoles(double)"/>
        public static AmountOfSubstance NanopoundMoles(this long value) => (AmountOfSubstance)AmountOfSubstance.FromNanopoundMoles(value);

        /// <inheritdoc cref="AmountOfSubstance.FromNanopoundMoles(double)"/>
        public static AmountOfSubstance NanopoundMoles(this double value) => (AmountOfSubstance)AmountOfSubstance.FromNanopoundMoles(new Number<double, DoubleCalculator>(value));

        /// <inheritdoc cref="AmountOfSubstance.FromNanopoundMoles(double)"/>
        public static AmountOfSubstance NanopoundMoles(this float value) => (AmountOfSubstance)AmountOfSubstance.FromNanopoundMoles(value);

        /// <inheritdoc cref="AmountOfSubstance.FromNanopoundMoles(double)"/>
        public static AmountOfSubstance NanopoundMoles(this decimal value) => (AmountOfSubstance)AmountOfSubstance.FromNanopoundMoles(new Number<double, DoubleCalculator>(Decimal.ToDouble(value)));

        #endregion

        #region PoundMole

        /// <inheritdoc cref="AmountOfSubstance.FromPoundMoles(double)"/>
        public static AmountOfSubstance PoundMoles(this int value) => (AmountOfSubstance)AmountOfSubstance.FromPoundMoles(value);
	
        /// <inheritdoc cref="AmountOfSubstance.FromPoundMoles(double)"/>
        public static AmountOfSubstance PoundMoles(this long value) => (AmountOfSubstance)AmountOfSubstance.FromPoundMoles(value);

        /// <inheritdoc cref="AmountOfSubstance.FromPoundMoles(double)"/>
        public static AmountOfSubstance PoundMoles(this double value) => (AmountOfSubstance)AmountOfSubstance.FromPoundMoles(new Number<double, DoubleCalculator>(value));

        /// <inheritdoc cref="AmountOfSubstance.FromPoundMoles(double)"/>
        public static AmountOfSubstance PoundMoles(this float value) => (AmountOfSubstance)AmountOfSubstance.FromPoundMoles(value);

        /// <inheritdoc cref="AmountOfSubstance.FromPoundMoles(double)"/>
        public static AmountOfSubstance PoundMoles(this decimal value) => (AmountOfSubstance)AmountOfSubstance.FromPoundMoles(new Number<double, DoubleCalculator>(Decimal.ToDouble(value)));

        #endregion

    }
}
#endif
