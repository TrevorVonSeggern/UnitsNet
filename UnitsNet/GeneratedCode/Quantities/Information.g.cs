//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by \generate-code.bat.
//
//     Changes to this file will be lost when the code is regenerated.
//     The build server regenerates the code before each build and a pre-build
//     step will regenerate the code on each local build.
//
//     See https://github.com/angularsen/UnitsNet/wiki/Adding-a-New-Unit for how to add or edit units.
//
//     Add CustomCode\Quantities\MyUnit.extra.cs files to add code to generated quantities.
//     Add Extensions\MyUnitExtensions.cs to decorate quantities with new behavior.
//     Add UnitDefinitions\MyUnit.json and run GeneratUnits.bat to generate new units or quantities.
//
// </auto-generated>
//------------------------------------------------------------------------------

// Copyright (c) 2013 Andreas Gullberg Larsen (andreas.larsen84@gmail.com).
// https://github.com/angularsen/UnitsNet
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
// THE SOFTWARE.

using System;
using System.Collections.Generic;
using System.Globalization;
using System.Text.RegularExpressions;
using System.Linq;
using JetBrains.Annotations;
using UnitsNet.Units;

// Windows Runtime Component does not support CultureInfo type, so use culture name string instead for public methods: https://msdn.microsoft.com/en-us/library/br230301.aspx
#if WINDOWS_UWP
using Culture = System.String;
#else
using Culture = System.IFormatProvider;
#endif

// ReSharper disable once CheckNamespace
namespace UnitsNet
{
    using UnitsNet.InternalHelpers.Calculators;

    /// <summary>
    ///     In computing and telecommunications, a unit of information is the capacity of some standard data storage system or communication channel, used to measure the capacities of other systems and channels. In information theory, units of information are also used to measure the information contents or entropy of random variables.
    /// </summary>
    // ReSharper disable once PartialTypeWithSinglePart

    // Windows Runtime Component has constraints on public types: https://msdn.microsoft.com/en-us/library/br230301.aspx#Declaring types in Windows Runtime Components
    // Public structures can't have any members other than public fields, and those fields must be value types or strings.
    // Public classes must be sealed (NotInheritable in Visual Basic). If your programming model requires polymorphism, you can create a public interface and implement that interface on the classes that must be polymorphic.
	public partial class Information : UnitsNet.Generic.Information<double, UnitsNet.InternalHelpers.Calculators.DoubleCalculator> { }

	namespace Generic
	{
#if WINDOWS_UWP
		public sealed partial class Information
#else
		public partial class Information <T, C> : IComparable, IComparable<Information<T, C>>
			where T : struct
			where C : InternalHelpers.Calculators.INumberCalculator<T>, new()
#endif
		{
			/// <summary>
			///     Base unit of Information.
			/// </summary>
			private readonly Number<T, C> _bits;

			public Information() : this(new Number<T,C>())
			{
			}

			public Information(T bits)
			{
				_bits = (bits);
			}

			public Information(Number<T, C> bits)
			{
				_bits = (bits);
			}

			#region Properties

			/// <summary>
			///     The <see cref="QuantityType" /> of this quantity.
			/// </summary>
			public static QuantityType QuantityType => QuantityType.Information;

			/// <summary>
			///     The base unit representation of this quantity for the numeric value stored internally. All conversions go via this value.
			/// </summary>
			public static InformationUnit BaseUnit
			{
				get { return InformationUnit.Bit; }
			}

			/// <summary>
			///     All units of measurement for the Information quantity.
			/// </summary>
			public static InformationUnit[] Units { get; } = Enum.GetValues(typeof(InformationUnit)).Cast<InformationUnit>().ToArray();

			/// <summary>
			///     Get Information in Bits.
			/// </summary>
			public Number<T, C> Bits
			{
				get { return (_bits); }
			}

			/// <summary>
			///     Get Information in Bytes.
			/// </summary>
			public Number<T, C> Bytes
			{
				get { return (_bits/8m); }
			}

			/// <summary>
			///     Get Information in Exabits.
			/// </summary>
			public Number<T, C> Exabits
			{
				get { return ((_bits) / 1e18m); }
			}

			/// <summary>
			///     Get Information in Exabytes.
			/// </summary>
			public Number<T, C> Exabytes
			{
				get { return ((_bits/8m) / 1e18m); }
			}

			/// <summary>
			///     Get Information in Exbibits.
			/// </summary>
			public Number<T, C> Exbibits
			{
				get { return ((_bits) / (1024m * 1024 * 1024 * 1024 * 1024 * 1024)); }
			}

			/// <summary>
			///     Get Information in Exbibytes.
			/// </summary>
			public Number<T, C> Exbibytes
			{
				get { return ((_bits/8m) / (1024m * 1024 * 1024 * 1024 * 1024 * 1024)); }
			}

			/// <summary>
			///     Get Information in Gibibits.
			/// </summary>
			public Number<T, C> Gibibits
			{
				get { return ((_bits) / (1024m * 1024 * 1024)); }
			}

			/// <summary>
			///     Get Information in Gibibytes.
			/// </summary>
			public Number<T, C> Gibibytes
			{
				get { return ((_bits/8m) / (1024m * 1024 * 1024)); }
			}

			/// <summary>
			///     Get Information in Gigabits.
			/// </summary>
			public Number<T, C> Gigabits
			{
				get { return ((_bits) / 1e9m); }
			}

			/// <summary>
			///     Get Information in Gigabytes.
			/// </summary>
			public Number<T, C> Gigabytes
			{
				get { return ((_bits/8m) / 1e9m); }
			}

			/// <summary>
			///     Get Information in Kibibits.
			/// </summary>
			public Number<T, C> Kibibits
			{
				get { return ((_bits) / 1024m); }
			}

			/// <summary>
			///     Get Information in Kibibytes.
			/// </summary>
			public Number<T, C> Kibibytes
			{
				get { return ((_bits/8m) / 1024m); }
			}

			/// <summary>
			///     Get Information in Kilobits.
			/// </summary>
			public Number<T, C> Kilobits
			{
				get { return ((_bits) / 1e3m); }
			}

			/// <summary>
			///     Get Information in Kilobytes.
			/// </summary>
			public Number<T, C> Kilobytes
			{
				get { return ((_bits/8m) / 1e3m); }
			}

			/// <summary>
			///     Get Information in Mebibits.
			/// </summary>
			public Number<T, C> Mebibits
			{
				get { return ((_bits) / (1024m * 1024)); }
			}

			/// <summary>
			///     Get Information in Mebibytes.
			/// </summary>
			public Number<T, C> Mebibytes
			{
				get { return ((_bits/8m) / (1024m * 1024)); }
			}

			/// <summary>
			///     Get Information in Megabits.
			/// </summary>
			public Number<T, C> Megabits
			{
				get { return ((_bits) / 1e6m); }
			}

			/// <summary>
			///     Get Information in Megabytes.
			/// </summary>
			public Number<T, C> Megabytes
			{
				get { return ((_bits/8m) / 1e6m); }
			}

			/// <summary>
			///     Get Information in Pebibits.
			/// </summary>
			public Number<T, C> Pebibits
			{
				get { return ((_bits) / (1024m * 1024 * 1024 * 1024 * 1024)); }
			}

			/// <summary>
			///     Get Information in Pebibytes.
			/// </summary>
			public Number<T, C> Pebibytes
			{
				get { return ((_bits/8m) / (1024m * 1024 * 1024 * 1024 * 1024)); }
			}

			/// <summary>
			///     Get Information in Petabits.
			/// </summary>
			public Number<T, C> Petabits
			{
				get { return ((_bits) / 1e15m); }
			}

			/// <summary>
			///     Get Information in Petabytes.
			/// </summary>
			public Number<T, C> Petabytes
			{
				get { return ((_bits/8m) / 1e15m); }
			}

			/// <summary>
			///     Get Information in Tebibits.
			/// </summary>
			public Number<T, C> Tebibits
			{
				get { return ((_bits) / (1024m * 1024 * 1024 * 1024)); }
			}

			/// <summary>
			///     Get Information in Tebibytes.
			/// </summary>
			public Number<T, C> Tebibytes
			{
				get { return ((_bits/8m) / (1024m * 1024 * 1024 * 1024)); }
			}

			/// <summary>
			///     Get Information in Terabits.
			/// </summary>
			public Number<T, C> Terabits
			{
				get { return ((_bits) / 1e12m); }
			}

			/// <summary>
			///     Get Information in Terabytes.
			/// </summary>
			public Number<T, C> Terabytes
			{
				get { return ((_bits/8m) / 1e12m); }
			}

			#endregion

			#region Static

			public static Information<T, C> Zero
			{
				get { return new Information<T, C>(); }
			}

			/// <summary>
			///     Get Information from Bits.
			/// </summary>
#if WINDOWS_UWP
			[Windows.Foundation.Metadata.DefaultOverload]
			public static Information<T, C> FromBits(Number<T, C> bits)
			{
				Number<T,C> value = (Number<T,C>) bits;
				return new Information<T, C>((value));
			}
#else
			public static Information<T, C> FromBits(Number<T, C> bits)
			{
				Number<T,C> value = (Number<T,C>) bits;
				return new Information<T, C>(new Number<T,C>((value)));
			}
#endif

			/// <summary>
			///     Get Information from Bytes.
			/// </summary>
#if WINDOWS_UWP
			[Windows.Foundation.Metadata.DefaultOverload]
			public static Information<T, C> FromBytes(Number<T, C> bytes)
			{
				Number<T,C> value = (Number<T,C>) bytes;
				return new Information<T, C>((value*8d));
			}
#else
			public static Information<T, C> FromBytes(Number<T, C> bytes)
			{
				Number<T,C> value = (Number<T,C>) bytes;
				return new Information<T, C>(new Number<T,C>((value*8d)));
			}
#endif

			/// <summary>
			///     Get Information from Exabits.
			/// </summary>
#if WINDOWS_UWP
			[Windows.Foundation.Metadata.DefaultOverload]
			public static Information<T, C> FromExabits(Number<T, C> exabits)
			{
				Number<T,C> value = (Number<T,C>) exabits;
				return new Information<T, C>(((value) * 1e18d));
			}
#else
			public static Information<T, C> FromExabits(Number<T, C> exabits)
			{
				Number<T,C> value = (Number<T,C>) exabits;
				return new Information<T, C>(new Number<T,C>(((value) * 1e18d)));
			}
#endif

			/// <summary>
			///     Get Information from Exabytes.
			/// </summary>
#if WINDOWS_UWP
			[Windows.Foundation.Metadata.DefaultOverload]
			public static Information<T, C> FromExabytes(Number<T, C> exabytes)
			{
				Number<T,C> value = (Number<T,C>) exabytes;
				return new Information<T, C>(((value*8d) * 1e18d));
			}
#else
			public static Information<T, C> FromExabytes(Number<T, C> exabytes)
			{
				Number<T,C> value = (Number<T,C>) exabytes;
				return new Information<T, C>(new Number<T,C>(((value*8d) * 1e18d)));
			}
#endif

			/// <summary>
			///     Get Information from Exbibits.
			/// </summary>
#if WINDOWS_UWP
			[Windows.Foundation.Metadata.DefaultOverload]
			public static Information<T, C> FromExbibits(Number<T, C> exbibits)
			{
				Number<T,C> value = (Number<T,C>) exbibits;
				return new Information<T, C>(((value) * (1024d * 1024 * 1024 * 1024 * 1024 * 1024)));
			}
#else
			public static Information<T, C> FromExbibits(Number<T, C> exbibits)
			{
				Number<T,C> value = (Number<T,C>) exbibits;
				return new Information<T, C>(new Number<T,C>(((value) * (1024d * 1024 * 1024 * 1024 * 1024 * 1024))));
			}
#endif

			/// <summary>
			///     Get Information from Exbibytes.
			/// </summary>
#if WINDOWS_UWP
			[Windows.Foundation.Metadata.DefaultOverload]
			public static Information<T, C> FromExbibytes(Number<T, C> exbibytes)
			{
				Number<T,C> value = (Number<T,C>) exbibytes;
				return new Information<T, C>(((value*8d) * (1024d * 1024 * 1024 * 1024 * 1024 * 1024)));
			}
#else
			public static Information<T, C> FromExbibytes(Number<T, C> exbibytes)
			{
				Number<T,C> value = (Number<T,C>) exbibytes;
				return new Information<T, C>(new Number<T,C>(((value*8d) * (1024d * 1024 * 1024 * 1024 * 1024 * 1024))));
			}
#endif

			/// <summary>
			///     Get Information from Gibibits.
			/// </summary>
#if WINDOWS_UWP
			[Windows.Foundation.Metadata.DefaultOverload]
			public static Information<T, C> FromGibibits(Number<T, C> gibibits)
			{
				Number<T,C> value = (Number<T,C>) gibibits;
				return new Information<T, C>(((value) * (1024d * 1024 * 1024)));
			}
#else
			public static Information<T, C> FromGibibits(Number<T, C> gibibits)
			{
				Number<T,C> value = (Number<T,C>) gibibits;
				return new Information<T, C>(new Number<T,C>(((value) * (1024d * 1024 * 1024))));
			}
#endif

			/// <summary>
			///     Get Information from Gibibytes.
			/// </summary>
#if WINDOWS_UWP
			[Windows.Foundation.Metadata.DefaultOverload]
			public static Information<T, C> FromGibibytes(Number<T, C> gibibytes)
			{
				Number<T,C> value = (Number<T,C>) gibibytes;
				return new Information<T, C>(((value*8d) * (1024d * 1024 * 1024)));
			}
#else
			public static Information<T, C> FromGibibytes(Number<T, C> gibibytes)
			{
				Number<T,C> value = (Number<T,C>) gibibytes;
				return new Information<T, C>(new Number<T,C>(((value*8d) * (1024d * 1024 * 1024))));
			}
#endif

			/// <summary>
			///     Get Information from Gigabits.
			/// </summary>
#if WINDOWS_UWP
			[Windows.Foundation.Metadata.DefaultOverload]
			public static Information<T, C> FromGigabits(Number<T, C> gigabits)
			{
				Number<T,C> value = (Number<T,C>) gigabits;
				return new Information<T, C>(((value) * 1e9d));
			}
#else
			public static Information<T, C> FromGigabits(Number<T, C> gigabits)
			{
				Number<T,C> value = (Number<T,C>) gigabits;
				return new Information<T, C>(new Number<T,C>(((value) * 1e9d)));
			}
#endif

			/// <summary>
			///     Get Information from Gigabytes.
			/// </summary>
#if WINDOWS_UWP
			[Windows.Foundation.Metadata.DefaultOverload]
			public static Information<T, C> FromGigabytes(Number<T, C> gigabytes)
			{
				Number<T,C> value = (Number<T,C>) gigabytes;
				return new Information<T, C>(((value*8d) * 1e9d));
			}
#else
			public static Information<T, C> FromGigabytes(Number<T, C> gigabytes)
			{
				Number<T,C> value = (Number<T,C>) gigabytes;
				return new Information<T, C>(new Number<T,C>(((value*8d) * 1e9d)));
			}
#endif

			/// <summary>
			///     Get Information from Kibibits.
			/// </summary>
#if WINDOWS_UWP
			[Windows.Foundation.Metadata.DefaultOverload]
			public static Information<T, C> FromKibibits(Number<T, C> kibibits)
			{
				Number<T,C> value = (Number<T,C>) kibibits;
				return new Information<T, C>(((value) * 1024d));
			}
#else
			public static Information<T, C> FromKibibits(Number<T, C> kibibits)
			{
				Number<T,C> value = (Number<T,C>) kibibits;
				return new Information<T, C>(new Number<T,C>(((value) * 1024d)));
			}
#endif

			/// <summary>
			///     Get Information from Kibibytes.
			/// </summary>
#if WINDOWS_UWP
			[Windows.Foundation.Metadata.DefaultOverload]
			public static Information<T, C> FromKibibytes(Number<T, C> kibibytes)
			{
				Number<T,C> value = (Number<T,C>) kibibytes;
				return new Information<T, C>(((value*8d) * 1024d));
			}
#else
			public static Information<T, C> FromKibibytes(Number<T, C> kibibytes)
			{
				Number<T,C> value = (Number<T,C>) kibibytes;
				return new Information<T, C>(new Number<T,C>(((value*8d) * 1024d)));
			}
#endif

			/// <summary>
			///     Get Information from Kilobits.
			/// </summary>
#if WINDOWS_UWP
			[Windows.Foundation.Metadata.DefaultOverload]
			public static Information<T, C> FromKilobits(Number<T, C> kilobits)
			{
				Number<T,C> value = (Number<T,C>) kilobits;
				return new Information<T, C>(((value) * 1e3d));
			}
#else
			public static Information<T, C> FromKilobits(Number<T, C> kilobits)
			{
				Number<T,C> value = (Number<T,C>) kilobits;
				return new Information<T, C>(new Number<T,C>(((value) * 1e3d)));
			}
#endif

			/// <summary>
			///     Get Information from Kilobytes.
			/// </summary>
#if WINDOWS_UWP
			[Windows.Foundation.Metadata.DefaultOverload]
			public static Information<T, C> FromKilobytes(Number<T, C> kilobytes)
			{
				Number<T,C> value = (Number<T,C>) kilobytes;
				return new Information<T, C>(((value*8d) * 1e3d));
			}
#else
			public static Information<T, C> FromKilobytes(Number<T, C> kilobytes)
			{
				Number<T,C> value = (Number<T,C>) kilobytes;
				return new Information<T, C>(new Number<T,C>(((value*8d) * 1e3d)));
			}
#endif

			/// <summary>
			///     Get Information from Mebibits.
			/// </summary>
#if WINDOWS_UWP
			[Windows.Foundation.Metadata.DefaultOverload]
			public static Information<T, C> FromMebibits(Number<T, C> mebibits)
			{
				Number<T,C> value = (Number<T,C>) mebibits;
				return new Information<T, C>(((value) * (1024d * 1024)));
			}
#else
			public static Information<T, C> FromMebibits(Number<T, C> mebibits)
			{
				Number<T,C> value = (Number<T,C>) mebibits;
				return new Information<T, C>(new Number<T,C>(((value) * (1024d * 1024))));
			}
#endif

			/// <summary>
			///     Get Information from Mebibytes.
			/// </summary>
#if WINDOWS_UWP
			[Windows.Foundation.Metadata.DefaultOverload]
			public static Information<T, C> FromMebibytes(Number<T, C> mebibytes)
			{
				Number<T,C> value = (Number<T,C>) mebibytes;
				return new Information<T, C>(((value*8d) * (1024d * 1024)));
			}
#else
			public static Information<T, C> FromMebibytes(Number<T, C> mebibytes)
			{
				Number<T,C> value = (Number<T,C>) mebibytes;
				return new Information<T, C>(new Number<T,C>(((value*8d) * (1024d * 1024))));
			}
#endif

			/// <summary>
			///     Get Information from Megabits.
			/// </summary>
#if WINDOWS_UWP
			[Windows.Foundation.Metadata.DefaultOverload]
			public static Information<T, C> FromMegabits(Number<T, C> megabits)
			{
				Number<T,C> value = (Number<T,C>) megabits;
				return new Information<T, C>(((value) * 1e6d));
			}
#else
			public static Information<T, C> FromMegabits(Number<T, C> megabits)
			{
				Number<T,C> value = (Number<T,C>) megabits;
				return new Information<T, C>(new Number<T,C>(((value) * 1e6d)));
			}
#endif

			/// <summary>
			///     Get Information from Megabytes.
			/// </summary>
#if WINDOWS_UWP
			[Windows.Foundation.Metadata.DefaultOverload]
			public static Information<T, C> FromMegabytes(Number<T, C> megabytes)
			{
				Number<T,C> value = (Number<T,C>) megabytes;
				return new Information<T, C>(((value*8d) * 1e6d));
			}
#else
			public static Information<T, C> FromMegabytes(Number<T, C> megabytes)
			{
				Number<T,C> value = (Number<T,C>) megabytes;
				return new Information<T, C>(new Number<T,C>(((value*8d) * 1e6d)));
			}
#endif

			/// <summary>
			///     Get Information from Pebibits.
			/// </summary>
#if WINDOWS_UWP
			[Windows.Foundation.Metadata.DefaultOverload]
			public static Information<T, C> FromPebibits(Number<T, C> pebibits)
			{
				Number<T,C> value = (Number<T,C>) pebibits;
				return new Information<T, C>(((value) * (1024d * 1024 * 1024 * 1024 * 1024)));
			}
#else
			public static Information<T, C> FromPebibits(Number<T, C> pebibits)
			{
				Number<T,C> value = (Number<T,C>) pebibits;
				return new Information<T, C>(new Number<T,C>(((value) * (1024d * 1024 * 1024 * 1024 * 1024))));
			}
#endif

			/// <summary>
			///     Get Information from Pebibytes.
			/// </summary>
#if WINDOWS_UWP
			[Windows.Foundation.Metadata.DefaultOverload]
			public static Information<T, C> FromPebibytes(Number<T, C> pebibytes)
			{
				Number<T,C> value = (Number<T,C>) pebibytes;
				return new Information<T, C>(((value*8d) * (1024d * 1024 * 1024 * 1024 * 1024)));
			}
#else
			public static Information<T, C> FromPebibytes(Number<T, C> pebibytes)
			{
				Number<T,C> value = (Number<T,C>) pebibytes;
				return new Information<T, C>(new Number<T,C>(((value*8d) * (1024d * 1024 * 1024 * 1024 * 1024))));
			}
#endif

			/// <summary>
			///     Get Information from Petabits.
			/// </summary>
#if WINDOWS_UWP
			[Windows.Foundation.Metadata.DefaultOverload]
			public static Information<T, C> FromPetabits(Number<T, C> petabits)
			{
				Number<T,C> value = (Number<T,C>) petabits;
				return new Information<T, C>(((value) * 1e15d));
			}
#else
			public static Information<T, C> FromPetabits(Number<T, C> petabits)
			{
				Number<T,C> value = (Number<T,C>) petabits;
				return new Information<T, C>(new Number<T,C>(((value) * 1e15d)));
			}
#endif

			/// <summary>
			///     Get Information from Petabytes.
			/// </summary>
#if WINDOWS_UWP
			[Windows.Foundation.Metadata.DefaultOverload]
			public static Information<T, C> FromPetabytes(Number<T, C> petabytes)
			{
				Number<T,C> value = (Number<T,C>) petabytes;
				return new Information<T, C>(((value*8d) * 1e15d));
			}
#else
			public static Information<T, C> FromPetabytes(Number<T, C> petabytes)
			{
				Number<T,C> value = (Number<T,C>) petabytes;
				return new Information<T, C>(new Number<T,C>(((value*8d) * 1e15d)));
			}
#endif

			/// <summary>
			///     Get Information from Tebibits.
			/// </summary>
#if WINDOWS_UWP
			[Windows.Foundation.Metadata.DefaultOverload]
			public static Information<T, C> FromTebibits(Number<T, C> tebibits)
			{
				Number<T,C> value = (Number<T,C>) tebibits;
				return new Information<T, C>(((value) * (1024d * 1024 * 1024 * 1024)));
			}
#else
			public static Information<T, C> FromTebibits(Number<T, C> tebibits)
			{
				Number<T,C> value = (Number<T,C>) tebibits;
				return new Information<T, C>(new Number<T,C>(((value) * (1024d * 1024 * 1024 * 1024))));
			}
#endif

			/// <summary>
			///     Get Information from Tebibytes.
			/// </summary>
#if WINDOWS_UWP
			[Windows.Foundation.Metadata.DefaultOverload]
			public static Information<T, C> FromTebibytes(Number<T, C> tebibytes)
			{
				Number<T,C> value = (Number<T,C>) tebibytes;
				return new Information<T, C>(((value*8d) * (1024d * 1024 * 1024 * 1024)));
			}
#else
			public static Information<T, C> FromTebibytes(Number<T, C> tebibytes)
			{
				Number<T,C> value = (Number<T,C>) tebibytes;
				return new Information<T, C>(new Number<T,C>(((value*8d) * (1024d * 1024 * 1024 * 1024))));
			}
#endif

			/// <summary>
			///     Get Information from Terabits.
			/// </summary>
#if WINDOWS_UWP
			[Windows.Foundation.Metadata.DefaultOverload]
			public static Information<T, C> FromTerabits(Number<T, C> terabits)
			{
				Number<T,C> value = (Number<T,C>) terabits;
				return new Information<T, C>(((value) * 1e12d));
			}
#else
			public static Information<T, C> FromTerabits(Number<T, C> terabits)
			{
				Number<T,C> value = (Number<T,C>) terabits;
				return new Information<T, C>(new Number<T,C>(((value) * 1e12d)));
			}
#endif

			/// <summary>
			///     Get Information from Terabytes.
			/// </summary>
#if WINDOWS_UWP
			[Windows.Foundation.Metadata.DefaultOverload]
			public static Information<T, C> FromTerabytes(Number<T, C> terabytes)
			{
				Number<T,C> value = (Number<T,C>) terabytes;
				return new Information<T, C>(((value*8d) * 1e12d));
			}
#else
			public static Information<T, C> FromTerabytes(Number<T, C> terabytes)
			{
				Number<T,C> value = (Number<T,C>) terabytes;
				return new Information<T, C>(new Number<T,C>(((value*8d) * 1e12d)));
			}
#endif



			/// <summary>
			///     Dynamically convert from value and unit enum <see cref="InformationUnit" /> to <see cref="Information" />.
			/// </summary>
			/// <param name="value">Value to convert from.</param>
			/// <param name="fromUnit">Unit to convert from.</param>
			/// <returns>Information unit value.</returns>
#if WINDOWS_UWP
			// Fix name conflict with parameter "value"
			[return: System.Runtime.InteropServices.WindowsRuntime.ReturnValueName("returnValue")]
			public static Information<T, C> From(double value, InformationUnit fromUnit)
#else
			public static Information<T, C> From(Number<T, C> value, InformationUnit fromUnit)
#endif
			{
				switch (fromUnit)
				{
					case InformationUnit.Bit:
						return FromBits(value);
					case InformationUnit.Byte:
						return FromBytes(value);
					case InformationUnit.Exabit:
						return FromExabits(value);
					case InformationUnit.Exabyte:
						return FromExabytes(value);
					case InformationUnit.Exbibit:
						return FromExbibits(value);
					case InformationUnit.Exbibyte:
						return FromExbibytes(value);
					case InformationUnit.Gibibit:
						return FromGibibits(value);
					case InformationUnit.Gibibyte:
						return FromGibibytes(value);
					case InformationUnit.Gigabit:
						return FromGigabits(value);
					case InformationUnit.Gigabyte:
						return FromGigabytes(value);
					case InformationUnit.Kibibit:
						return FromKibibits(value);
					case InformationUnit.Kibibyte:
						return FromKibibytes(value);
					case InformationUnit.Kilobit:
						return FromKilobits(value);
					case InformationUnit.Kilobyte:
						return FromKilobytes(value);
					case InformationUnit.Mebibit:
						return FromMebibits(value);
					case InformationUnit.Mebibyte:
						return FromMebibytes(value);
					case InformationUnit.Megabit:
						return FromMegabits(value);
					case InformationUnit.Megabyte:
						return FromMegabytes(value);
					case InformationUnit.Pebibit:
						return FromPebibits(value);
					case InformationUnit.Pebibyte:
						return FromPebibytes(value);
					case InformationUnit.Petabit:
						return FromPetabits(value);
					case InformationUnit.Petabyte:
						return FromPetabytes(value);
					case InformationUnit.Tebibit:
						return FromTebibits(value);
					case InformationUnit.Tebibyte:
						return FromTebibytes(value);
					case InformationUnit.Terabit:
						return FromTerabits(value);
					case InformationUnit.Terabyte:
						return FromTerabytes(value);

					default:
						throw new NotImplementedException("fromUnit: " + fromUnit);
				}
			}

			/// <summary>
			///     Get unit abbreviation string.
			/// </summary>
			/// <param name="unit">Unit to get abbreviation for.</param>
			/// <returns>Unit abbreviation string.</returns>
			[UsedImplicitly]
			public static string GetAbbreviation(InformationUnit unit)
			{
				return GetAbbreviation(unit, null);
			}

			/// <summary>
			///     Get unit abbreviation string.
			/// </summary>
			/// <param name="unit">Unit to get abbreviation for.</param>
			/// <param name="culture">Culture to use for localization. Defaults to Thread.CurrentUICulture.</param>
			/// <returns>Unit abbreviation string.</returns>
			[UsedImplicitly]
			public static string GetAbbreviation(InformationUnit unit, [CanBeNull] Culture culture)
			{
				return UnitSystem.GetCached(culture).GetDefaultAbbreviation(unit);
			}

			#endregion

			#region Arithmetic Operators

			// Windows Runtime Component does not allow operator overloads: https://msdn.microsoft.com/en-us/library/br230301.aspx
#if !WINDOWS_UWP
			public static Information<T, C> operator -(Information<T, C> right)
			{
				return new Information<T, C>(-right._bits);
			}

			public static Information<T, C> operator +(Information<T, C> left, Information<T, C> right)
			{
				return new Information<T, C>(left._bits + right._bits);
			}

			public static Information<T, C> operator -(Information<T, C> left, Information<T, C> right)
			{
				return new Information<T, C>(left._bits - right._bits);
			}

			public static Information<T, C> operator *(Number<T, C> left, Information<T, C> right)
			{
				return new Information<T, C>(left*right._bits);
			}

			public static Information<T, C> operator *(Information<T, C> left, double right)
			{
				return new Information<T, C>(left._bits*right);
			}

			public static Information<T, C> operator /(Information<T, C> left, double right)
			{
				return new Information<T, C>(left._bits/right);
			}

			public static double operator /(Information<T, C> left, Information<T, C> right)
			{
				return Convert.ToDouble(left._bits/right._bits);
			}
#endif

			#endregion

			#region Equality / IComparable

			public int CompareTo(object obj)
			{
				if (obj == null) throw new ArgumentNullException("obj");
				if (!(obj is Information<T, C>)) throw new ArgumentException("Expected type Information.", "obj");
				return CompareTo((Information<T, C>) obj);
			}

			// Windows Runtime Component does not allow public methods/ctors with same number of parameters: https://msdn.microsoft.com/en-us/library/br230301.aspx#Overloaded methods
#if WINDOWS_UWP
			internal
#else
			public
#endif
			int CompareTo(Information<T, C> other)
			{
				return _bits.CompareTo(other._bits);
			}

			// Windows Runtime Component does not allow operator overloads: https://msdn.microsoft.com/en-us/library/br230301.aspx
#if !WINDOWS_UWP
			public static bool operator <=(Information<T, C> left, Information<T, C> right)
			{
				return left._bits <= right._bits;
			}

			public static bool operator >=(Information<T, C> left, Information<T, C> right)
			{
				return left._bits >= right._bits;
			}

			public static bool operator <(Information<T, C> left, Information<T, C> right)
			{
				return left._bits < right._bits;
			}

			public static bool operator >(Information<T, C> left, Information<T, C> right)
			{
				return left._bits > right._bits;
			}

			public static bool operator ==(Information<T, C> left, Information<T, C> right)
			{
				// ReSharper disable once CompareOfFloatsByEqualityOperator
				return left._bits == right._bits;
			}

			public static bool operator !=(Information<T, C> left, Information<T, C> right)
			{
				// ReSharper disable once CompareOfFloatsByEqualityOperator
				return left._bits != right._bits;
			}
#endif

			public override bool Equals(object obj)
			{
				if (obj == null || GetType() != obj.GetType())
				{
					return false;
				}

				return _bits.Equals(((Information<T, C>) obj)._bits);
			}

			/// <summary>
			///     Compare equality to another Information by specifying a max allowed difference.
			///     Note that it is advised against specifying zero difference, due to the nature
			///     of floating point operations and using System.Double internally.
			/// </summary>
			/// <param name="other">Other quantity to compare to.</param>
			/// <param name="maxError">Max error allowed.</param>
			/// <returns>True if the difference between the two values is not greater than the specified max.</returns>
			public bool Equals(Information<T, C> other, Information<T, C> maxError)
			{
				return Math.Abs((decimal)_bits - (decimal)other._bits) <= maxError._bits;
			}

			public override int GetHashCode()
			{
				return _bits.GetHashCode();
			}

			#endregion

			#region Conversion

			/// <summary>
			///     Convert to the unit representation <paramref name="unit" />.
			/// </summary>
			/// <returns>Value in new unit if successful, exception otherwise.</returns>
			/// <exception cref="NotImplementedException">If conversion was not successful.</exception>
			public Number<T, C> As(InformationUnit unit)
			{
				switch (unit)
				{
					case InformationUnit.Bit:
						return Bits;
					case InformationUnit.Byte:
						return Bytes;
					case InformationUnit.Exabit:
						return Exabits;
					case InformationUnit.Exabyte:
						return Exabytes;
					case InformationUnit.Exbibit:
						return Exbibits;
					case InformationUnit.Exbibyte:
						return Exbibytes;
					case InformationUnit.Gibibit:
						return Gibibits;
					case InformationUnit.Gibibyte:
						return Gibibytes;
					case InformationUnit.Gigabit:
						return Gigabits;
					case InformationUnit.Gigabyte:
						return Gigabytes;
					case InformationUnit.Kibibit:
						return Kibibits;
					case InformationUnit.Kibibyte:
						return Kibibytes;
					case InformationUnit.Kilobit:
						return Kilobits;
					case InformationUnit.Kilobyte:
						return Kilobytes;
					case InformationUnit.Mebibit:
						return Mebibits;
					case InformationUnit.Mebibyte:
						return Mebibytes;
					case InformationUnit.Megabit:
						return Megabits;
					case InformationUnit.Megabyte:
						return Megabytes;
					case InformationUnit.Pebibit:
						return Pebibits;
					case InformationUnit.Pebibyte:
						return Pebibytes;
					case InformationUnit.Petabit:
						return Petabits;
					case InformationUnit.Petabyte:
						return Petabytes;
					case InformationUnit.Tebibit:
						return Tebibits;
					case InformationUnit.Tebibyte:
						return Tebibytes;
					case InformationUnit.Terabit:
						return Terabits;
					case InformationUnit.Terabyte:
						return Terabytes;

					default:
						throw new NotImplementedException("unit: " + unit);
				}
			}

			#endregion

			#region Parsing

			/// <summary>
			///     Parse a string with one or two quantities of the format "&lt;quantity&gt; &lt;unit&gt;".
			/// </summary>
			/// <param name="str">String to parse. Typically in the form: {number} {unit}</param>
			/// <example>
			///     Length.Parse("5.5 m", new CultureInfo("en-US"));
			/// </example>
			/// <exception cref="ArgumentNullException">The value of 'str' cannot be null. </exception>
			/// <exception cref="ArgumentException">
			///     Expected string to have one or two pairs of quantity and unit in the format
			///     "&lt;quantity&gt; &lt;unit&gt;". Eg. "5.5 m" or "1ft 2in"
			/// </exception>
			/// <exception cref="AmbiguousUnitParseException">
			///     More than one unit is represented by the specified unit abbreviation.
			///     Example: Volume.Parse("1 cup") will throw, because it can refer to any of
			///     <see cref="VolumeUnit.MetricCup" />, <see cref="VolumeUnit.UsLegalCup" /> and <see cref="VolumeUnit.UsCustomaryCup" />.
			/// </exception>
			/// <exception cref="UnitsNetException">
			///     If anything else goes wrong, typically due to a bug or unhandled case.
			///     We wrap exceptions in <see cref="UnitsNetException" /> to allow you to distinguish
			///     Units.NET exceptions from other exceptions.
			/// </exception>
			public static Information<T, C> Parse(string str)
			{
				return Parse(str, null);
			}

			/// <summary>
			///     Parse a string with one or two quantities of the format "&lt;quantity&gt; &lt;unit&gt;".
			/// </summary>
			/// <param name="str">String to parse. Typically in the form: {number} {unit}</param>
			/// <param name="culture">Format to use when parsing number and unit. If it is null, it defaults to <see cref="NumberFormatInfo.CurrentInfo"/> for parsing the number and <see cref="CultureInfo.CurrentUICulture"/> for parsing the unit abbreviation by culture/language.</param>
			/// <example>
			///     Length.Parse("5.5 m", new CultureInfo("en-US"));
			/// </example>
			/// <exception cref="ArgumentNullException">The value of 'str' cannot be null. </exception>
			/// <exception cref="ArgumentException">
			///     Expected string to have one or two pairs of quantity and unit in the format
			///     "&lt;quantity&gt; &lt;unit&gt;". Eg. "5.5 m" or "1ft 2in"
			/// </exception>
			/// <exception cref="AmbiguousUnitParseException">
			///     More than one unit is represented by the specified unit abbreviation.
			///     Example: Volume.Parse("1 cup") will throw, because it can refer to any of
			///     <see cref="VolumeUnit.MetricCup" />, <see cref="VolumeUnit.UsLegalCup" /> and <see cref="VolumeUnit.UsCustomaryCup" />.
			/// </exception>
			/// <exception cref="UnitsNetException">
			///     If anything else goes wrong, typically due to a bug or unhandled case.
			///     We wrap exceptions in <see cref="UnitsNetException" /> to allow you to distinguish
			///     Units.NET exceptions from other exceptions.
			/// </exception>
			public static Information<T, C> Parse(string str, [CanBeNull] Culture culture)
			{
				if (str == null) throw new ArgumentNullException("str");

			// Windows Runtime Component does not support CultureInfo type, so use culture name string for public methods instead: https://msdn.microsoft.com/en-us/library/br230301.aspx
#if WINDOWS_UWP
				IFormatProvider formatProvider = culture == null ? null : new CultureInfo(culture);
#else
				IFormatProvider formatProvider = culture;
#endif
					return QuantityParser.Parse<Information<T, C>, InformationUnit>(str, formatProvider,
					delegate(string value, string unit, IFormatProvider formatProvider2)
					{
						double parsedValue = double.Parse(value, formatProvider2);
						InformationUnit parsedUnit = ParseUnit(unit, formatProvider2);
						return From(new C().ConvertToNumber(parsedValue), parsedUnit);
					}, (x, y) => FromBits((Number<T, C>)x.Bits + y.Bits));
			}

			/// <summary>
			///     Try to parse a string with one or two quantities of the format "&lt;quantity&gt; &lt;unit&gt;".
			/// </summary>
			/// <param name="str">String to parse. Typically in the form: {number} {unit}</param>
			/// <param name="result">Resulting unit quantity if successful.</param>
			/// <example>
			///     Length.Parse("5.5 m", new CultureInfo("en-US"));
			/// </example>
			public static bool TryParse([CanBeNull] string str, out Information<T, C> result)
			{
				return TryParse(str, null, out result);
			}

			/// <summary>
			///     Try to parse a string with one or two quantities of the format "&lt;quantity&gt; &lt;unit&gt;".
			/// </summary>
			/// <param name="str">String to parse. Typically in the form: {number} {unit}</param>
			/// <param name="culture">Format to use when parsing number and unit. If it is null, it defaults to <see cref="NumberFormatInfo.CurrentInfo"/> for parsing the number and <see cref="CultureInfo.CurrentUICulture"/> for parsing the unit abbreviation by culture/language.</param>
			/// <param name="result">Resulting unit quantity if successful.</param>
			/// <example>
			///     Length.Parse("5.5 m", new CultureInfo("en-US"));
			/// </example>
			public static bool TryParse([CanBeNull] string str, [CanBeNull] Culture culture, out Information<T, C> result)
			{
				try
				{
					result = Parse(str, culture);
					return true;
				}
				catch
				{
					result = default(Information<T, C>);
					return false;
				}
			}

			/// <summary>
			///     Parse a unit string.
			/// </summary>
			/// <example>
			///     Length.ParseUnit("m", new CultureInfo("en-US"));
			/// </example>
			/// <exception cref="ArgumentNullException">The value of 'str' cannot be null. </exception>
			/// <exception cref="UnitsNetException">Error parsing string.</exception>
			public static InformationUnit ParseUnit(string str)
			{
				return ParseUnit(str, (IFormatProvider)null);
			}

			/// <summary>
			///     Parse a unit string.
			/// </summary>
			/// <example>
			///     Length.ParseUnit("m", new CultureInfo("en-US"));
			/// </example>
			/// <exception cref="ArgumentNullException">The value of 'str' cannot be null. </exception>
			/// <exception cref="UnitsNetException">Error parsing string.</exception>
			public static InformationUnit ParseUnit(string str, [CanBeNull] string cultureName)
			{
				return ParseUnit(str, cultureName == null ? null : new CultureInfo(cultureName));
			}

			/// <summary>
			///     Parse a unit string.
			/// </summary>
			/// <example>
			///     Length.ParseUnit("m", new CultureInfo("en-US"));
			/// </example>
			/// <exception cref="ArgumentNullException">The value of 'str' cannot be null. </exception>
			/// <exception cref="UnitsNetException">Error parsing string.</exception>

			// Windows Runtime Component does not allow public methods/ctors with same number of parameters: https://msdn.microsoft.com/en-us/library/br230301.aspx#Overloaded methods
#if WINDOWS_UWP
			internal
#else
			public
#endif
			static InformationUnit ParseUnit(string str, IFormatProvider formatProvider = null)
			{
				if (str == null) throw new ArgumentNullException("str");

				var unitSystem = UnitSystem.GetCached(formatProvider);
				var unit = unitSystem.Parse<InformationUnit>(str.Trim());

				if (unit == InformationUnit.Undefined)
				{
					var newEx = new UnitsNetException("Error parsing string. The unit is not a recognized InformationUnit.");
					newEx.Data["input"] = str;
					newEx.Data["formatprovider"] = formatProvider?.ToString() ?? "(null)";
					throw newEx;
				}

				return unit;
			}

			#endregion

			/// <summary>
			///     Set the default unit used by ToString(). Default is Bit
			/// </summary>
			public static InformationUnit ToStringDefaultUnit { get; set; } = InformationUnit.Bit;

			/// <summary>
			///     Get default string representation of value and unit.
			/// </summary>
			/// <returns>String representation.</returns>
			public override string ToString()
			{
				return ToString(ToStringDefaultUnit);
			}

			/// <summary>
			///     Get string representation of value and unit. Using current UI culture and two significant digits after radix.
			/// </summary>
			/// <param name="unit">Unit representation to use.</param>
			/// <returns>String representation.</returns>
			public string ToString(InformationUnit unit)
			{
				return ToString(unit, null, 2);
			}

			/// <summary>
			///     Get string representation of value and unit. Using two significant digits after radix.
			/// </summary>
			/// <param name="unit">Unit representation to use.</param>
			/// <param name="culture">Culture to use for localization and number formatting.</param>
			/// <returns>String representation.</returns>
			public string ToString(InformationUnit unit, [CanBeNull] Culture culture)
			{
				return ToString(unit, culture, 2);
			}

			/// <summary>
			///     Get string representation of value and unit.
			/// </summary>
			/// <param name="unit">Unit representation to use.</param>
			/// <param name="culture">Culture to use for localization and number formatting.</param>
			/// <param name="significantDigitsAfterRadix">The number of significant digits after the radix point.</param>
			/// <returns>String representation.</returns>
			[UsedImplicitly]
			public string ToString(InformationUnit unit, [CanBeNull] Culture culture, int significantDigitsAfterRadix)
			{
				Number<T, C>  value = As(unit);
				string format = UnitFormatter.GetFormat((double)value, significantDigitsAfterRadix);
				return ToString(unit, culture, format);
			}

			/// <summary>
			///     Get string representation of value and unit.
			/// </summary>
			/// <param name="culture">Culture to use for localization and number formatting.</param>
			/// <param name="unit">Unit representation to use.</param>
			/// <param name="format">String format to use. Default:  "{0:0.##} {1} for value and unit abbreviation respectively."</param>
			/// <param name="args">Arguments for string format. Value and unit are implictly included as arguments 0 and 1.</param>
			/// <returns>String representation.</returns>
			[UsedImplicitly]
			public string ToString(InformationUnit unit, [CanBeNull] Culture culture, [NotNull] string format,
				[NotNull] params object[] args)
			{
				if (format == null) throw new ArgumentNullException(nameof(format));
				if (args == null) throw new ArgumentNullException(nameof(args));

			// Windows Runtime Component does not support CultureInfo type, so use culture name string for public methods instead: https://msdn.microsoft.com/en-us/library/br230301.aspx
#if WINDOWS_UWP
				IFormatProvider formatProvider = culture == null ? null : new CultureInfo(culture);
#else
				IFormatProvider formatProvider = culture;
#endif
				Number<T, C>  value = As(unit);
				object[] formatArgs = UnitFormatter.GetFormatArgs(unit, (double)value, formatProvider, args);
				return string.Format(formatProvider, format, formatArgs);
			}

			/// <summary>
			/// Represents the largest possible value of Information
			/// </summary>
			public static Number<T, C> MaxValue
			{
				get
				{
					return Number<T, C>.MaxValue;
				}
			}

			/// <summary>
			/// Represents the smallest possible value of Information
			/// </summary>
			public static Number<T, C> MinValue
			{
				get
				{
					return Number<T, C>.MinValue;
				}
			}
		}
	}
}
