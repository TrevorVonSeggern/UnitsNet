//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by \generate-code.bat.
//
//     Changes to this file will be lost when the code is regenerated.
//     The build server regenerates the code before each build and a pre-build
//     step will regenerate the code on each local build.
//
//     See https://github.com/angularsen/UnitsNet/wiki/Adding-a-New-Unit for how to add or edit units.
//
//     Add CustomCode\Quantities\MyUnit.extra.cs files to add code to generated quantities.
//     Add Extensions\MyUnitExtensions.cs to decorate quantities with new behavior.
//     Add UnitDefinitions\MyUnit.json and run GeneratUnits.bat to generate new units or quantities.
//
// </auto-generated>
//------------------------------------------------------------------------------

// Copyright (c) 2013 Andreas Gullberg Larsen (andreas.larsen84@gmail.com).
// https://github.com/angularsen/UnitsNet
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
// THE SOFTWARE.

using System;
using System.Collections.Generic;
using System.Globalization;
using System.Text.RegularExpressions;
using System.Linq;
using JetBrains.Annotations;
using UnitsNet.Units;

// Windows Runtime Component does not support CultureInfo type, so use culture name string instead for public methods: https://msdn.microsoft.com/en-us/library/br230301.aspx
#if WINDOWS_UWP
using Culture = System.String;
#else
using Culture = System.IFormatProvider;
#endif

// ReSharper disable once CheckNamespace
namespace UnitsNet
{
    using UnitsNet.InternalHelpers.Calculators;

    /// <summary>
    ///     A property of body reflects how its mass is distributed with regard to an axis.
    /// </summary>
    // ReSharper disable once PartialTypeWithSinglePart

    // Windows Runtime Component has constraints on public types: https://msdn.microsoft.com/en-us/library/br230301.aspx#Declaring types in Windows Runtime Components
    // Public structures can't have any members other than public fields, and those fields must be value types or strings.
    // Public classes must be sealed (NotInheritable in Visual Basic). If your programming model requires polymorphism, you can create a public interface and implement that interface on the classes that must be polymorphic.
	public partial class MassMomentOfInertia : UnitsNet.Generic.MassMomentOfInertia<double, UnitsNet.InternalHelpers.Calculators.DoubleCalculator> { }

	namespace Generic
	{
#if WINDOWS_UWP
		public sealed partial class MassMomentOfInertia
#else
		public partial class MassMomentOfInertia <T, C> : IComparable, IComparable<MassMomentOfInertia<T, C>>
			where T : struct
			where C : InternalHelpers.Calculators.INumberCalculator<T>, new()
#endif
		{
			/// <summary>
			///     Base unit of MassMomentOfInertia.
			/// </summary>
			private readonly Number<T, C> _kilogramSquareMeters;

			public MassMomentOfInertia() : this(new Number<T,C>())
			{
			}

			public MassMomentOfInertia(T kilogramsquaremeters)
			{
				_kilogramSquareMeters = (kilogramsquaremeters);
			}

			public MassMomentOfInertia(Number<T, C> kilogramsquaremeters)
			{
				_kilogramSquareMeters = (kilogramsquaremeters);
			}

			#region Properties

			/// <summary>
			///     The <see cref="QuantityType" /> of this quantity.
			/// </summary>
			public static QuantityType QuantityType => QuantityType.MassMomentOfInertia;

			/// <summary>
			///     The base unit representation of this quantity for the numeric value stored internally. All conversions go via this value.
			/// </summary>
			public static MassMomentOfInertiaUnit BaseUnit
			{
				get { return MassMomentOfInertiaUnit.KilogramSquareMeter; }
			}

			/// <summary>
			///     All units of measurement for the MassMomentOfInertia quantity.
			/// </summary>
			public static MassMomentOfInertiaUnit[] Units { get; } = Enum.GetValues(typeof(MassMomentOfInertiaUnit)).Cast<MassMomentOfInertiaUnit>().ToArray();

			/// <summary>
			///     Get MassMomentOfInertia in GramSquareCentimeters.
			/// </summary>
			public Number<T, C> GramSquareCentimeters
			{
				get { return _kilogramSquareMeters*1e7; }
			}

			/// <summary>
			///     Get MassMomentOfInertia in GramSquareDecimeters.
			/// </summary>
			public Number<T, C> GramSquareDecimeters
			{
				get { return _kilogramSquareMeters*1e5; }
			}

			/// <summary>
			///     Get MassMomentOfInertia in GramSquareMeters.
			/// </summary>
			public Number<T, C> GramSquareMeters
			{
				get { return _kilogramSquareMeters*1e3; }
			}

			/// <summary>
			///     Get MassMomentOfInertia in GramSquareMillimeters.
			/// </summary>
			public Number<T, C> GramSquareMillimeters
			{
				get { return _kilogramSquareMeters*1e9; }
			}

			/// <summary>
			///     Get MassMomentOfInertia in KilogramSquareCentimeters.
			/// </summary>
			public Number<T, C> KilogramSquareCentimeters
			{
				get { return (_kilogramSquareMeters*1e7) / 1e3d; }
			}

			/// <summary>
			///     Get MassMomentOfInertia in KilogramSquareDecimeters.
			/// </summary>
			public Number<T, C> KilogramSquareDecimeters
			{
				get { return (_kilogramSquareMeters*1e5) / 1e3d; }
			}

			/// <summary>
			///     Get MassMomentOfInertia in KilogramSquareMeters.
			/// </summary>
			public Number<T, C> KilogramSquareMeters
			{
				get { return (_kilogramSquareMeters*1e3) / 1e3d; }
			}

			/// <summary>
			///     Get MassMomentOfInertia in KilogramSquareMillimeters.
			/// </summary>
			public Number<T, C> KilogramSquareMillimeters
			{
				get { return (_kilogramSquareMeters*1e9) / 1e3d; }
			}

			/// <summary>
			///     Get MassMomentOfInertia in KilotonneSquareCentimeters.
			/// </summary>
			public Number<T, C> KilotonneSquareCentimeters
			{
				get { return (_kilogramSquareMeters*1e1) / 1e3d; }
			}

			/// <summary>
			///     Get MassMomentOfInertia in KilotonneSquareDecimeters.
			/// </summary>
			public Number<T, C> KilotonneSquareDecimeters
			{
				get { return (_kilogramSquareMeters*1e-1) / 1e3d; }
			}

			/// <summary>
			///     Get MassMomentOfInertia in KilotonneSquareMeters.
			/// </summary>
			public Number<T, C> KilotonneSquareMeters
			{
				get { return (_kilogramSquareMeters*1e-3) / 1e3d; }
			}

			/// <summary>
			///     Get MassMomentOfInertia in KilotonneSquareMilimeters.
			/// </summary>
			public Number<T, C> KilotonneSquareMilimeters
			{
				get { return (_kilogramSquareMeters*1e3) / 1e3d; }
			}

			/// <summary>
			///     Get MassMomentOfInertia in MegatonneSquareCentimeters.
			/// </summary>
			public Number<T, C> MegatonneSquareCentimeters
			{
				get { return (_kilogramSquareMeters*1e1) / 1e6d; }
			}

			/// <summary>
			///     Get MassMomentOfInertia in MegatonneSquareDecimeters.
			/// </summary>
			public Number<T, C> MegatonneSquareDecimeters
			{
				get { return (_kilogramSquareMeters*1e-1) / 1e6d; }
			}

			/// <summary>
			///     Get MassMomentOfInertia in MegatonneSquareMeters.
			/// </summary>
			public Number<T, C> MegatonneSquareMeters
			{
				get { return (_kilogramSquareMeters*1e-3) / 1e6d; }
			}

			/// <summary>
			///     Get MassMomentOfInertia in MegatonneSquareMilimeters.
			/// </summary>
			public Number<T, C> MegatonneSquareMilimeters
			{
				get { return (_kilogramSquareMeters*1e3) / 1e6d; }
			}

			/// <summary>
			///     Get MassMomentOfInertia in MilligramSquareCentimeters.
			/// </summary>
			public Number<T, C> MilligramSquareCentimeters
			{
				get { return (_kilogramSquareMeters*1e7) / 1e-3d; }
			}

			/// <summary>
			///     Get MassMomentOfInertia in MilligramSquareDecimeters.
			/// </summary>
			public Number<T, C> MilligramSquareDecimeters
			{
				get { return (_kilogramSquareMeters*1e5) / 1e-3d; }
			}

			/// <summary>
			///     Get MassMomentOfInertia in MilligramSquareMeters.
			/// </summary>
			public Number<T, C> MilligramSquareMeters
			{
				get { return (_kilogramSquareMeters*1e3) / 1e-3d; }
			}

			/// <summary>
			///     Get MassMomentOfInertia in MilligramSquareMillimeters.
			/// </summary>
			public Number<T, C> MilligramSquareMillimeters
			{
				get { return (_kilogramSquareMeters*1e9) / 1e-3d; }
			}

			/// <summary>
			///     Get MassMomentOfInertia in PoundSquareFeet.
			/// </summary>
			public Number<T, C> PoundSquareFeet
			{
				get { return _kilogramSquareMeters/4.21401101e-2; }
			}

			/// <summary>
			///     Get MassMomentOfInertia in PoundSquareInches.
			/// </summary>
			public Number<T, C> PoundSquareInches
			{
				get { return _kilogramSquareMeters/2.9263965e-4; }
			}

			/// <summary>
			///     Get MassMomentOfInertia in TonneSquareCentimeters.
			/// </summary>
			public Number<T, C> TonneSquareCentimeters
			{
				get { return _kilogramSquareMeters*1e1; }
			}

			/// <summary>
			///     Get MassMomentOfInertia in TonneSquareDecimeters.
			/// </summary>
			public Number<T, C> TonneSquareDecimeters
			{
				get { return _kilogramSquareMeters*1e-1; }
			}

			/// <summary>
			///     Get MassMomentOfInertia in TonneSquareMeters.
			/// </summary>
			public Number<T, C> TonneSquareMeters
			{
				get { return _kilogramSquareMeters*1e-3; }
			}

			/// <summary>
			///     Get MassMomentOfInertia in TonneSquareMilimeters.
			/// </summary>
			public Number<T, C> TonneSquareMilimeters
			{
				get { return _kilogramSquareMeters*1e3; }
			}

			#endregion

			#region Static

			public static MassMomentOfInertia<T, C> Zero
			{
				get { return new MassMomentOfInertia<T, C>(); }
			}

			/// <summary>
			///     Get MassMomentOfInertia from GramSquareCentimeters.
			/// </summary>
#if WINDOWS_UWP
			[Windows.Foundation.Metadata.DefaultOverload]
			public static MassMomentOfInertia<T, C> FromGramSquareCentimeters(Number<T, C> gramsquarecentimeters)
			{
				Number<T,C> value = (Number<T,C>) gramsquarecentimeters;
				return new MassMomentOfInertia<T, C>(value/1e7);
			}
#else
			public static MassMomentOfInertia<T, C> FromGramSquareCentimeters(Number<T, C> gramsquarecentimeters)
			{
				Number<T,C> value = (Number<T,C>) gramsquarecentimeters;
				return new MassMomentOfInertia<T, C>(new Number<T,C>(value/1e7));
			}
#endif

			/// <summary>
			///     Get MassMomentOfInertia from GramSquareDecimeters.
			/// </summary>
#if WINDOWS_UWP
			[Windows.Foundation.Metadata.DefaultOverload]
			public static MassMomentOfInertia<T, C> FromGramSquareDecimeters(Number<T, C> gramsquaredecimeters)
			{
				Number<T,C> value = (Number<T,C>) gramsquaredecimeters;
				return new MassMomentOfInertia<T, C>(value/1e5);
			}
#else
			public static MassMomentOfInertia<T, C> FromGramSquareDecimeters(Number<T, C> gramsquaredecimeters)
			{
				Number<T,C> value = (Number<T,C>) gramsquaredecimeters;
				return new MassMomentOfInertia<T, C>(new Number<T,C>(value/1e5));
			}
#endif

			/// <summary>
			///     Get MassMomentOfInertia from GramSquareMeters.
			/// </summary>
#if WINDOWS_UWP
			[Windows.Foundation.Metadata.DefaultOverload]
			public static MassMomentOfInertia<T, C> FromGramSquareMeters(Number<T, C> gramsquaremeters)
			{
				Number<T,C> value = (Number<T,C>) gramsquaremeters;
				return new MassMomentOfInertia<T, C>(value/1e3);
			}
#else
			public static MassMomentOfInertia<T, C> FromGramSquareMeters(Number<T, C> gramsquaremeters)
			{
				Number<T,C> value = (Number<T,C>) gramsquaremeters;
				return new MassMomentOfInertia<T, C>(new Number<T,C>(value/1e3));
			}
#endif

			/// <summary>
			///     Get MassMomentOfInertia from GramSquareMillimeters.
			/// </summary>
#if WINDOWS_UWP
			[Windows.Foundation.Metadata.DefaultOverload]
			public static MassMomentOfInertia<T, C> FromGramSquareMillimeters(Number<T, C> gramsquaremillimeters)
			{
				Number<T,C> value = (Number<T,C>) gramsquaremillimeters;
				return new MassMomentOfInertia<T, C>(value/1e9);
			}
#else
			public static MassMomentOfInertia<T, C> FromGramSquareMillimeters(Number<T, C> gramsquaremillimeters)
			{
				Number<T,C> value = (Number<T,C>) gramsquaremillimeters;
				return new MassMomentOfInertia<T, C>(new Number<T,C>(value/1e9));
			}
#endif

			/// <summary>
			///     Get MassMomentOfInertia from KilogramSquareCentimeters.
			/// </summary>
#if WINDOWS_UWP
			[Windows.Foundation.Metadata.DefaultOverload]
			public static MassMomentOfInertia<T, C> FromKilogramSquareCentimeters(Number<T, C> kilogramsquarecentimeters)
			{
				Number<T,C> value = (Number<T,C>) kilogramsquarecentimeters;
				return new MassMomentOfInertia<T, C>((value/1e7) * 1e3d);
			}
#else
			public static MassMomentOfInertia<T, C> FromKilogramSquareCentimeters(Number<T, C> kilogramsquarecentimeters)
			{
				Number<T,C> value = (Number<T,C>) kilogramsquarecentimeters;
				return new MassMomentOfInertia<T, C>(new Number<T,C>((value/1e7) * 1e3d));
			}
#endif

			/// <summary>
			///     Get MassMomentOfInertia from KilogramSquareDecimeters.
			/// </summary>
#if WINDOWS_UWP
			[Windows.Foundation.Metadata.DefaultOverload]
			public static MassMomentOfInertia<T, C> FromKilogramSquareDecimeters(Number<T, C> kilogramsquaredecimeters)
			{
				Number<T,C> value = (Number<T,C>) kilogramsquaredecimeters;
				return new MassMomentOfInertia<T, C>((value/1e5) * 1e3d);
			}
#else
			public static MassMomentOfInertia<T, C> FromKilogramSquareDecimeters(Number<T, C> kilogramsquaredecimeters)
			{
				Number<T,C> value = (Number<T,C>) kilogramsquaredecimeters;
				return new MassMomentOfInertia<T, C>(new Number<T,C>((value/1e5) * 1e3d));
			}
#endif

			/// <summary>
			///     Get MassMomentOfInertia from KilogramSquareMeters.
			/// </summary>
#if WINDOWS_UWP
			[Windows.Foundation.Metadata.DefaultOverload]
			public static MassMomentOfInertia<T, C> FromKilogramSquareMeters(Number<T, C> kilogramsquaremeters)
			{
				Number<T,C> value = (Number<T,C>) kilogramsquaremeters;
				return new MassMomentOfInertia<T, C>((value/1e3) * 1e3d);
			}
#else
			public static MassMomentOfInertia<T, C> FromKilogramSquareMeters(Number<T, C> kilogramsquaremeters)
			{
				Number<T,C> value = (Number<T,C>) kilogramsquaremeters;
				return new MassMomentOfInertia<T, C>(new Number<T,C>((value/1e3) * 1e3d));
			}
#endif

			/// <summary>
			///     Get MassMomentOfInertia from KilogramSquareMillimeters.
			/// </summary>
#if WINDOWS_UWP
			[Windows.Foundation.Metadata.DefaultOverload]
			public static MassMomentOfInertia<T, C> FromKilogramSquareMillimeters(Number<T, C> kilogramsquaremillimeters)
			{
				Number<T,C> value = (Number<T,C>) kilogramsquaremillimeters;
				return new MassMomentOfInertia<T, C>((value/1e9) * 1e3d);
			}
#else
			public static MassMomentOfInertia<T, C> FromKilogramSquareMillimeters(Number<T, C> kilogramsquaremillimeters)
			{
				Number<T,C> value = (Number<T,C>) kilogramsquaremillimeters;
				return new MassMomentOfInertia<T, C>(new Number<T,C>((value/1e9) * 1e3d));
			}
#endif

			/// <summary>
			///     Get MassMomentOfInertia from KilotonneSquareCentimeters.
			/// </summary>
#if WINDOWS_UWP
			[Windows.Foundation.Metadata.DefaultOverload]
			public static MassMomentOfInertia<T, C> FromKilotonneSquareCentimeters(Number<T, C> kilotonnesquarecentimeters)
			{
				Number<T,C> value = (Number<T,C>) kilotonnesquarecentimeters;
				return new MassMomentOfInertia<T, C>((value/1e1) * 1e3d);
			}
#else
			public static MassMomentOfInertia<T, C> FromKilotonneSquareCentimeters(Number<T, C> kilotonnesquarecentimeters)
			{
				Number<T,C> value = (Number<T,C>) kilotonnesquarecentimeters;
				return new MassMomentOfInertia<T, C>(new Number<T,C>((value/1e1) * 1e3d));
			}
#endif

			/// <summary>
			///     Get MassMomentOfInertia from KilotonneSquareDecimeters.
			/// </summary>
#if WINDOWS_UWP
			[Windows.Foundation.Metadata.DefaultOverload]
			public static MassMomentOfInertia<T, C> FromKilotonneSquareDecimeters(Number<T, C> kilotonnesquaredecimeters)
			{
				Number<T,C> value = (Number<T,C>) kilotonnesquaredecimeters;
				return new MassMomentOfInertia<T, C>((value/1e-1) * 1e3d);
			}
#else
			public static MassMomentOfInertia<T, C> FromKilotonneSquareDecimeters(Number<T, C> kilotonnesquaredecimeters)
			{
				Number<T,C> value = (Number<T,C>) kilotonnesquaredecimeters;
				return new MassMomentOfInertia<T, C>(new Number<T,C>((value/1e-1) * 1e3d));
			}
#endif

			/// <summary>
			///     Get MassMomentOfInertia from KilotonneSquareMeters.
			/// </summary>
#if WINDOWS_UWP
			[Windows.Foundation.Metadata.DefaultOverload]
			public static MassMomentOfInertia<T, C> FromKilotonneSquareMeters(Number<T, C> kilotonnesquaremeters)
			{
				Number<T,C> value = (Number<T,C>) kilotonnesquaremeters;
				return new MassMomentOfInertia<T, C>((value/1e-3) * 1e3d);
			}
#else
			public static MassMomentOfInertia<T, C> FromKilotonneSquareMeters(Number<T, C> kilotonnesquaremeters)
			{
				Number<T,C> value = (Number<T,C>) kilotonnesquaremeters;
				return new MassMomentOfInertia<T, C>(new Number<T,C>((value/1e-3) * 1e3d));
			}
#endif

			/// <summary>
			///     Get MassMomentOfInertia from KilotonneSquareMilimeters.
			/// </summary>
#if WINDOWS_UWP
			[Windows.Foundation.Metadata.DefaultOverload]
			public static MassMomentOfInertia<T, C> FromKilotonneSquareMilimeters(Number<T, C> kilotonnesquaremilimeters)
			{
				Number<T,C> value = (Number<T,C>) kilotonnesquaremilimeters;
				return new MassMomentOfInertia<T, C>((value/1e3) * 1e3d);
			}
#else
			public static MassMomentOfInertia<T, C> FromKilotonneSquareMilimeters(Number<T, C> kilotonnesquaremilimeters)
			{
				Number<T,C> value = (Number<T,C>) kilotonnesquaremilimeters;
				return new MassMomentOfInertia<T, C>(new Number<T,C>((value/1e3) * 1e3d));
			}
#endif

			/// <summary>
			///     Get MassMomentOfInertia from MegatonneSquareCentimeters.
			/// </summary>
#if WINDOWS_UWP
			[Windows.Foundation.Metadata.DefaultOverload]
			public static MassMomentOfInertia<T, C> FromMegatonneSquareCentimeters(Number<T, C> megatonnesquarecentimeters)
			{
				Number<T,C> value = (Number<T,C>) megatonnesquarecentimeters;
				return new MassMomentOfInertia<T, C>((value/1e1) * 1e6d);
			}
#else
			public static MassMomentOfInertia<T, C> FromMegatonneSquareCentimeters(Number<T, C> megatonnesquarecentimeters)
			{
				Number<T,C> value = (Number<T,C>) megatonnesquarecentimeters;
				return new MassMomentOfInertia<T, C>(new Number<T,C>((value/1e1) * 1e6d));
			}
#endif

			/// <summary>
			///     Get MassMomentOfInertia from MegatonneSquareDecimeters.
			/// </summary>
#if WINDOWS_UWP
			[Windows.Foundation.Metadata.DefaultOverload]
			public static MassMomentOfInertia<T, C> FromMegatonneSquareDecimeters(Number<T, C> megatonnesquaredecimeters)
			{
				Number<T,C> value = (Number<T,C>) megatonnesquaredecimeters;
				return new MassMomentOfInertia<T, C>((value/1e-1) * 1e6d);
			}
#else
			public static MassMomentOfInertia<T, C> FromMegatonneSquareDecimeters(Number<T, C> megatonnesquaredecimeters)
			{
				Number<T,C> value = (Number<T,C>) megatonnesquaredecimeters;
				return new MassMomentOfInertia<T, C>(new Number<T,C>((value/1e-1) * 1e6d));
			}
#endif

			/// <summary>
			///     Get MassMomentOfInertia from MegatonneSquareMeters.
			/// </summary>
#if WINDOWS_UWP
			[Windows.Foundation.Metadata.DefaultOverload]
			public static MassMomentOfInertia<T, C> FromMegatonneSquareMeters(Number<T, C> megatonnesquaremeters)
			{
				Number<T,C> value = (Number<T,C>) megatonnesquaremeters;
				return new MassMomentOfInertia<T, C>((value/1e-3) * 1e6d);
			}
#else
			public static MassMomentOfInertia<T, C> FromMegatonneSquareMeters(Number<T, C> megatonnesquaremeters)
			{
				Number<T,C> value = (Number<T,C>) megatonnesquaremeters;
				return new MassMomentOfInertia<T, C>(new Number<T,C>((value/1e-3) * 1e6d));
			}
#endif

			/// <summary>
			///     Get MassMomentOfInertia from MegatonneSquareMilimeters.
			/// </summary>
#if WINDOWS_UWP
			[Windows.Foundation.Metadata.DefaultOverload]
			public static MassMomentOfInertia<T, C> FromMegatonneSquareMilimeters(Number<T, C> megatonnesquaremilimeters)
			{
				Number<T,C> value = (Number<T,C>) megatonnesquaremilimeters;
				return new MassMomentOfInertia<T, C>((value/1e3) * 1e6d);
			}
#else
			public static MassMomentOfInertia<T, C> FromMegatonneSquareMilimeters(Number<T, C> megatonnesquaremilimeters)
			{
				Number<T,C> value = (Number<T,C>) megatonnesquaremilimeters;
				return new MassMomentOfInertia<T, C>(new Number<T,C>((value/1e3) * 1e6d));
			}
#endif

			/// <summary>
			///     Get MassMomentOfInertia from MilligramSquareCentimeters.
			/// </summary>
#if WINDOWS_UWP
			[Windows.Foundation.Metadata.DefaultOverload]
			public static MassMomentOfInertia<T, C> FromMilligramSquareCentimeters(Number<T, C> milligramsquarecentimeters)
			{
				Number<T,C> value = (Number<T,C>) milligramsquarecentimeters;
				return new MassMomentOfInertia<T, C>((value/1e7) * 1e-3d);
			}
#else
			public static MassMomentOfInertia<T, C> FromMilligramSquareCentimeters(Number<T, C> milligramsquarecentimeters)
			{
				Number<T,C> value = (Number<T,C>) milligramsquarecentimeters;
				return new MassMomentOfInertia<T, C>(new Number<T,C>((value/1e7) * 1e-3d));
			}
#endif

			/// <summary>
			///     Get MassMomentOfInertia from MilligramSquareDecimeters.
			/// </summary>
#if WINDOWS_UWP
			[Windows.Foundation.Metadata.DefaultOverload]
			public static MassMomentOfInertia<T, C> FromMilligramSquareDecimeters(Number<T, C> milligramsquaredecimeters)
			{
				Number<T,C> value = (Number<T,C>) milligramsquaredecimeters;
				return new MassMomentOfInertia<T, C>((value/1e5) * 1e-3d);
			}
#else
			public static MassMomentOfInertia<T, C> FromMilligramSquareDecimeters(Number<T, C> milligramsquaredecimeters)
			{
				Number<T,C> value = (Number<T,C>) milligramsquaredecimeters;
				return new MassMomentOfInertia<T, C>(new Number<T,C>((value/1e5) * 1e-3d));
			}
#endif

			/// <summary>
			///     Get MassMomentOfInertia from MilligramSquareMeters.
			/// </summary>
#if WINDOWS_UWP
			[Windows.Foundation.Metadata.DefaultOverload]
			public static MassMomentOfInertia<T, C> FromMilligramSquareMeters(Number<T, C> milligramsquaremeters)
			{
				Number<T,C> value = (Number<T,C>) milligramsquaremeters;
				return new MassMomentOfInertia<T, C>((value/1e3) * 1e-3d);
			}
#else
			public static MassMomentOfInertia<T, C> FromMilligramSquareMeters(Number<T, C> milligramsquaremeters)
			{
				Number<T,C> value = (Number<T,C>) milligramsquaremeters;
				return new MassMomentOfInertia<T, C>(new Number<T,C>((value/1e3) * 1e-3d));
			}
#endif

			/// <summary>
			///     Get MassMomentOfInertia from MilligramSquareMillimeters.
			/// </summary>
#if WINDOWS_UWP
			[Windows.Foundation.Metadata.DefaultOverload]
			public static MassMomentOfInertia<T, C> FromMilligramSquareMillimeters(Number<T, C> milligramsquaremillimeters)
			{
				Number<T,C> value = (Number<T,C>) milligramsquaremillimeters;
				return new MassMomentOfInertia<T, C>((value/1e9) * 1e-3d);
			}
#else
			public static MassMomentOfInertia<T, C> FromMilligramSquareMillimeters(Number<T, C> milligramsquaremillimeters)
			{
				Number<T,C> value = (Number<T,C>) milligramsquaremillimeters;
				return new MassMomentOfInertia<T, C>(new Number<T,C>((value/1e9) * 1e-3d));
			}
#endif

			/// <summary>
			///     Get MassMomentOfInertia from PoundSquareFeet.
			/// </summary>
#if WINDOWS_UWP
			[Windows.Foundation.Metadata.DefaultOverload]
			public static MassMomentOfInertia<T, C> FromPoundSquareFeet(Number<T, C> poundsquarefeet)
			{
				Number<T,C> value = (Number<T,C>) poundsquarefeet;
				return new MassMomentOfInertia<T, C>(value*4.21401101e-2);
			}
#else
			public static MassMomentOfInertia<T, C> FromPoundSquareFeet(Number<T, C> poundsquarefeet)
			{
				Number<T,C> value = (Number<T,C>) poundsquarefeet;
				return new MassMomentOfInertia<T, C>(new Number<T,C>(value*4.21401101e-2));
			}
#endif

			/// <summary>
			///     Get MassMomentOfInertia from PoundSquareInches.
			/// </summary>
#if WINDOWS_UWP
			[Windows.Foundation.Metadata.DefaultOverload]
			public static MassMomentOfInertia<T, C> FromPoundSquareInches(Number<T, C> poundsquareinches)
			{
				Number<T,C> value = (Number<T,C>) poundsquareinches;
				return new MassMomentOfInertia<T, C>(value*2.9263965e-4);
			}
#else
			public static MassMomentOfInertia<T, C> FromPoundSquareInches(Number<T, C> poundsquareinches)
			{
				Number<T,C> value = (Number<T,C>) poundsquareinches;
				return new MassMomentOfInertia<T, C>(new Number<T,C>(value*2.9263965e-4));
			}
#endif

			/// <summary>
			///     Get MassMomentOfInertia from TonneSquareCentimeters.
			/// </summary>
#if WINDOWS_UWP
			[Windows.Foundation.Metadata.DefaultOverload]
			public static MassMomentOfInertia<T, C> FromTonneSquareCentimeters(Number<T, C> tonnesquarecentimeters)
			{
				Number<T,C> value = (Number<T,C>) tonnesquarecentimeters;
				return new MassMomentOfInertia<T, C>(value/1e1);
			}
#else
			public static MassMomentOfInertia<T, C> FromTonneSquareCentimeters(Number<T, C> tonnesquarecentimeters)
			{
				Number<T,C> value = (Number<T,C>) tonnesquarecentimeters;
				return new MassMomentOfInertia<T, C>(new Number<T,C>(value/1e1));
			}
#endif

			/// <summary>
			///     Get MassMomentOfInertia from TonneSquareDecimeters.
			/// </summary>
#if WINDOWS_UWP
			[Windows.Foundation.Metadata.DefaultOverload]
			public static MassMomentOfInertia<T, C> FromTonneSquareDecimeters(Number<T, C> tonnesquaredecimeters)
			{
				Number<T,C> value = (Number<T,C>) tonnesquaredecimeters;
				return new MassMomentOfInertia<T, C>(value/1e-1);
			}
#else
			public static MassMomentOfInertia<T, C> FromTonneSquareDecimeters(Number<T, C> tonnesquaredecimeters)
			{
				Number<T,C> value = (Number<T,C>) tonnesquaredecimeters;
				return new MassMomentOfInertia<T, C>(new Number<T,C>(value/1e-1));
			}
#endif

			/// <summary>
			///     Get MassMomentOfInertia from TonneSquareMeters.
			/// </summary>
#if WINDOWS_UWP
			[Windows.Foundation.Metadata.DefaultOverload]
			public static MassMomentOfInertia<T, C> FromTonneSquareMeters(Number<T, C> tonnesquaremeters)
			{
				Number<T,C> value = (Number<T,C>) tonnesquaremeters;
				return new MassMomentOfInertia<T, C>(value/1e-3);
			}
#else
			public static MassMomentOfInertia<T, C> FromTonneSquareMeters(Number<T, C> tonnesquaremeters)
			{
				Number<T,C> value = (Number<T,C>) tonnesquaremeters;
				return new MassMomentOfInertia<T, C>(new Number<T,C>(value/1e-3));
			}
#endif

			/// <summary>
			///     Get MassMomentOfInertia from TonneSquareMilimeters.
			/// </summary>
#if WINDOWS_UWP
			[Windows.Foundation.Metadata.DefaultOverload]
			public static MassMomentOfInertia<T, C> FromTonneSquareMilimeters(Number<T, C> tonnesquaremilimeters)
			{
				Number<T,C> value = (Number<T,C>) tonnesquaremilimeters;
				return new MassMomentOfInertia<T, C>(value/1e3);
			}
#else
			public static MassMomentOfInertia<T, C> FromTonneSquareMilimeters(Number<T, C> tonnesquaremilimeters)
			{
				Number<T,C> value = (Number<T,C>) tonnesquaremilimeters;
				return new MassMomentOfInertia<T, C>(new Number<T,C>(value/1e3));
			}
#endif



			/// <summary>
			///     Dynamically convert from value and unit enum <see cref="MassMomentOfInertiaUnit" /> to <see cref="MassMomentOfInertia" />.
			/// </summary>
			/// <param name="value">Value to convert from.</param>
			/// <param name="fromUnit">Unit to convert from.</param>
			/// <returns>MassMomentOfInertia unit value.</returns>
#if WINDOWS_UWP
			// Fix name conflict with parameter "value"
			[return: System.Runtime.InteropServices.WindowsRuntime.ReturnValueName("returnValue")]
			public static MassMomentOfInertia<T, C> From(double value, MassMomentOfInertiaUnit fromUnit)
#else
			public static MassMomentOfInertia<T, C> From(Number<T, C> value, MassMomentOfInertiaUnit fromUnit)
#endif
			{
				switch (fromUnit)
				{
					case MassMomentOfInertiaUnit.GramSquareCentimeter:
						return FromGramSquareCentimeters(value);
					case MassMomentOfInertiaUnit.GramSquareDecimeter:
						return FromGramSquareDecimeters(value);
					case MassMomentOfInertiaUnit.GramSquareMeter:
						return FromGramSquareMeters(value);
					case MassMomentOfInertiaUnit.GramSquareMillimeter:
						return FromGramSquareMillimeters(value);
					case MassMomentOfInertiaUnit.KilogramSquareCentimeter:
						return FromKilogramSquareCentimeters(value);
					case MassMomentOfInertiaUnit.KilogramSquareDecimeter:
						return FromKilogramSquareDecimeters(value);
					case MassMomentOfInertiaUnit.KilogramSquareMeter:
						return FromKilogramSquareMeters(value);
					case MassMomentOfInertiaUnit.KilogramSquareMillimeter:
						return FromKilogramSquareMillimeters(value);
					case MassMomentOfInertiaUnit.KilotonneSquareCentimeter:
						return FromKilotonneSquareCentimeters(value);
					case MassMomentOfInertiaUnit.KilotonneSquareDecimeter:
						return FromKilotonneSquareDecimeters(value);
					case MassMomentOfInertiaUnit.KilotonneSquareMeter:
						return FromKilotonneSquareMeters(value);
					case MassMomentOfInertiaUnit.KilotonneSquareMilimeter:
						return FromKilotonneSquareMilimeters(value);
					case MassMomentOfInertiaUnit.MegatonneSquareCentimeter:
						return FromMegatonneSquareCentimeters(value);
					case MassMomentOfInertiaUnit.MegatonneSquareDecimeter:
						return FromMegatonneSquareDecimeters(value);
					case MassMomentOfInertiaUnit.MegatonneSquareMeter:
						return FromMegatonneSquareMeters(value);
					case MassMomentOfInertiaUnit.MegatonneSquareMilimeter:
						return FromMegatonneSquareMilimeters(value);
					case MassMomentOfInertiaUnit.MilligramSquareCentimeter:
						return FromMilligramSquareCentimeters(value);
					case MassMomentOfInertiaUnit.MilligramSquareDecimeter:
						return FromMilligramSquareDecimeters(value);
					case MassMomentOfInertiaUnit.MilligramSquareMeter:
						return FromMilligramSquareMeters(value);
					case MassMomentOfInertiaUnit.MilligramSquareMillimeter:
						return FromMilligramSquareMillimeters(value);
					case MassMomentOfInertiaUnit.PoundSquareFoot:
						return FromPoundSquareFeet(value);
					case MassMomentOfInertiaUnit.PoundSquareInch:
						return FromPoundSquareInches(value);
					case MassMomentOfInertiaUnit.TonneSquareCentimeter:
						return FromTonneSquareCentimeters(value);
					case MassMomentOfInertiaUnit.TonneSquareDecimeter:
						return FromTonneSquareDecimeters(value);
					case MassMomentOfInertiaUnit.TonneSquareMeter:
						return FromTonneSquareMeters(value);
					case MassMomentOfInertiaUnit.TonneSquareMilimeter:
						return FromTonneSquareMilimeters(value);

					default:
						throw new NotImplementedException("fromUnit: " + fromUnit);
				}
			}

			/// <summary>
			///     Get unit abbreviation string.
			/// </summary>
			/// <param name="unit">Unit to get abbreviation for.</param>
			/// <returns>Unit abbreviation string.</returns>
			[UsedImplicitly]
			public static string GetAbbreviation(MassMomentOfInertiaUnit unit)
			{
				return GetAbbreviation(unit, null);
			}

			/// <summary>
			///     Get unit abbreviation string.
			/// </summary>
			/// <param name="unit">Unit to get abbreviation for.</param>
			/// <param name="culture">Culture to use for localization. Defaults to Thread.CurrentUICulture.</param>
			/// <returns>Unit abbreviation string.</returns>
			[UsedImplicitly]
			public static string GetAbbreviation(MassMomentOfInertiaUnit unit, [CanBeNull] Culture culture)
			{
				return UnitSystem.GetCached(culture).GetDefaultAbbreviation(unit);
			}

			#endregion

			#region Arithmetic Operators

			// Windows Runtime Component does not allow operator overloads: https://msdn.microsoft.com/en-us/library/br230301.aspx
#if !WINDOWS_UWP
			public static MassMomentOfInertia<T, C> operator -(MassMomentOfInertia<T, C> right)
			{
				return new MassMomentOfInertia<T, C>(-right._kilogramSquareMeters);
			}

			public static MassMomentOfInertia<T, C> operator +(MassMomentOfInertia<T, C> left, MassMomentOfInertia<T, C> right)
			{
				return new MassMomentOfInertia<T, C>(left._kilogramSquareMeters + right._kilogramSquareMeters);
			}

			public static MassMomentOfInertia<T, C> operator -(MassMomentOfInertia<T, C> left, MassMomentOfInertia<T, C> right)
			{
				return new MassMomentOfInertia<T, C>(left._kilogramSquareMeters - right._kilogramSquareMeters);
			}

			public static MassMomentOfInertia<T, C> operator *(Number<T, C> left, MassMomentOfInertia<T, C> right)
			{
				return new MassMomentOfInertia<T, C>(left*right._kilogramSquareMeters);
			}

			public static MassMomentOfInertia<T, C> operator *(MassMomentOfInertia<T, C> left, double right)
			{
				return new MassMomentOfInertia<T, C>(left._kilogramSquareMeters*right);
			}

			public static MassMomentOfInertia<T, C> operator /(MassMomentOfInertia<T, C> left, double right)
			{
				return new MassMomentOfInertia<T, C>(left._kilogramSquareMeters/right);
			}

			public static double operator /(MassMomentOfInertia<T, C> left, MassMomentOfInertia<T, C> right)
			{
				return Convert.ToDouble(left._kilogramSquareMeters/right._kilogramSquareMeters);
			}
#endif

			#endregion

			#region Equality / IComparable

			public int CompareTo(object obj)
			{
				if (obj == null) throw new ArgumentNullException("obj");
				if (!(obj is MassMomentOfInertia<T, C>)) throw new ArgumentException("Expected type MassMomentOfInertia.", "obj");
				return CompareTo((MassMomentOfInertia<T, C>) obj);
			}

			// Windows Runtime Component does not allow public methods/ctors with same number of parameters: https://msdn.microsoft.com/en-us/library/br230301.aspx#Overloaded methods
#if WINDOWS_UWP
			internal
#else
			public
#endif
			int CompareTo(MassMomentOfInertia<T, C> other)
			{
				return _kilogramSquareMeters.CompareTo(other._kilogramSquareMeters);
			}

			// Windows Runtime Component does not allow operator overloads: https://msdn.microsoft.com/en-us/library/br230301.aspx
#if !WINDOWS_UWP
			public static bool operator <=(MassMomentOfInertia<T, C> left, MassMomentOfInertia<T, C> right)
			{
				return left._kilogramSquareMeters <= right._kilogramSquareMeters;
			}

			public static bool operator >=(MassMomentOfInertia<T, C> left, MassMomentOfInertia<T, C> right)
			{
				return left._kilogramSquareMeters >= right._kilogramSquareMeters;
			}

			public static bool operator <(MassMomentOfInertia<T, C> left, MassMomentOfInertia<T, C> right)
			{
				return left._kilogramSquareMeters < right._kilogramSquareMeters;
			}

			public static bool operator >(MassMomentOfInertia<T, C> left, MassMomentOfInertia<T, C> right)
			{
				return left._kilogramSquareMeters > right._kilogramSquareMeters;
			}

			[Obsolete("It is not safe to compare equality due to using System.Double as the internal representation. It is very easy to get slightly different values due to floating point operations. Instead use Equals(other, maxError) to provide the max allowed error.")]
        public static bool operator ==(MassMomentOfInertia<T, C> left, MassMomentOfInertia<T, C> right)
			{
				// ReSharper disable once CompareOfFloatsByEqualityOperator
				return left._kilogramSquareMeters == right._kilogramSquareMeters;
			}

			[Obsolete("It is not safe to compare equality due to using System.Double as the internal representation. It is very easy to get slightly different values due to floating point operations. Instead use Equals(other, maxError) to provide the max allowed error.")]
        public static bool operator !=(MassMomentOfInertia<T, C> left, MassMomentOfInertia<T, C> right)
			{
				// ReSharper disable once CompareOfFloatsByEqualityOperator
				return left._kilogramSquareMeters != right._kilogramSquareMeters;
			}
#endif

			[Obsolete("It is not safe to compare equality due to using System.Double as the internal representation. It is very easy to get slightly different values due to floating point operations. Instead use Equals(other, maxError) to provide the max allowed error.")]
        public override bool Equals(object obj)
			{
				if (obj == null || GetType() != obj.GetType())
				{
					return false;
				}

				return _kilogramSquareMeters.Equals(((MassMomentOfInertia<T, C>) obj)._kilogramSquareMeters);
			}

			/// <summary>
			///     Compare equality to another MassMomentOfInertia by specifying a max allowed difference.
			///     Note that it is advised against specifying zero difference, due to the nature
			///     of floating point operations and using System.Double internally.
			/// </summary>
			/// <param name="other">Other quantity to compare to.</param>
			/// <param name="maxError">Max error allowed.</param>
			/// <returns>True if the difference between the two values is not greater than the specified max.</returns>
			public bool Equals(MassMomentOfInertia<T, C> other, MassMomentOfInertia<T, C> maxError)
			{
				return Math.Abs((decimal)_kilogramSquareMeters - (decimal)other._kilogramSquareMeters) <= maxError._kilogramSquareMeters;
			}

			public override int GetHashCode()
			{
				return _kilogramSquareMeters.GetHashCode();
			}

			#endregion

			#region Conversion

			/// <summary>
			///     Convert to the unit representation <paramref name="unit" />.
			/// </summary>
			/// <returns>Value in new unit if successful, exception otherwise.</returns>
			/// <exception cref="NotImplementedException">If conversion was not successful.</exception>
			public Number<T, C> As(MassMomentOfInertiaUnit unit)
			{
				switch (unit)
				{
					case MassMomentOfInertiaUnit.GramSquareCentimeter:
						return GramSquareCentimeters;
					case MassMomentOfInertiaUnit.GramSquareDecimeter:
						return GramSquareDecimeters;
					case MassMomentOfInertiaUnit.GramSquareMeter:
						return GramSquareMeters;
					case MassMomentOfInertiaUnit.GramSquareMillimeter:
						return GramSquareMillimeters;
					case MassMomentOfInertiaUnit.KilogramSquareCentimeter:
						return KilogramSquareCentimeters;
					case MassMomentOfInertiaUnit.KilogramSquareDecimeter:
						return KilogramSquareDecimeters;
					case MassMomentOfInertiaUnit.KilogramSquareMeter:
						return KilogramSquareMeters;
					case MassMomentOfInertiaUnit.KilogramSquareMillimeter:
						return KilogramSquareMillimeters;
					case MassMomentOfInertiaUnit.KilotonneSquareCentimeter:
						return KilotonneSquareCentimeters;
					case MassMomentOfInertiaUnit.KilotonneSquareDecimeter:
						return KilotonneSquareDecimeters;
					case MassMomentOfInertiaUnit.KilotonneSquareMeter:
						return KilotonneSquareMeters;
					case MassMomentOfInertiaUnit.KilotonneSquareMilimeter:
						return KilotonneSquareMilimeters;
					case MassMomentOfInertiaUnit.MegatonneSquareCentimeter:
						return MegatonneSquareCentimeters;
					case MassMomentOfInertiaUnit.MegatonneSquareDecimeter:
						return MegatonneSquareDecimeters;
					case MassMomentOfInertiaUnit.MegatonneSquareMeter:
						return MegatonneSquareMeters;
					case MassMomentOfInertiaUnit.MegatonneSquareMilimeter:
						return MegatonneSquareMilimeters;
					case MassMomentOfInertiaUnit.MilligramSquareCentimeter:
						return MilligramSquareCentimeters;
					case MassMomentOfInertiaUnit.MilligramSquareDecimeter:
						return MilligramSquareDecimeters;
					case MassMomentOfInertiaUnit.MilligramSquareMeter:
						return MilligramSquareMeters;
					case MassMomentOfInertiaUnit.MilligramSquareMillimeter:
						return MilligramSquareMillimeters;
					case MassMomentOfInertiaUnit.PoundSquareFoot:
						return PoundSquareFeet;
					case MassMomentOfInertiaUnit.PoundSquareInch:
						return PoundSquareInches;
					case MassMomentOfInertiaUnit.TonneSquareCentimeter:
						return TonneSquareCentimeters;
					case MassMomentOfInertiaUnit.TonneSquareDecimeter:
						return TonneSquareDecimeters;
					case MassMomentOfInertiaUnit.TonneSquareMeter:
						return TonneSquareMeters;
					case MassMomentOfInertiaUnit.TonneSquareMilimeter:
						return TonneSquareMilimeters;

					default:
						throw new NotImplementedException("unit: " + unit);
				}
			}

			#endregion

			#region Parsing

			/// <summary>
			///     Parse a string with one or two quantities of the format "&lt;quantity&gt; &lt;unit&gt;".
			/// </summary>
			/// <param name="str">String to parse. Typically in the form: {number} {unit}</param>
			/// <example>
			///     Length.Parse("5.5 m", new CultureInfo("en-US"));
			/// </example>
			/// <exception cref="ArgumentNullException">The value of 'str' cannot be null. </exception>
			/// <exception cref="ArgumentException">
			///     Expected string to have one or two pairs of quantity and unit in the format
			///     "&lt;quantity&gt; &lt;unit&gt;". Eg. "5.5 m" or "1ft 2in"
			/// </exception>
			/// <exception cref="AmbiguousUnitParseException">
			///     More than one unit is represented by the specified unit abbreviation.
			///     Example: Volume.Parse("1 cup") will throw, because it can refer to any of
			///     <see cref="VolumeUnit.MetricCup" />, <see cref="VolumeUnit.UsLegalCup" /> and <see cref="VolumeUnit.UsCustomaryCup" />.
			/// </exception>
			/// <exception cref="UnitsNetException">
			///     If anything else goes wrong, typically due to a bug or unhandled case.
			///     We wrap exceptions in <see cref="UnitsNetException" /> to allow you to distinguish
			///     Units.NET exceptions from other exceptions.
			/// </exception>
			public static MassMomentOfInertia<T, C> Parse(string str)
			{
				return Parse(str, null);
			}

			/// <summary>
			///     Parse a string with one or two quantities of the format "&lt;quantity&gt; &lt;unit&gt;".
			/// </summary>
			/// <param name="str">String to parse. Typically in the form: {number} {unit}</param>
			/// <param name="culture">Format to use when parsing number and unit. If it is null, it defaults to <see cref="NumberFormatInfo.CurrentInfo"/> for parsing the number and <see cref="CultureInfo.CurrentUICulture"/> for parsing the unit abbreviation by culture/language.</param>
			/// <example>
			///     Length.Parse("5.5 m", new CultureInfo("en-US"));
			/// </example>
			/// <exception cref="ArgumentNullException">The value of 'str' cannot be null. </exception>
			/// <exception cref="ArgumentException">
			///     Expected string to have one or two pairs of quantity and unit in the format
			///     "&lt;quantity&gt; &lt;unit&gt;". Eg. "5.5 m" or "1ft 2in"
			/// </exception>
			/// <exception cref="AmbiguousUnitParseException">
			///     More than one unit is represented by the specified unit abbreviation.
			///     Example: Volume.Parse("1 cup") will throw, because it can refer to any of
			///     <see cref="VolumeUnit.MetricCup" />, <see cref="VolumeUnit.UsLegalCup" /> and <see cref="VolumeUnit.UsCustomaryCup" />.
			/// </exception>
			/// <exception cref="UnitsNetException">
			///     If anything else goes wrong, typically due to a bug or unhandled case.
			///     We wrap exceptions in <see cref="UnitsNetException" /> to allow you to distinguish
			///     Units.NET exceptions from other exceptions.
			/// </exception>
			public static MassMomentOfInertia<T, C> Parse(string str, [CanBeNull] Culture culture)
			{
				if (str == null) throw new ArgumentNullException("str");

			// Windows Runtime Component does not support CultureInfo type, so use culture name string for public methods instead: https://msdn.microsoft.com/en-us/library/br230301.aspx
#if WINDOWS_UWP
				IFormatProvider formatProvider = culture == null ? null : new CultureInfo(culture);
#else
				IFormatProvider formatProvider = culture;
#endif
					return QuantityParser.Parse<MassMomentOfInertia<T, C>, MassMomentOfInertiaUnit>(str, formatProvider,
					delegate(string value, string unit, IFormatProvider formatProvider2)
					{
						double parsedValue = double.Parse(value, formatProvider2);
						MassMomentOfInertiaUnit parsedUnit = ParseUnit(unit, formatProvider2);
						return From(new C().ConvertToNumber(parsedValue), parsedUnit);
					}, (x, y) => FromKilogramSquareMeters((Number<T, C>)x.KilogramSquareMeters + y.KilogramSquareMeters));
			}

			/// <summary>
			///     Try to parse a string with one or two quantities of the format "&lt;quantity&gt; &lt;unit&gt;".
			/// </summary>
			/// <param name="str">String to parse. Typically in the form: {number} {unit}</param>
			/// <param name="result">Resulting unit quantity if successful.</param>
			/// <example>
			///     Length.Parse("5.5 m", new CultureInfo("en-US"));
			/// </example>
			public static bool TryParse([CanBeNull] string str, out MassMomentOfInertia<T, C> result)
			{
				return TryParse(str, null, out result);
			}

			/// <summary>
			///     Try to parse a string with one or two quantities of the format "&lt;quantity&gt; &lt;unit&gt;".
			/// </summary>
			/// <param name="str">String to parse. Typically in the form: {number} {unit}</param>
			/// <param name="culture">Format to use when parsing number and unit. If it is null, it defaults to <see cref="NumberFormatInfo.CurrentInfo"/> for parsing the number and <see cref="CultureInfo.CurrentUICulture"/> for parsing the unit abbreviation by culture/language.</param>
			/// <param name="result">Resulting unit quantity if successful.</param>
			/// <example>
			///     Length.Parse("5.5 m", new CultureInfo("en-US"));
			/// </example>
			public static bool TryParse([CanBeNull] string str, [CanBeNull] Culture culture, out MassMomentOfInertia<T, C> result)
			{
				try
				{
					result = Parse(str, culture);
					return true;
				}
				catch
				{
					result = default(MassMomentOfInertia<T, C>);
					return false;
				}
			}

			/// <summary>
			///     Parse a unit string.
			/// </summary>
			/// <example>
			///     Length.ParseUnit("m", new CultureInfo("en-US"));
			/// </example>
			/// <exception cref="ArgumentNullException">The value of 'str' cannot be null. </exception>
			/// <exception cref="UnitsNetException">Error parsing string.</exception>
			public static MassMomentOfInertiaUnit ParseUnit(string str)
			{
				return ParseUnit(str, (IFormatProvider)null);
			}

			/// <summary>
			///     Parse a unit string.
			/// </summary>
			/// <example>
			///     Length.ParseUnit("m", new CultureInfo("en-US"));
			/// </example>
			/// <exception cref="ArgumentNullException">The value of 'str' cannot be null. </exception>
			/// <exception cref="UnitsNetException">Error parsing string.</exception>
			public static MassMomentOfInertiaUnit ParseUnit(string str, [CanBeNull] string cultureName)
			{
				return ParseUnit(str, cultureName == null ? null : new CultureInfo(cultureName));
			}

			/// <summary>
			///     Parse a unit string.
			/// </summary>
			/// <example>
			///     Length.ParseUnit("m", new CultureInfo("en-US"));
			/// </example>
			/// <exception cref="ArgumentNullException">The value of 'str' cannot be null. </exception>
			/// <exception cref="UnitsNetException">Error parsing string.</exception>

			// Windows Runtime Component does not allow public methods/ctors with same number of parameters: https://msdn.microsoft.com/en-us/library/br230301.aspx#Overloaded methods
#if WINDOWS_UWP
			internal
#else
			public
#endif
			static MassMomentOfInertiaUnit ParseUnit(string str, IFormatProvider formatProvider = null)
			{
				if (str == null) throw new ArgumentNullException("str");

				var unitSystem = UnitSystem.GetCached(formatProvider);
				var unit = unitSystem.Parse<MassMomentOfInertiaUnit>(str.Trim());

				if (unit == MassMomentOfInertiaUnit.Undefined)
				{
					var newEx = new UnitsNetException("Error parsing string. The unit is not a recognized MassMomentOfInertiaUnit.");
					newEx.Data["input"] = str;
					newEx.Data["formatprovider"] = formatProvider?.ToString() ?? "(null)";
					throw newEx;
				}

				return unit;
			}

			#endregion

			/// <summary>
			///     Set the default unit used by ToString(). Default is KilogramSquareMeter
			/// </summary>
			public static MassMomentOfInertiaUnit ToStringDefaultUnit { get; set; } = MassMomentOfInertiaUnit.KilogramSquareMeter;

			/// <summary>
			///     Get default string representation of value and unit.
			/// </summary>
			/// <returns>String representation.</returns>
			public override string ToString()
			{
				return ToString(ToStringDefaultUnit);
			}

			/// <summary>
			///     Get string representation of value and unit. Using current UI culture and two significant digits after radix.
			/// </summary>
			/// <param name="unit">Unit representation to use.</param>
			/// <returns>String representation.</returns>
			public string ToString(MassMomentOfInertiaUnit unit)
			{
				return ToString(unit, null, 2);
			}

			/// <summary>
			///     Get string representation of value and unit. Using two significant digits after radix.
			/// </summary>
			/// <param name="unit">Unit representation to use.</param>
			/// <param name="culture">Culture to use for localization and number formatting.</param>
			/// <returns>String representation.</returns>
			public string ToString(MassMomentOfInertiaUnit unit, [CanBeNull] Culture culture)
			{
				return ToString(unit, culture, 2);
			}

			/// <summary>
			///     Get string representation of value and unit.
			/// </summary>
			/// <param name="unit">Unit representation to use.</param>
			/// <param name="culture">Culture to use for localization and number formatting.</param>
			/// <param name="significantDigitsAfterRadix">The number of significant digits after the radix point.</param>
			/// <returns>String representation.</returns>
			[UsedImplicitly]
			public string ToString(MassMomentOfInertiaUnit unit, [CanBeNull] Culture culture, int significantDigitsAfterRadix)
			{
				Number<T, C>  value = As(unit);
				string format = UnitFormatter.GetFormat((double)value, significantDigitsAfterRadix);
				return ToString(unit, culture, format);
			}

			/// <summary>
			///     Get string representation of value and unit.
			/// </summary>
			/// <param name="culture">Culture to use for localization and number formatting.</param>
			/// <param name="unit">Unit representation to use.</param>
			/// <param name="format">String format to use. Default:  "{0:0.##} {1} for value and unit abbreviation respectively."</param>
			/// <param name="args">Arguments for string format. Value and unit are implictly included as arguments 0 and 1.</param>
			/// <returns>String representation.</returns>
			[UsedImplicitly]
			public string ToString(MassMomentOfInertiaUnit unit, [CanBeNull] Culture culture, [NotNull] string format,
				[NotNull] params object[] args)
			{
				if (format == null) throw new ArgumentNullException(nameof(format));
				if (args == null) throw new ArgumentNullException(nameof(args));

			// Windows Runtime Component does not support CultureInfo type, so use culture name string for public methods instead: https://msdn.microsoft.com/en-us/library/br230301.aspx
#if WINDOWS_UWP
				IFormatProvider formatProvider = culture == null ? null : new CultureInfo(culture);
#else
				IFormatProvider formatProvider = culture;
#endif
				Number<T, C>  value = As(unit);
				object[] formatArgs = UnitFormatter.GetFormatArgs(unit, (double)value, formatProvider, args);
				return string.Format(formatProvider, format, formatArgs);
			}

			/// <summary>
			/// Represents the largest possible value of MassMomentOfInertia
			/// </summary>
			public static Number<T, C> MaxValue
			{
				get
				{
					return Number<T, C>.MaxValue;
				}
			}

			/// <summary>
			/// Represents the smallest possible value of MassMomentOfInertia
			/// </summary>
			public static Number<T, C> MinValue
			{
				get
				{
					return Number<T, C>.MinValue;
				}
			}
		}
	}
}
