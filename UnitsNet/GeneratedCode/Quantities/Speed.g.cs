//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by \generate-code.bat.
//
//     Changes to this file will be lost when the code is regenerated.
//     The build server regenerates the code before each build and a pre-build
//     step will regenerate the code on each local build.
//
//     See https://github.com/angularsen/UnitsNet/wiki/Adding-a-New-Unit for how to add or edit units.
//
//     Add CustomCode\Quantities\MyUnit.extra.cs files to add code to generated quantities.
//     Add Extensions\MyUnitExtensions.cs to decorate quantities with new behavior.
//     Add UnitDefinitions\MyUnit.json and run GeneratUnits.bat to generate new units or quantities.
//
// </auto-generated>
//------------------------------------------------------------------------------

// Copyright (c) 2013 Andreas Gullberg Larsen (andreas.larsen84@gmail.com).
// https://github.com/angularsen/UnitsNet
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
// THE SOFTWARE.

using System;
using System.Collections.Generic;
using System.Globalization;
using System.Text.RegularExpressions;
using System.Linq;
using JetBrains.Annotations;
using UnitsNet.Units;

// Windows Runtime Component does not support CultureInfo type, so use culture name string instead for public methods: https://msdn.microsoft.com/en-us/library/br230301.aspx
#if WINDOWS_UWP
using Culture = System.String;
#else
using Culture = System.IFormatProvider;
#endif

// ReSharper disable once CheckNamespace
namespace UnitsNet
{
    using UnitsNet.InternalHelpers.Calculators;

    /// <summary>
    ///     In everyday use and in kinematics, the speed of an object is the magnitude of its velocity (the rate of change of its position); it is thus a scalar quantity.[1] The average speed of an object in an interval of time is the distance travelled by the object divided by the duration of the interval;[2] the instantaneous speed is the limit of the average speed as the duration of the time interval approaches zero.
    /// </summary>
    // ReSharper disable once PartialTypeWithSinglePart

    // Windows Runtime Component has constraints on public types: https://msdn.microsoft.com/en-us/library/br230301.aspx#Declaring types in Windows Runtime Components
    // Public structures can't have any members other than public fields, and those fields must be value types or strings.
    // Public classes must be sealed (NotInheritable in Visual Basic). If your programming model requires polymorphism, you can create a public interface and implement that interface on the classes that must be polymorphic.
	public partial class Speed : UnitsNet.Generic.Speed<double, UnitsNet.InternalHelpers.Calculators.DoubleCalculator> { }

	namespace Generic
	{
#if WINDOWS_UWP
		public sealed partial class Speed
#else
		public partial class Speed <T, C> : IComparable, IComparable<Speed<T, C>>
			where T : struct
			where C : InternalHelpers.Calculators.INumberCalculator<T>, new()
#endif
		{
			/// <summary>
			///     Base unit of Speed.
			/// </summary>
			private readonly Number<T, C> _metersPerSecond;

			public Speed() : this(new Number<T,C>())
			{
			}

			public Speed(T meterspersecond)
			{
				_metersPerSecond = (meterspersecond);
			}

			public Speed(Number<T, C> meterspersecond)
			{
				_metersPerSecond = (meterspersecond);
			}

			#region Properties

			/// <summary>
			///     The <see cref="QuantityType" /> of this quantity.
			/// </summary>
			public static QuantityType QuantityType => QuantityType.Speed;

			/// <summary>
			///     The base unit representation of this quantity for the numeric value stored internally. All conversions go via this value.
			/// </summary>
			public static SpeedUnit BaseUnit
			{
				get { return SpeedUnit.MeterPerSecond; }
			}

			/// <summary>
			///     All units of measurement for the Speed quantity.
			/// </summary>
			public static SpeedUnit[] Units { get; } = Enum.GetValues(typeof(SpeedUnit)).Cast<SpeedUnit>().ToArray();

			/// <summary>
			///     Get Speed in CentimetersPerHour.
			/// </summary>
			public Number<T, C> CentimetersPerHour
			{
				get { return (_metersPerSecond*3600) / 1e-2d; }
			}

			/// <summary>
			///     Get Speed in CentimetersPerMinutes.
			/// </summary>
			public Number<T, C> CentimetersPerMinutes
			{
				get { return (_metersPerSecond*60) / 1e-2d; }
			}

			/// <summary>
			///     Get Speed in CentimetersPerSecond.
			/// </summary>
			public Number<T, C> CentimetersPerSecond
			{
				get { return (_metersPerSecond) / 1e-2d; }
			}

			/// <summary>
			///     Get Speed in DecimetersPerMinutes.
			/// </summary>
			public Number<T, C> DecimetersPerMinutes
			{
				get { return (_metersPerSecond*60) / 1e-1d; }
			}

			/// <summary>
			///     Get Speed in DecimetersPerSecond.
			/// </summary>
			public Number<T, C> DecimetersPerSecond
			{
				get { return (_metersPerSecond) / 1e-1d; }
			}

			/// <summary>
			///     Get Speed in FeetPerHour.
			/// </summary>
			public Number<T, C> FeetPerHour
			{
				get { return _metersPerSecond/0.3048*3600; }
			}

			/// <summary>
			///     Get Speed in FeetPerMinute.
			/// </summary>
			public Number<T, C> FeetPerMinute
			{
				get { return _metersPerSecond/0.3048*60; }
			}

			/// <summary>
			///     Get Speed in FeetPerSecond.
			/// </summary>
			public Number<T, C> FeetPerSecond
			{
				get { return _metersPerSecond/0.3048; }
			}

			/// <summary>
			///     Get Speed in InchesPerHour.
			/// </summary>
			public Number<T, C> InchesPerHour
			{
				get { return (_metersPerSecond/2.54e-2)*3600; }
			}

			/// <summary>
			///     Get Speed in InchesPerMinute.
			/// </summary>
			public Number<T, C> InchesPerMinute
			{
				get { return (_metersPerSecond/2.54e-2)*60; }
			}

			/// <summary>
			///     Get Speed in InchesPerSecond.
			/// </summary>
			public Number<T, C> InchesPerSecond
			{
				get { return _metersPerSecond/2.54e-2; }
			}

			/// <summary>
			///     Get Speed in KilometersPerHour.
			/// </summary>
			public Number<T, C> KilometersPerHour
			{
				get { return (_metersPerSecond*3600) / 1e3d; }
			}

			/// <summary>
			///     Get Speed in KilometersPerMinutes.
			/// </summary>
			public Number<T, C> KilometersPerMinutes
			{
				get { return (_metersPerSecond*60) / 1e3d; }
			}

			/// <summary>
			///     Get Speed in KilometersPerSecond.
			/// </summary>
			public Number<T, C> KilometersPerSecond
			{
				get { return (_metersPerSecond) / 1e3d; }
			}

			/// <summary>
			///     Get Speed in Knots.
			/// </summary>
			public Number<T, C> Knots
			{
				get { return _metersPerSecond/0.514444; }
			}

			/// <summary>
			///     Get Speed in MetersPerHour.
			/// </summary>
			public Number<T, C> MetersPerHour
			{
				get { return _metersPerSecond*3600; }
			}

			/// <summary>
			///     Get Speed in MetersPerMinutes.
			/// </summary>
			public Number<T, C> MetersPerMinutes
			{
				get { return _metersPerSecond*60; }
			}

			/// <summary>
			///     Get Speed in MetersPerSecond.
			/// </summary>
			public Number<T, C> MetersPerSecond
			{
				get { return _metersPerSecond; }
			}

			/// <summary>
			///     Get Speed in MicrometersPerMinutes.
			/// </summary>
			public Number<T, C> MicrometersPerMinutes
			{
				get { return (_metersPerSecond*60) / 1e-6d; }
			}

			/// <summary>
			///     Get Speed in MicrometersPerSecond.
			/// </summary>
			public Number<T, C> MicrometersPerSecond
			{
				get { return (_metersPerSecond) / 1e-6d; }
			}

			/// <summary>
			///     Get Speed in MilesPerHour.
			/// </summary>
			public Number<T, C> MilesPerHour
			{
				get { return _metersPerSecond/0.44704; }
			}

			/// <summary>
			///     Get Speed in MillimetersPerHour.
			/// </summary>
			public Number<T, C> MillimetersPerHour
			{
				get { return (_metersPerSecond*3600) / 1e-3d; }
			}

			/// <summary>
			///     Get Speed in MillimetersPerMinutes.
			/// </summary>
			public Number<T, C> MillimetersPerMinutes
			{
				get { return (_metersPerSecond*60) / 1e-3d; }
			}

			/// <summary>
			///     Get Speed in MillimetersPerSecond.
			/// </summary>
			public Number<T, C> MillimetersPerSecond
			{
				get { return (_metersPerSecond) / 1e-3d; }
			}

			/// <summary>
			///     Get Speed in NanometersPerMinutes.
			/// </summary>
			public Number<T, C> NanometersPerMinutes
			{
				get { return (_metersPerSecond*60) / 1e-9d; }
			}

			/// <summary>
			///     Get Speed in NanometersPerSecond.
			/// </summary>
			public Number<T, C> NanometersPerSecond
			{
				get { return (_metersPerSecond) / 1e-9d; }
			}

			/// <summary>
			///     Get Speed in UsSurveyFeetPerHour.
			/// </summary>
			public Number<T, C> UsSurveyFeetPerHour
			{
				get { return (_metersPerSecond*3937/1200)*3600; }
			}

			/// <summary>
			///     Get Speed in UsSurveyFeetPerMinute.
			/// </summary>
			public Number<T, C> UsSurveyFeetPerMinute
			{
				get { return (_metersPerSecond*3937/1200)*60; }
			}

			/// <summary>
			///     Get Speed in UsSurveyFeetPerSecond.
			/// </summary>
			public Number<T, C> UsSurveyFeetPerSecond
			{
				get { return _metersPerSecond*3937/1200; }
			}

			/// <summary>
			///     Get Speed in YardsPerHour.
			/// </summary>
			public Number<T, C> YardsPerHour
			{
				get { return _metersPerSecond/0.9144*3600; }
			}

			/// <summary>
			///     Get Speed in YardsPerMinute.
			/// </summary>
			public Number<T, C> YardsPerMinute
			{
				get { return _metersPerSecond/0.9144*60; }
			}

			/// <summary>
			///     Get Speed in YardsPerSecond.
			/// </summary>
			public Number<T, C> YardsPerSecond
			{
				get { return _metersPerSecond/0.9144; }
			}

			#endregion

			#region Static

			public static Speed<T, C> Zero
			{
				get { return new Speed<T, C>(); }
			}

			/// <summary>
			///     Get Speed from CentimetersPerHour.
			/// </summary>
#if WINDOWS_UWP
			[Windows.Foundation.Metadata.DefaultOverload]
			public static Speed<T, C> FromCentimetersPerHour(Number<T, C> centimetersperhour)
			{
				Number<T,C> value = (Number<T,C>) centimetersperhour;
				return new Speed<T, C>((value/3600) * 1e-2d);
			}
#else
			public static Speed<T, C> FromCentimetersPerHour(Number<T, C> centimetersperhour)
			{
				Number<T,C> value = (Number<T,C>) centimetersperhour;
				return new Speed<T, C>(new Number<T,C>((value/3600) * 1e-2d));
			}
#endif

			/// <summary>
			///     Get Speed from CentimetersPerMinutes.
			/// </summary>
#if WINDOWS_UWP
			[Windows.Foundation.Metadata.DefaultOverload]
			public static Speed<T, C> FromCentimetersPerMinutes(Number<T, C> centimetersperminutes)
			{
				Number<T,C> value = (Number<T,C>) centimetersperminutes;
				return new Speed<T, C>((value/60) * 1e-2d);
			}
#else
			public static Speed<T, C> FromCentimetersPerMinutes(Number<T, C> centimetersperminutes)
			{
				Number<T,C> value = (Number<T,C>) centimetersperminutes;
				return new Speed<T, C>(new Number<T,C>((value/60) * 1e-2d));
			}
#endif

			/// <summary>
			///     Get Speed from CentimetersPerSecond.
			/// </summary>
#if WINDOWS_UWP
			[Windows.Foundation.Metadata.DefaultOverload]
			public static Speed<T, C> FromCentimetersPerSecond(Number<T, C> centimeterspersecond)
			{
				Number<T,C> value = (Number<T,C>) centimeterspersecond;
				return new Speed<T, C>((value) * 1e-2d);
			}
#else
			public static Speed<T, C> FromCentimetersPerSecond(Number<T, C> centimeterspersecond)
			{
				Number<T,C> value = (Number<T,C>) centimeterspersecond;
				return new Speed<T, C>(new Number<T,C>((value) * 1e-2d));
			}
#endif

			/// <summary>
			///     Get Speed from DecimetersPerMinutes.
			/// </summary>
#if WINDOWS_UWP
			[Windows.Foundation.Metadata.DefaultOverload]
			public static Speed<T, C> FromDecimetersPerMinutes(Number<T, C> decimetersperminutes)
			{
				Number<T,C> value = (Number<T,C>) decimetersperminutes;
				return new Speed<T, C>((value/60) * 1e-1d);
			}
#else
			public static Speed<T, C> FromDecimetersPerMinutes(Number<T, C> decimetersperminutes)
			{
				Number<T,C> value = (Number<T,C>) decimetersperminutes;
				return new Speed<T, C>(new Number<T,C>((value/60) * 1e-1d));
			}
#endif

			/// <summary>
			///     Get Speed from DecimetersPerSecond.
			/// </summary>
#if WINDOWS_UWP
			[Windows.Foundation.Metadata.DefaultOverload]
			public static Speed<T, C> FromDecimetersPerSecond(Number<T, C> decimeterspersecond)
			{
				Number<T,C> value = (Number<T,C>) decimeterspersecond;
				return new Speed<T, C>((value) * 1e-1d);
			}
#else
			public static Speed<T, C> FromDecimetersPerSecond(Number<T, C> decimeterspersecond)
			{
				Number<T,C> value = (Number<T,C>) decimeterspersecond;
				return new Speed<T, C>(new Number<T,C>((value) * 1e-1d));
			}
#endif

			/// <summary>
			///     Get Speed from FeetPerHour.
			/// </summary>
#if WINDOWS_UWP
			[Windows.Foundation.Metadata.DefaultOverload]
			public static Speed<T, C> FromFeetPerHour(Number<T, C> feetperhour)
			{
				Number<T,C> value = (Number<T,C>) feetperhour;
				return new Speed<T, C>(value*0.3048/3600);
			}
#else
			public static Speed<T, C> FromFeetPerHour(Number<T, C> feetperhour)
			{
				Number<T,C> value = (Number<T,C>) feetperhour;
				return new Speed<T, C>(new Number<T,C>(value*0.3048/3600));
			}
#endif

			/// <summary>
			///     Get Speed from FeetPerMinute.
			/// </summary>
#if WINDOWS_UWP
			[Windows.Foundation.Metadata.DefaultOverload]
			public static Speed<T, C> FromFeetPerMinute(Number<T, C> feetperminute)
			{
				Number<T,C> value = (Number<T,C>) feetperminute;
				return new Speed<T, C>(value*0.3048/60);
			}
#else
			public static Speed<T, C> FromFeetPerMinute(Number<T, C> feetperminute)
			{
				Number<T,C> value = (Number<T,C>) feetperminute;
				return new Speed<T, C>(new Number<T,C>(value*0.3048/60));
			}
#endif

			/// <summary>
			///     Get Speed from FeetPerSecond.
			/// </summary>
#if WINDOWS_UWP
			[Windows.Foundation.Metadata.DefaultOverload]
			public static Speed<T, C> FromFeetPerSecond(Number<T, C> feetpersecond)
			{
				Number<T,C> value = (Number<T,C>) feetpersecond;
				return new Speed<T, C>(value*0.3048);
			}
#else
			public static Speed<T, C> FromFeetPerSecond(Number<T, C> feetpersecond)
			{
				Number<T,C> value = (Number<T,C>) feetpersecond;
				return new Speed<T, C>(new Number<T,C>(value*0.3048));
			}
#endif

			/// <summary>
			///     Get Speed from InchesPerHour.
			/// </summary>
#if WINDOWS_UWP
			[Windows.Foundation.Metadata.DefaultOverload]
			public static Speed<T, C> FromInchesPerHour(Number<T, C> inchesperhour)
			{
				Number<T,C> value = (Number<T,C>) inchesperhour;
				return new Speed<T, C>((value/3600)*2.54e-2);
			}
#else
			public static Speed<T, C> FromInchesPerHour(Number<T, C> inchesperhour)
			{
				Number<T,C> value = (Number<T,C>) inchesperhour;
				return new Speed<T, C>(new Number<T,C>((value/3600)*2.54e-2));
			}
#endif

			/// <summary>
			///     Get Speed from InchesPerMinute.
			/// </summary>
#if WINDOWS_UWP
			[Windows.Foundation.Metadata.DefaultOverload]
			public static Speed<T, C> FromInchesPerMinute(Number<T, C> inchesperminute)
			{
				Number<T,C> value = (Number<T,C>) inchesperminute;
				return new Speed<T, C>((value/60)*2.54e-2);
			}
#else
			public static Speed<T, C> FromInchesPerMinute(Number<T, C> inchesperminute)
			{
				Number<T,C> value = (Number<T,C>) inchesperminute;
				return new Speed<T, C>(new Number<T,C>((value/60)*2.54e-2));
			}
#endif

			/// <summary>
			///     Get Speed from InchesPerSecond.
			/// </summary>
#if WINDOWS_UWP
			[Windows.Foundation.Metadata.DefaultOverload]
			public static Speed<T, C> FromInchesPerSecond(Number<T, C> inchespersecond)
			{
				Number<T,C> value = (Number<T,C>) inchespersecond;
				return new Speed<T, C>(value*2.54e-2);
			}
#else
			public static Speed<T, C> FromInchesPerSecond(Number<T, C> inchespersecond)
			{
				Number<T,C> value = (Number<T,C>) inchespersecond;
				return new Speed<T, C>(new Number<T,C>(value*2.54e-2));
			}
#endif

			/// <summary>
			///     Get Speed from KilometersPerHour.
			/// </summary>
#if WINDOWS_UWP
			[Windows.Foundation.Metadata.DefaultOverload]
			public static Speed<T, C> FromKilometersPerHour(Number<T, C> kilometersperhour)
			{
				Number<T,C> value = (Number<T,C>) kilometersperhour;
				return new Speed<T, C>((value/3600) * 1e3d);
			}
#else
			public static Speed<T, C> FromKilometersPerHour(Number<T, C> kilometersperhour)
			{
				Number<T,C> value = (Number<T,C>) kilometersperhour;
				return new Speed<T, C>(new Number<T,C>((value/3600) * 1e3d));
			}
#endif

			/// <summary>
			///     Get Speed from KilometersPerMinutes.
			/// </summary>
#if WINDOWS_UWP
			[Windows.Foundation.Metadata.DefaultOverload]
			public static Speed<T, C> FromKilometersPerMinutes(Number<T, C> kilometersperminutes)
			{
				Number<T,C> value = (Number<T,C>) kilometersperminutes;
				return new Speed<T, C>((value/60) * 1e3d);
			}
#else
			public static Speed<T, C> FromKilometersPerMinutes(Number<T, C> kilometersperminutes)
			{
				Number<T,C> value = (Number<T,C>) kilometersperminutes;
				return new Speed<T, C>(new Number<T,C>((value/60) * 1e3d));
			}
#endif

			/// <summary>
			///     Get Speed from KilometersPerSecond.
			/// </summary>
#if WINDOWS_UWP
			[Windows.Foundation.Metadata.DefaultOverload]
			public static Speed<T, C> FromKilometersPerSecond(Number<T, C> kilometerspersecond)
			{
				Number<T,C> value = (Number<T,C>) kilometerspersecond;
				return new Speed<T, C>((value) * 1e3d);
			}
#else
			public static Speed<T, C> FromKilometersPerSecond(Number<T, C> kilometerspersecond)
			{
				Number<T,C> value = (Number<T,C>) kilometerspersecond;
				return new Speed<T, C>(new Number<T,C>((value) * 1e3d));
			}
#endif

			/// <summary>
			///     Get Speed from Knots.
			/// </summary>
#if WINDOWS_UWP
			[Windows.Foundation.Metadata.DefaultOverload]
			public static Speed<T, C> FromKnots(Number<T, C> knots)
			{
				Number<T,C> value = (Number<T,C>) knots;
				return new Speed<T, C>(value*0.514444);
			}
#else
			public static Speed<T, C> FromKnots(Number<T, C> knots)
			{
				Number<T,C> value = (Number<T,C>) knots;
				return new Speed<T, C>(new Number<T,C>(value*0.514444));
			}
#endif

			/// <summary>
			///     Get Speed from MetersPerHour.
			/// </summary>
#if WINDOWS_UWP
			[Windows.Foundation.Metadata.DefaultOverload]
			public static Speed<T, C> FromMetersPerHour(Number<T, C> metersperhour)
			{
				Number<T,C> value = (Number<T,C>) metersperhour;
				return new Speed<T, C>(value/3600);
			}
#else
			public static Speed<T, C> FromMetersPerHour(Number<T, C> metersperhour)
			{
				Number<T,C> value = (Number<T,C>) metersperhour;
				return new Speed<T, C>(new Number<T,C>(value/3600));
			}
#endif

			/// <summary>
			///     Get Speed from MetersPerMinutes.
			/// </summary>
#if WINDOWS_UWP
			[Windows.Foundation.Metadata.DefaultOverload]
			public static Speed<T, C> FromMetersPerMinutes(Number<T, C> metersperminutes)
			{
				Number<T,C> value = (Number<T,C>) metersperminutes;
				return new Speed<T, C>(value/60);
			}
#else
			public static Speed<T, C> FromMetersPerMinutes(Number<T, C> metersperminutes)
			{
				Number<T,C> value = (Number<T,C>) metersperminutes;
				return new Speed<T, C>(new Number<T,C>(value/60));
			}
#endif

			/// <summary>
			///     Get Speed from MetersPerSecond.
			/// </summary>
#if WINDOWS_UWP
			[Windows.Foundation.Metadata.DefaultOverload]
			public static Speed<T, C> FromMetersPerSecond(Number<T, C> meterspersecond)
			{
				Number<T,C> value = (Number<T,C>) meterspersecond;
				return new Speed<T, C>(value);
			}
#else
			public static Speed<T, C> FromMetersPerSecond(Number<T, C> meterspersecond)
			{
				Number<T,C> value = (Number<T,C>) meterspersecond;
				return new Speed<T, C>(new Number<T,C>(value));
			}
#endif

			/// <summary>
			///     Get Speed from MicrometersPerMinutes.
			/// </summary>
#if WINDOWS_UWP
			[Windows.Foundation.Metadata.DefaultOverload]
			public static Speed<T, C> FromMicrometersPerMinutes(Number<T, C> micrometersperminutes)
			{
				Number<T,C> value = (Number<T,C>) micrometersperminutes;
				return new Speed<T, C>((value/60) * 1e-6d);
			}
#else
			public static Speed<T, C> FromMicrometersPerMinutes(Number<T, C> micrometersperminutes)
			{
				Number<T,C> value = (Number<T,C>) micrometersperminutes;
				return new Speed<T, C>(new Number<T,C>((value/60) * 1e-6d));
			}
#endif

			/// <summary>
			///     Get Speed from MicrometersPerSecond.
			/// </summary>
#if WINDOWS_UWP
			[Windows.Foundation.Metadata.DefaultOverload]
			public static Speed<T, C> FromMicrometersPerSecond(Number<T, C> micrometerspersecond)
			{
				Number<T,C> value = (Number<T,C>) micrometerspersecond;
				return new Speed<T, C>((value) * 1e-6d);
			}
#else
			public static Speed<T, C> FromMicrometersPerSecond(Number<T, C> micrometerspersecond)
			{
				Number<T,C> value = (Number<T,C>) micrometerspersecond;
				return new Speed<T, C>(new Number<T,C>((value) * 1e-6d));
			}
#endif

			/// <summary>
			///     Get Speed from MilesPerHour.
			/// </summary>
#if WINDOWS_UWP
			[Windows.Foundation.Metadata.DefaultOverload]
			public static Speed<T, C> FromMilesPerHour(Number<T, C> milesperhour)
			{
				Number<T,C> value = (Number<T,C>) milesperhour;
				return new Speed<T, C>(value*0.44704);
			}
#else
			public static Speed<T, C> FromMilesPerHour(Number<T, C> milesperhour)
			{
				Number<T,C> value = (Number<T,C>) milesperhour;
				return new Speed<T, C>(new Number<T,C>(value*0.44704));
			}
#endif

			/// <summary>
			///     Get Speed from MillimetersPerHour.
			/// </summary>
#if WINDOWS_UWP
			[Windows.Foundation.Metadata.DefaultOverload]
			public static Speed<T, C> FromMillimetersPerHour(Number<T, C> millimetersperhour)
			{
				Number<T,C> value = (Number<T,C>) millimetersperhour;
				return new Speed<T, C>((value/3600) * 1e-3d);
			}
#else
			public static Speed<T, C> FromMillimetersPerHour(Number<T, C> millimetersperhour)
			{
				Number<T,C> value = (Number<T,C>) millimetersperhour;
				return new Speed<T, C>(new Number<T,C>((value/3600) * 1e-3d));
			}
#endif

			/// <summary>
			///     Get Speed from MillimetersPerMinutes.
			/// </summary>
#if WINDOWS_UWP
			[Windows.Foundation.Metadata.DefaultOverload]
			public static Speed<T, C> FromMillimetersPerMinutes(Number<T, C> millimetersperminutes)
			{
				Number<T,C> value = (Number<T,C>) millimetersperminutes;
				return new Speed<T, C>((value/60) * 1e-3d);
			}
#else
			public static Speed<T, C> FromMillimetersPerMinutes(Number<T, C> millimetersperminutes)
			{
				Number<T,C> value = (Number<T,C>) millimetersperminutes;
				return new Speed<T, C>(new Number<T,C>((value/60) * 1e-3d));
			}
#endif

			/// <summary>
			///     Get Speed from MillimetersPerSecond.
			/// </summary>
#if WINDOWS_UWP
			[Windows.Foundation.Metadata.DefaultOverload]
			public static Speed<T, C> FromMillimetersPerSecond(Number<T, C> millimeterspersecond)
			{
				Number<T,C> value = (Number<T,C>) millimeterspersecond;
				return new Speed<T, C>((value) * 1e-3d);
			}
#else
			public static Speed<T, C> FromMillimetersPerSecond(Number<T, C> millimeterspersecond)
			{
				Number<T,C> value = (Number<T,C>) millimeterspersecond;
				return new Speed<T, C>(new Number<T,C>((value) * 1e-3d));
			}
#endif

			/// <summary>
			///     Get Speed from NanometersPerMinutes.
			/// </summary>
#if WINDOWS_UWP
			[Windows.Foundation.Metadata.DefaultOverload]
			public static Speed<T, C> FromNanometersPerMinutes(Number<T, C> nanometersperminutes)
			{
				Number<T,C> value = (Number<T,C>) nanometersperminutes;
				return new Speed<T, C>((value/60) * 1e-9d);
			}
#else
			public static Speed<T, C> FromNanometersPerMinutes(Number<T, C> nanometersperminutes)
			{
				Number<T,C> value = (Number<T,C>) nanometersperminutes;
				return new Speed<T, C>(new Number<T,C>((value/60) * 1e-9d));
			}
#endif

			/// <summary>
			///     Get Speed from NanometersPerSecond.
			/// </summary>
#if WINDOWS_UWP
			[Windows.Foundation.Metadata.DefaultOverload]
			public static Speed<T, C> FromNanometersPerSecond(Number<T, C> nanometerspersecond)
			{
				Number<T,C> value = (Number<T,C>) nanometerspersecond;
				return new Speed<T, C>((value) * 1e-9d);
			}
#else
			public static Speed<T, C> FromNanometersPerSecond(Number<T, C> nanometerspersecond)
			{
				Number<T,C> value = (Number<T,C>) nanometerspersecond;
				return new Speed<T, C>(new Number<T,C>((value) * 1e-9d));
			}
#endif

			/// <summary>
			///     Get Speed from UsSurveyFeetPerHour.
			/// </summary>
#if WINDOWS_UWP
			[Windows.Foundation.Metadata.DefaultOverload]
			public static Speed<T, C> FromUsSurveyFeetPerHour(Number<T, C> ussurveyfeetperhour)
			{
				Number<T,C> value = (Number<T,C>) ussurveyfeetperhour;
				return new Speed<T, C>((value*1200/3937)/3600);
			}
#else
			public static Speed<T, C> FromUsSurveyFeetPerHour(Number<T, C> ussurveyfeetperhour)
			{
				Number<T,C> value = (Number<T,C>) ussurveyfeetperhour;
				return new Speed<T, C>(new Number<T,C>((value*1200/3937)/3600));
			}
#endif

			/// <summary>
			///     Get Speed from UsSurveyFeetPerMinute.
			/// </summary>
#if WINDOWS_UWP
			[Windows.Foundation.Metadata.DefaultOverload]
			public static Speed<T, C> FromUsSurveyFeetPerMinute(Number<T, C> ussurveyfeetperminute)
			{
				Number<T,C> value = (Number<T,C>) ussurveyfeetperminute;
				return new Speed<T, C>((value*1200/3937)/60);
			}
#else
			public static Speed<T, C> FromUsSurveyFeetPerMinute(Number<T, C> ussurveyfeetperminute)
			{
				Number<T,C> value = (Number<T,C>) ussurveyfeetperminute;
				return new Speed<T, C>(new Number<T,C>((value*1200/3937)/60));
			}
#endif

			/// <summary>
			///     Get Speed from UsSurveyFeetPerSecond.
			/// </summary>
#if WINDOWS_UWP
			[Windows.Foundation.Metadata.DefaultOverload]
			public static Speed<T, C> FromUsSurveyFeetPerSecond(Number<T, C> ussurveyfeetpersecond)
			{
				Number<T,C> value = (Number<T,C>) ussurveyfeetpersecond;
				return new Speed<T, C>(value*1200/3937);
			}
#else
			public static Speed<T, C> FromUsSurveyFeetPerSecond(Number<T, C> ussurveyfeetpersecond)
			{
				Number<T,C> value = (Number<T,C>) ussurveyfeetpersecond;
				return new Speed<T, C>(new Number<T,C>(value*1200/3937));
			}
#endif

			/// <summary>
			///     Get Speed from YardsPerHour.
			/// </summary>
#if WINDOWS_UWP
			[Windows.Foundation.Metadata.DefaultOverload]
			public static Speed<T, C> FromYardsPerHour(Number<T, C> yardsperhour)
			{
				Number<T,C> value = (Number<T,C>) yardsperhour;
				return new Speed<T, C>(value*0.9144/3600);
			}
#else
			public static Speed<T, C> FromYardsPerHour(Number<T, C> yardsperhour)
			{
				Number<T,C> value = (Number<T,C>) yardsperhour;
				return new Speed<T, C>(new Number<T,C>(value*0.9144/3600));
			}
#endif

			/// <summary>
			///     Get Speed from YardsPerMinute.
			/// </summary>
#if WINDOWS_UWP
			[Windows.Foundation.Metadata.DefaultOverload]
			public static Speed<T, C> FromYardsPerMinute(Number<T, C> yardsperminute)
			{
				Number<T,C> value = (Number<T,C>) yardsperminute;
				return new Speed<T, C>(value*0.9144/60);
			}
#else
			public static Speed<T, C> FromYardsPerMinute(Number<T, C> yardsperminute)
			{
				Number<T,C> value = (Number<T,C>) yardsperminute;
				return new Speed<T, C>(new Number<T,C>(value*0.9144/60));
			}
#endif

			/// <summary>
			///     Get Speed from YardsPerSecond.
			/// </summary>
#if WINDOWS_UWP
			[Windows.Foundation.Metadata.DefaultOverload]
			public static Speed<T, C> FromYardsPerSecond(Number<T, C> yardspersecond)
			{
				Number<T,C> value = (Number<T,C>) yardspersecond;
				return new Speed<T, C>(value*0.9144);
			}
#else
			public static Speed<T, C> FromYardsPerSecond(Number<T, C> yardspersecond)
			{
				Number<T,C> value = (Number<T,C>) yardspersecond;
				return new Speed<T, C>(new Number<T,C>(value*0.9144));
			}
#endif



			/// <summary>
			///     Dynamically convert from value and unit enum <see cref="SpeedUnit" /> to <see cref="Speed" />.
			/// </summary>
			/// <param name="value">Value to convert from.</param>
			/// <param name="fromUnit">Unit to convert from.</param>
			/// <returns>Speed unit value.</returns>
#if WINDOWS_UWP
			// Fix name conflict with parameter "value"
			[return: System.Runtime.InteropServices.WindowsRuntime.ReturnValueName("returnValue")]
			public static Speed<T, C> From(double value, SpeedUnit fromUnit)
#else
			public static Speed<T, C> From(Number<T, C> value, SpeedUnit fromUnit)
#endif
			{
				switch (fromUnit)
				{
					case SpeedUnit.CentimeterPerHour:
						return FromCentimetersPerHour(value);
					case SpeedUnit.CentimeterPerMinute:
						return FromCentimetersPerMinutes(value);
					case SpeedUnit.CentimeterPerSecond:
						return FromCentimetersPerSecond(value);
					case SpeedUnit.DecimeterPerMinute:
						return FromDecimetersPerMinutes(value);
					case SpeedUnit.DecimeterPerSecond:
						return FromDecimetersPerSecond(value);
					case SpeedUnit.FootPerHour:
						return FromFeetPerHour(value);
					case SpeedUnit.FootPerMinute:
						return FromFeetPerMinute(value);
					case SpeedUnit.FootPerSecond:
						return FromFeetPerSecond(value);
					case SpeedUnit.InchPerHour:
						return FromInchesPerHour(value);
					case SpeedUnit.InchPerMinute:
						return FromInchesPerMinute(value);
					case SpeedUnit.InchPerSecond:
						return FromInchesPerSecond(value);
					case SpeedUnit.KilometerPerHour:
						return FromKilometersPerHour(value);
					case SpeedUnit.KilometerPerMinute:
						return FromKilometersPerMinutes(value);
					case SpeedUnit.KilometerPerSecond:
						return FromKilometersPerSecond(value);
					case SpeedUnit.Knot:
						return FromKnots(value);
					case SpeedUnit.MeterPerHour:
						return FromMetersPerHour(value);
					case SpeedUnit.MeterPerMinute:
						return FromMetersPerMinutes(value);
					case SpeedUnit.MeterPerSecond:
						return FromMetersPerSecond(value);
					case SpeedUnit.MicrometerPerMinute:
						return FromMicrometersPerMinutes(value);
					case SpeedUnit.MicrometerPerSecond:
						return FromMicrometersPerSecond(value);
					case SpeedUnit.MilePerHour:
						return FromMilesPerHour(value);
					case SpeedUnit.MillimeterPerHour:
						return FromMillimetersPerHour(value);
					case SpeedUnit.MillimeterPerMinute:
						return FromMillimetersPerMinutes(value);
					case SpeedUnit.MillimeterPerSecond:
						return FromMillimetersPerSecond(value);
					case SpeedUnit.NanometerPerMinute:
						return FromNanometersPerMinutes(value);
					case SpeedUnit.NanometerPerSecond:
						return FromNanometersPerSecond(value);
					case SpeedUnit.UsSurveyFootPerHour:
						return FromUsSurveyFeetPerHour(value);
					case SpeedUnit.UsSurveyFootPerMinute:
						return FromUsSurveyFeetPerMinute(value);
					case SpeedUnit.UsSurveyFootPerSecond:
						return FromUsSurveyFeetPerSecond(value);
					case SpeedUnit.YardPerHour:
						return FromYardsPerHour(value);
					case SpeedUnit.YardPerMinute:
						return FromYardsPerMinute(value);
					case SpeedUnit.YardPerSecond:
						return FromYardsPerSecond(value);

					default:
						throw new NotImplementedException("fromUnit: " + fromUnit);
				}
			}

			/// <summary>
			///     Get unit abbreviation string.
			/// </summary>
			/// <param name="unit">Unit to get abbreviation for.</param>
			/// <returns>Unit abbreviation string.</returns>
			[UsedImplicitly]
			public static string GetAbbreviation(SpeedUnit unit)
			{
				return GetAbbreviation(unit, null);
			}

			/// <summary>
			///     Get unit abbreviation string.
			/// </summary>
			/// <param name="unit">Unit to get abbreviation for.</param>
			/// <param name="culture">Culture to use for localization. Defaults to Thread.CurrentUICulture.</param>
			/// <returns>Unit abbreviation string.</returns>
			[UsedImplicitly]
			public static string GetAbbreviation(SpeedUnit unit, [CanBeNull] Culture culture)
			{
				return UnitSystem.GetCached(culture).GetDefaultAbbreviation(unit);
			}

			#endregion

			#region Arithmetic Operators

			// Windows Runtime Component does not allow operator overloads: https://msdn.microsoft.com/en-us/library/br230301.aspx
#if !WINDOWS_UWP
			public static Speed<T, C> operator -(Speed<T, C> right)
			{
				return new Speed<T, C>(-right._metersPerSecond);
			}

			public static Speed<T, C> operator +(Speed<T, C> left, Speed<T, C> right)
			{
				return new Speed<T, C>(left._metersPerSecond + right._metersPerSecond);
			}

			public static Speed<T, C> operator -(Speed<T, C> left, Speed<T, C> right)
			{
				return new Speed<T, C>(left._metersPerSecond - right._metersPerSecond);
			}

			public static Speed<T, C> operator *(Number<T, C> left, Speed<T, C> right)
			{
				return new Speed<T, C>(left*right._metersPerSecond);
			}

			public static Speed<T, C> operator *(Speed<T, C> left, double right)
			{
				return new Speed<T, C>(left._metersPerSecond*right);
			}

			public static Speed<T, C> operator /(Speed<T, C> left, double right)
			{
				return new Speed<T, C>(left._metersPerSecond/right);
			}

			public static double operator /(Speed<T, C> left, Speed<T, C> right)
			{
				return Convert.ToDouble(left._metersPerSecond/right._metersPerSecond);
			}
#endif

			#endregion

			#region Equality / IComparable

			public int CompareTo(object obj)
			{
				if (obj == null) throw new ArgumentNullException("obj");
				if (!(obj is Speed<T, C>)) throw new ArgumentException("Expected type Speed.", "obj");
				return CompareTo((Speed<T, C>) obj);
			}

			// Windows Runtime Component does not allow public methods/ctors with same number of parameters: https://msdn.microsoft.com/en-us/library/br230301.aspx#Overloaded methods
#if WINDOWS_UWP
			internal
#else
			public
#endif
			int CompareTo(Speed<T, C> other)
			{
				return _metersPerSecond.CompareTo(other._metersPerSecond);
			}

			// Windows Runtime Component does not allow operator overloads: https://msdn.microsoft.com/en-us/library/br230301.aspx
#if !WINDOWS_UWP
			public static bool operator <=(Speed<T, C> left, Speed<T, C> right)
			{
				return left._metersPerSecond <= right._metersPerSecond;
			}

			public static bool operator >=(Speed<T, C> left, Speed<T, C> right)
			{
				return left._metersPerSecond >= right._metersPerSecond;
			}

			public static bool operator <(Speed<T, C> left, Speed<T, C> right)
			{
				return left._metersPerSecond < right._metersPerSecond;
			}

			public static bool operator >(Speed<T, C> left, Speed<T, C> right)
			{
				return left._metersPerSecond > right._metersPerSecond;
			}

			[Obsolete("It is not safe to compare equality due to using System.Double as the internal representation. It is very easy to get slightly different values due to floating point operations. Instead use Equals(other, maxError) to provide the max allowed error.")]
        public static bool operator ==(Speed<T, C> left, Speed<T, C> right)
			{
				// ReSharper disable once CompareOfFloatsByEqualityOperator
				return left._metersPerSecond == right._metersPerSecond;
			}

			[Obsolete("It is not safe to compare equality due to using System.Double as the internal representation. It is very easy to get slightly different values due to floating point operations. Instead use Equals(other, maxError) to provide the max allowed error.")]
        public static bool operator !=(Speed<T, C> left, Speed<T, C> right)
			{
				// ReSharper disable once CompareOfFloatsByEqualityOperator
				return left._metersPerSecond != right._metersPerSecond;
			}
#endif

			[Obsolete("It is not safe to compare equality due to using System.Double as the internal representation. It is very easy to get slightly different values due to floating point operations. Instead use Equals(other, maxError) to provide the max allowed error.")]
        public override bool Equals(object obj)
			{
				if (obj == null || GetType() != obj.GetType())
				{
					return false;
				}

				return _metersPerSecond.Equals(((Speed<T, C>) obj)._metersPerSecond);
			}

			/// <summary>
			///     Compare equality to another Speed by specifying a max allowed difference.
			///     Note that it is advised against specifying zero difference, due to the nature
			///     of floating point operations and using System.Double internally.
			/// </summary>
			/// <param name="other">Other quantity to compare to.</param>
			/// <param name="maxError">Max error allowed.</param>
			/// <returns>True if the difference between the two values is not greater than the specified max.</returns>
			public bool Equals(Speed<T, C> other, Speed<T, C> maxError)
			{
				return Math.Abs((decimal)_metersPerSecond - (decimal)other._metersPerSecond) <= maxError._metersPerSecond;
			}

			public override int GetHashCode()
			{
				return _metersPerSecond.GetHashCode();
			}

			#endregion

			#region Conversion

			/// <summary>
			///     Convert to the unit representation <paramref name="unit" />.
			/// </summary>
			/// <returns>Value in new unit if successful, exception otherwise.</returns>
			/// <exception cref="NotImplementedException">If conversion was not successful.</exception>
			public Number<T, C> As(SpeedUnit unit)
			{
				switch (unit)
				{
					case SpeedUnit.CentimeterPerHour:
						return CentimetersPerHour;
					case SpeedUnit.CentimeterPerMinute:
						return CentimetersPerMinutes;
					case SpeedUnit.CentimeterPerSecond:
						return CentimetersPerSecond;
					case SpeedUnit.DecimeterPerMinute:
						return DecimetersPerMinutes;
					case SpeedUnit.DecimeterPerSecond:
						return DecimetersPerSecond;
					case SpeedUnit.FootPerHour:
						return FeetPerHour;
					case SpeedUnit.FootPerMinute:
						return FeetPerMinute;
					case SpeedUnit.FootPerSecond:
						return FeetPerSecond;
					case SpeedUnit.InchPerHour:
						return InchesPerHour;
					case SpeedUnit.InchPerMinute:
						return InchesPerMinute;
					case SpeedUnit.InchPerSecond:
						return InchesPerSecond;
					case SpeedUnit.KilometerPerHour:
						return KilometersPerHour;
					case SpeedUnit.KilometerPerMinute:
						return KilometersPerMinutes;
					case SpeedUnit.KilometerPerSecond:
						return KilometersPerSecond;
					case SpeedUnit.Knot:
						return Knots;
					case SpeedUnit.MeterPerHour:
						return MetersPerHour;
					case SpeedUnit.MeterPerMinute:
						return MetersPerMinutes;
					case SpeedUnit.MeterPerSecond:
						return MetersPerSecond;
					case SpeedUnit.MicrometerPerMinute:
						return MicrometersPerMinutes;
					case SpeedUnit.MicrometerPerSecond:
						return MicrometersPerSecond;
					case SpeedUnit.MilePerHour:
						return MilesPerHour;
					case SpeedUnit.MillimeterPerHour:
						return MillimetersPerHour;
					case SpeedUnit.MillimeterPerMinute:
						return MillimetersPerMinutes;
					case SpeedUnit.MillimeterPerSecond:
						return MillimetersPerSecond;
					case SpeedUnit.NanometerPerMinute:
						return NanometersPerMinutes;
					case SpeedUnit.NanometerPerSecond:
						return NanometersPerSecond;
					case SpeedUnit.UsSurveyFootPerHour:
						return UsSurveyFeetPerHour;
					case SpeedUnit.UsSurveyFootPerMinute:
						return UsSurveyFeetPerMinute;
					case SpeedUnit.UsSurveyFootPerSecond:
						return UsSurveyFeetPerSecond;
					case SpeedUnit.YardPerHour:
						return YardsPerHour;
					case SpeedUnit.YardPerMinute:
						return YardsPerMinute;
					case SpeedUnit.YardPerSecond:
						return YardsPerSecond;

					default:
						throw new NotImplementedException("unit: " + unit);
				}
			}

			#endregion

			#region Parsing

			/// <summary>
			///     Parse a string with one or two quantities of the format "&lt;quantity&gt; &lt;unit&gt;".
			/// </summary>
			/// <param name="str">String to parse. Typically in the form: {number} {unit}</param>
			/// <example>
			///     Length.Parse("5.5 m", new CultureInfo("en-US"));
			/// </example>
			/// <exception cref="ArgumentNullException">The value of 'str' cannot be null. </exception>
			/// <exception cref="ArgumentException">
			///     Expected string to have one or two pairs of quantity and unit in the format
			///     "&lt;quantity&gt; &lt;unit&gt;". Eg. "5.5 m" or "1ft 2in"
			/// </exception>
			/// <exception cref="AmbiguousUnitParseException">
			///     More than one unit is represented by the specified unit abbreviation.
			///     Example: Volume.Parse("1 cup") will throw, because it can refer to any of
			///     <see cref="VolumeUnit.MetricCup" />, <see cref="VolumeUnit.UsLegalCup" /> and <see cref="VolumeUnit.UsCustomaryCup" />.
			/// </exception>
			/// <exception cref="UnitsNetException">
			///     If anything else goes wrong, typically due to a bug or unhandled case.
			///     We wrap exceptions in <see cref="UnitsNetException" /> to allow you to distinguish
			///     Units.NET exceptions from other exceptions.
			/// </exception>
			public static Speed<T, C> Parse(string str)
			{
				return Parse(str, null);
			}

			/// <summary>
			///     Parse a string with one or two quantities of the format "&lt;quantity&gt; &lt;unit&gt;".
			/// </summary>
			/// <param name="str">String to parse. Typically in the form: {number} {unit}</param>
			/// <param name="culture">Format to use when parsing number and unit. If it is null, it defaults to <see cref="NumberFormatInfo.CurrentInfo"/> for parsing the number and <see cref="CultureInfo.CurrentUICulture"/> for parsing the unit abbreviation by culture/language.</param>
			/// <example>
			///     Length.Parse("5.5 m", new CultureInfo("en-US"));
			/// </example>
			/// <exception cref="ArgumentNullException">The value of 'str' cannot be null. </exception>
			/// <exception cref="ArgumentException">
			///     Expected string to have one or two pairs of quantity and unit in the format
			///     "&lt;quantity&gt; &lt;unit&gt;". Eg. "5.5 m" or "1ft 2in"
			/// </exception>
			/// <exception cref="AmbiguousUnitParseException">
			///     More than one unit is represented by the specified unit abbreviation.
			///     Example: Volume.Parse("1 cup") will throw, because it can refer to any of
			///     <see cref="VolumeUnit.MetricCup" />, <see cref="VolumeUnit.UsLegalCup" /> and <see cref="VolumeUnit.UsCustomaryCup" />.
			/// </exception>
			/// <exception cref="UnitsNetException">
			///     If anything else goes wrong, typically due to a bug or unhandled case.
			///     We wrap exceptions in <see cref="UnitsNetException" /> to allow you to distinguish
			///     Units.NET exceptions from other exceptions.
			/// </exception>
			public static Speed<T, C> Parse(string str, [CanBeNull] Culture culture)
			{
				if (str == null) throw new ArgumentNullException("str");

			// Windows Runtime Component does not support CultureInfo type, so use culture name string for public methods instead: https://msdn.microsoft.com/en-us/library/br230301.aspx
#if WINDOWS_UWP
				IFormatProvider formatProvider = culture == null ? null : new CultureInfo(culture);
#else
				IFormatProvider formatProvider = culture;
#endif
					return QuantityParser.Parse<Speed<T, C>, SpeedUnit>(str, formatProvider,
					delegate(string value, string unit, IFormatProvider formatProvider2)
					{
						double parsedValue = double.Parse(value, formatProvider2);
						SpeedUnit parsedUnit = ParseUnit(unit, formatProvider2);
						return From(new C().ConvertToNumber(parsedValue), parsedUnit);
					}, (x, y) => FromMetersPerSecond((Number<T, C>)x.MetersPerSecond + y.MetersPerSecond));
			}

			/// <summary>
			///     Try to parse a string with one or two quantities of the format "&lt;quantity&gt; &lt;unit&gt;".
			/// </summary>
			/// <param name="str">String to parse. Typically in the form: {number} {unit}</param>
			/// <param name="result">Resulting unit quantity if successful.</param>
			/// <example>
			///     Length.Parse("5.5 m", new CultureInfo("en-US"));
			/// </example>
			public static bool TryParse([CanBeNull] string str, out Speed<T, C> result)
			{
				return TryParse(str, null, out result);
			}

			/// <summary>
			///     Try to parse a string with one or two quantities of the format "&lt;quantity&gt; &lt;unit&gt;".
			/// </summary>
			/// <param name="str">String to parse. Typically in the form: {number} {unit}</param>
			/// <param name="culture">Format to use when parsing number and unit. If it is null, it defaults to <see cref="NumberFormatInfo.CurrentInfo"/> for parsing the number and <see cref="CultureInfo.CurrentUICulture"/> for parsing the unit abbreviation by culture/language.</param>
			/// <param name="result">Resulting unit quantity if successful.</param>
			/// <example>
			///     Length.Parse("5.5 m", new CultureInfo("en-US"));
			/// </example>
			public static bool TryParse([CanBeNull] string str, [CanBeNull] Culture culture, out Speed<T, C> result)
			{
				try
				{
					result = Parse(str, culture);
					return true;
				}
				catch
				{
					result = default(Speed<T, C>);
					return false;
				}
			}

			/// <summary>
			///     Parse a unit string.
			/// </summary>
			/// <example>
			///     Length.ParseUnit("m", new CultureInfo("en-US"));
			/// </example>
			/// <exception cref="ArgumentNullException">The value of 'str' cannot be null. </exception>
			/// <exception cref="UnitsNetException">Error parsing string.</exception>
			public static SpeedUnit ParseUnit(string str)
			{
				return ParseUnit(str, (IFormatProvider)null);
			}

			/// <summary>
			///     Parse a unit string.
			/// </summary>
			/// <example>
			///     Length.ParseUnit("m", new CultureInfo("en-US"));
			/// </example>
			/// <exception cref="ArgumentNullException">The value of 'str' cannot be null. </exception>
			/// <exception cref="UnitsNetException">Error parsing string.</exception>
			public static SpeedUnit ParseUnit(string str, [CanBeNull] string cultureName)
			{
				return ParseUnit(str, cultureName == null ? null : new CultureInfo(cultureName));
			}

			/// <summary>
			///     Parse a unit string.
			/// </summary>
			/// <example>
			///     Length.ParseUnit("m", new CultureInfo("en-US"));
			/// </example>
			/// <exception cref="ArgumentNullException">The value of 'str' cannot be null. </exception>
			/// <exception cref="UnitsNetException">Error parsing string.</exception>

			// Windows Runtime Component does not allow public methods/ctors with same number of parameters: https://msdn.microsoft.com/en-us/library/br230301.aspx#Overloaded methods
#if WINDOWS_UWP
			internal
#else
			public
#endif
			static SpeedUnit ParseUnit(string str, IFormatProvider formatProvider = null)
			{
				if (str == null) throw new ArgumentNullException("str");

				var unitSystem = UnitSystem.GetCached(formatProvider);
				var unit = unitSystem.Parse<SpeedUnit>(str.Trim());

				if (unit == SpeedUnit.Undefined)
				{
					var newEx = new UnitsNetException("Error parsing string. The unit is not a recognized SpeedUnit.");
					newEx.Data["input"] = str;
					newEx.Data["formatprovider"] = formatProvider?.ToString() ?? "(null)";
					throw newEx;
				}

				return unit;
			}

			#endregion

			/// <summary>
			///     Set the default unit used by ToString(). Default is MeterPerSecond
			/// </summary>
			public static SpeedUnit ToStringDefaultUnit { get; set; } = SpeedUnit.MeterPerSecond;

			/// <summary>
			///     Get default string representation of value and unit.
			/// </summary>
			/// <returns>String representation.</returns>
			public override string ToString()
			{
				return ToString(ToStringDefaultUnit);
			}

			/// <summary>
			///     Get string representation of value and unit. Using current UI culture and two significant digits after radix.
			/// </summary>
			/// <param name="unit">Unit representation to use.</param>
			/// <returns>String representation.</returns>
			public string ToString(SpeedUnit unit)
			{
				return ToString(unit, null, 2);
			}

			/// <summary>
			///     Get string representation of value and unit. Using two significant digits after radix.
			/// </summary>
			/// <param name="unit">Unit representation to use.</param>
			/// <param name="culture">Culture to use for localization and number formatting.</param>
			/// <returns>String representation.</returns>
			public string ToString(SpeedUnit unit, [CanBeNull] Culture culture)
			{
				return ToString(unit, culture, 2);
			}

			/// <summary>
			///     Get string representation of value and unit.
			/// </summary>
			/// <param name="unit">Unit representation to use.</param>
			/// <param name="culture">Culture to use for localization and number formatting.</param>
			/// <param name="significantDigitsAfterRadix">The number of significant digits after the radix point.</param>
			/// <returns>String representation.</returns>
			[UsedImplicitly]
			public string ToString(SpeedUnit unit, [CanBeNull] Culture culture, int significantDigitsAfterRadix)
			{
				Number<T, C>  value = As(unit);
				string format = UnitFormatter.GetFormat((double)value, significantDigitsAfterRadix);
				return ToString(unit, culture, format);
			}

			/// <summary>
			///     Get string representation of value and unit.
			/// </summary>
			/// <param name="culture">Culture to use for localization and number formatting.</param>
			/// <param name="unit">Unit representation to use.</param>
			/// <param name="format">String format to use. Default:  "{0:0.##} {1} for value and unit abbreviation respectively."</param>
			/// <param name="args">Arguments for string format. Value and unit are implictly included as arguments 0 and 1.</param>
			/// <returns>String representation.</returns>
			[UsedImplicitly]
			public string ToString(SpeedUnit unit, [CanBeNull] Culture culture, [NotNull] string format,
				[NotNull] params object[] args)
			{
				if (format == null) throw new ArgumentNullException(nameof(format));
				if (args == null) throw new ArgumentNullException(nameof(args));

			// Windows Runtime Component does not support CultureInfo type, so use culture name string for public methods instead: https://msdn.microsoft.com/en-us/library/br230301.aspx
#if WINDOWS_UWP
				IFormatProvider formatProvider = culture == null ? null : new CultureInfo(culture);
#else
				IFormatProvider formatProvider = culture;
#endif
				Number<T, C>  value = As(unit);
				object[] formatArgs = UnitFormatter.GetFormatArgs(unit, (double)value, formatProvider, args);
				return string.Format(formatProvider, format, formatArgs);
			}

			/// <summary>
			/// Represents the largest possible value of Speed
			/// </summary>
			public static Number<T, C> MaxValue
			{
				get
				{
					return Number<T, C>.MaxValue;
				}
			}

			/// <summary>
			/// Represents the smallest possible value of Speed
			/// </summary>
			public static Number<T, C> MinValue
			{
				get
				{
					return Number<T, C>.MinValue;
				}
			}
		}
	}
}
