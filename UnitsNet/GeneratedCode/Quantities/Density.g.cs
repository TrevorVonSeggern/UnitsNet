//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by \generate-code.bat.
//
//     Changes to this file will be lost when the code is regenerated.
//     The build server regenerates the code before each build and a pre-build
//     step will regenerate the code on each local build.
//
//     See https://github.com/angularsen/UnitsNet/wiki/Adding-a-New-Unit for how to add or edit units.
//
//     Add CustomCode\Quantities\MyUnit.extra.cs files to add code to generated quantities.
//     Add Extensions\MyUnitExtensions.cs to decorate quantities with new behavior.
//     Add UnitDefinitions\MyUnit.json and run GeneratUnits.bat to generate new units or quantities.
//
// </auto-generated>
//------------------------------------------------------------------------------

// Copyright (c) 2013 Andreas Gullberg Larsen (andreas.larsen84@gmail.com).
// https://github.com/angularsen/UnitsNet
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
// THE SOFTWARE.

using System;
using System.Collections.Generic;
using System.Globalization;
using System.Text.RegularExpressions;
using System.Linq;
using JetBrains.Annotations;
using UnitsNet.Units;

// Windows Runtime Component does not support CultureInfo type, so use culture name string instead for public methods: https://msdn.microsoft.com/en-us/library/br230301.aspx
#if WINDOWS_UWP
using Culture = System.String;
#else
using Culture = System.IFormatProvider;
#endif

// ReSharper disable once CheckNamespace
namespace UnitsNet
{
    using UnitsNet.InternalHelpers.Calculators;

    /// <summary>
    ///     The density, or more precisely, the volumetric mass density, of a substance is its mass per unit volume.
    /// </summary>
    // ReSharper disable once PartialTypeWithSinglePart

    // Windows Runtime Component has constraints on public types: https://msdn.microsoft.com/en-us/library/br230301.aspx#Declaring types in Windows Runtime Components
    // Public structures can't have any members other than public fields, and those fields must be value types or strings.
    // Public classes must be sealed (NotInheritable in Visual Basic). If your programming model requires polymorphism, you can create a public interface and implement that interface on the classes that must be polymorphic.
	public partial class Density : UnitsNet.Generic.Density<double, UnitsNet.InternalHelpers.Calculators.DoubleCalculator> { }

	namespace Generic
	{
#if WINDOWS_UWP
		public sealed partial class Density
#else
		public partial class Density <T, C> : IComparable, IComparable<Density<T, C>>
			where T : struct
			where C : InternalHelpers.Calculators.INumberCalculator<T>, new()
#endif
		{
			/// <summary>
			///     Base unit of Density.
			/// </summary>
			private readonly Number<T, C> _kilogramsPerCubicMeter;

			public Density() : this(new Number<T,C>())
			{
			}

			public Density(T kilogramspercubicmeter)
			{
				_kilogramsPerCubicMeter = (kilogramspercubicmeter);
			}

			public Density(Number<T, C> kilogramspercubicmeter)
			{
				_kilogramsPerCubicMeter = (kilogramspercubicmeter);
			}

			#region Properties

			/// <summary>
			///     The <see cref="QuantityType" /> of this quantity.
			/// </summary>
			public static QuantityType QuantityType => QuantityType.Density;

			/// <summary>
			///     The base unit representation of this quantity for the numeric value stored internally. All conversions go via this value.
			/// </summary>
			public static DensityUnit BaseUnit
			{
				get { return DensityUnit.KilogramPerCubicMeter; }
			}

			/// <summary>
			///     All units of measurement for the Density quantity.
			/// </summary>
			public static DensityUnit[] Units { get; } = Enum.GetValues(typeof(DensityUnit)).Cast<DensityUnit>().ToArray();

			/// <summary>
			///     Get Density in CentigramsPerDeciLiter.
			/// </summary>
			public Number<T, C> CentigramsPerDeciLiter
			{
				get { return (_kilogramsPerCubicMeter*1e-1) / 1e-2d; }
			}

			/// <summary>
			///     Get Density in CentigramsPerLiter.
			/// </summary>
			public Number<T, C> CentigramsPerLiter
			{
				get { return (_kilogramsPerCubicMeter*1) / 1e-2d; }
			}

			/// <summary>
			///     Get Density in CentigramsPerMilliliter.
			/// </summary>
			public Number<T, C> CentigramsPerMilliliter
			{
				get { return (_kilogramsPerCubicMeter*1e-3) / 1e-2d; }
			}

			/// <summary>
			///     Get Density in DecigramsPerDeciLiter.
			/// </summary>
			public Number<T, C> DecigramsPerDeciLiter
			{
				get { return (_kilogramsPerCubicMeter*1e-1) / 1e-1d; }
			}

			/// <summary>
			///     Get Density in DecigramsPerLiter.
			/// </summary>
			public Number<T, C> DecigramsPerLiter
			{
				get { return (_kilogramsPerCubicMeter*1) / 1e-1d; }
			}

			/// <summary>
			///     Get Density in DecigramsPerMilliliter.
			/// </summary>
			public Number<T, C> DecigramsPerMilliliter
			{
				get { return (_kilogramsPerCubicMeter*1e-3) / 1e-1d; }
			}

			/// <summary>
			///     Get Density in GramsPerCubicCentimeter.
			/// </summary>
			public Number<T, C> GramsPerCubicCentimeter
			{
				get { return _kilogramsPerCubicMeter*1e-3; }
			}

			/// <summary>
			///     Get Density in GramsPerCubicMeter.
			/// </summary>
			public Number<T, C> GramsPerCubicMeter
			{
				get { return _kilogramsPerCubicMeter*1e3; }
			}

			/// <summary>
			///     Get Density in GramsPerCubicMillimeter.
			/// </summary>
			public Number<T, C> GramsPerCubicMillimeter
			{
				get { return _kilogramsPerCubicMeter*1e-6; }
			}

			/// <summary>
			///     Get Density in GramsPerDeciLiter.
			/// </summary>
			public Number<T, C> GramsPerDeciLiter
			{
				get { return _kilogramsPerCubicMeter*1e-1; }
			}

			/// <summary>
			///     Get Density in GramsPerLiter.
			/// </summary>
			public Number<T, C> GramsPerLiter
			{
				get { return _kilogramsPerCubicMeter*1; }
			}

			/// <summary>
			///     Get Density in GramsPerMilliliter.
			/// </summary>
			public Number<T, C> GramsPerMilliliter
			{
				get { return _kilogramsPerCubicMeter*1e-3; }
			}

			/// <summary>
			///     Get Density in KilogramsPerCubicCentimeter.
			/// </summary>
			public Number<T, C> KilogramsPerCubicCentimeter
			{
				get { return (_kilogramsPerCubicMeter*1e-3) / 1e3d; }
			}

			/// <summary>
			///     Get Density in KilogramsPerCubicMeter.
			/// </summary>
			public Number<T, C> KilogramsPerCubicMeter
			{
				get { return (_kilogramsPerCubicMeter*1e3) / 1e3d; }
			}

			/// <summary>
			///     Get Density in KilogramsPerCubicMillimeter.
			/// </summary>
			public Number<T, C> KilogramsPerCubicMillimeter
			{
				get { return (_kilogramsPerCubicMeter*1e-6) / 1e3d; }
			}

			/// <summary>
			///     Get Density in KilopoundsPerCubicFoot.
			/// </summary>
			public Number<T, C> KilopoundsPerCubicFoot
			{
				get { return (_kilogramsPerCubicMeter*0.062427961) / 1e3d; }
			}

			/// <summary>
			///     Get Density in KilopoundsPerCubicInch.
			/// </summary>
			public Number<T, C> KilopoundsPerCubicInch
			{
				get { return (_kilogramsPerCubicMeter*3.6127298147753e-5) / 1e3d; }
			}

			/// <summary>
			///     Get Density in MicrogramsPerDeciLiter.
			/// </summary>
			public Number<T, C> MicrogramsPerDeciLiter
			{
				get { return (_kilogramsPerCubicMeter*1e-1) / 1e-6d; }
			}

			/// <summary>
			///     Get Density in MicrogramsPerLiter.
			/// </summary>
			public Number<T, C> MicrogramsPerLiter
			{
				get { return (_kilogramsPerCubicMeter*1) / 1e-6d; }
			}

			/// <summary>
			///     Get Density in MicrogramsPerMilliliter.
			/// </summary>
			public Number<T, C> MicrogramsPerMilliliter
			{
				get { return (_kilogramsPerCubicMeter*1e-3) / 1e-6d; }
			}

			/// <summary>
			///     Get Density in MilligramsPerDeciLiter.
			/// </summary>
			public Number<T, C> MilligramsPerDeciLiter
			{
				get { return (_kilogramsPerCubicMeter*1e-1) / 1e-3d; }
			}

			/// <summary>
			///     Get Density in MilligramsPerLiter.
			/// </summary>
			public Number<T, C> MilligramsPerLiter
			{
				get { return (_kilogramsPerCubicMeter*1) / 1e-3d; }
			}

			/// <summary>
			///     Get Density in MilligramsPerMilliliter.
			/// </summary>
			public Number<T, C> MilligramsPerMilliliter
			{
				get { return (_kilogramsPerCubicMeter*1e-3) / 1e-3d; }
			}

			/// <summary>
			///     Get Density in NanogramsPerDeciLiter.
			/// </summary>
			public Number<T, C> NanogramsPerDeciLiter
			{
				get { return (_kilogramsPerCubicMeter*1e-1) / 1e-9d; }
			}

			/// <summary>
			///     Get Density in NanogramsPerLiter.
			/// </summary>
			public Number<T, C> NanogramsPerLiter
			{
				get { return (_kilogramsPerCubicMeter*1) / 1e-9d; }
			}

			/// <summary>
			///     Get Density in NanogramsPerMilliliter.
			/// </summary>
			public Number<T, C> NanogramsPerMilliliter
			{
				get { return (_kilogramsPerCubicMeter*1e-3) / 1e-9d; }
			}

			/// <summary>
			///     Get Density in PicogramsPerDeciLiter.
			/// </summary>
			public Number<T, C> PicogramsPerDeciLiter
			{
				get { return (_kilogramsPerCubicMeter*1e-1) / 1e-12d; }
			}

			/// <summary>
			///     Get Density in PicogramsPerLiter.
			/// </summary>
			public Number<T, C> PicogramsPerLiter
			{
				get { return (_kilogramsPerCubicMeter*1) / 1e-12d; }
			}

			/// <summary>
			///     Get Density in PicogramsPerMilliliter.
			/// </summary>
			public Number<T, C> PicogramsPerMilliliter
			{
				get { return (_kilogramsPerCubicMeter*1e-3) / 1e-12d; }
			}

			/// <summary>
			///     Get Density in PoundsPerCubicFoot.
			/// </summary>
			public Number<T, C> PoundsPerCubicFoot
			{
				get { return _kilogramsPerCubicMeter*0.062427961; }
			}

			/// <summary>
			///     Get Density in PoundsPerCubicInch.
			/// </summary>
			public Number<T, C> PoundsPerCubicInch
			{
				get { return _kilogramsPerCubicMeter*3.6127298147753e-5; }
			}

			/// <summary>
			///     Get Density in SlugsPerCubicFoot.
			/// </summary>
			public Number<T, C> SlugsPerCubicFoot
			{
				get { return _kilogramsPerCubicMeter*0.00194032033; }
			}

			/// <summary>
			///     Get Density in TonnesPerCubicCentimeter.
			/// </summary>
			public Number<T, C> TonnesPerCubicCentimeter
			{
				get { return _kilogramsPerCubicMeter*1e-9; }
			}

			/// <summary>
			///     Get Density in TonnesPerCubicMeter.
			/// </summary>
			public Number<T, C> TonnesPerCubicMeter
			{
				get { return _kilogramsPerCubicMeter*0.001; }
			}

			/// <summary>
			///     Get Density in TonnesPerCubicMillimeter.
			/// </summary>
			public Number<T, C> TonnesPerCubicMillimeter
			{
				get { return _kilogramsPerCubicMeter*1e-12; }
			}

			#endregion

			#region Static

			public static Density<T, C> Zero
			{
				get { return new Density<T, C>(); }
			}

			/// <summary>
			///     Get Density from CentigramsPerDeciLiter.
			/// </summary>
#if WINDOWS_UWP
			[Windows.Foundation.Metadata.DefaultOverload]
			public static Density<T, C> FromCentigramsPerDeciLiter(Number<T, C> centigramsperdeciliter)
			{
				Number<T,C> value = (Number<T,C>) centigramsperdeciliter;
				return new Density<T, C>((value/1e-1) * 1e-2d);
			}
#else
			public static Density<T, C> FromCentigramsPerDeciLiter(Number<T, C> centigramsperdeciliter)
			{
				Number<T,C> value = (Number<T,C>) centigramsperdeciliter;
				return new Density<T, C>(new Number<T,C>((value/1e-1) * 1e-2d));
			}
#endif

			/// <summary>
			///     Get Density from CentigramsPerLiter.
			/// </summary>
#if WINDOWS_UWP
			[Windows.Foundation.Metadata.DefaultOverload]
			public static Density<T, C> FromCentigramsPerLiter(Number<T, C> centigramsperliter)
			{
				Number<T,C> value = (Number<T,C>) centigramsperliter;
				return new Density<T, C>((value/1) * 1e-2d);
			}
#else
			public static Density<T, C> FromCentigramsPerLiter(Number<T, C> centigramsperliter)
			{
				Number<T,C> value = (Number<T,C>) centigramsperliter;
				return new Density<T, C>(new Number<T,C>((value/1) * 1e-2d));
			}
#endif

			/// <summary>
			///     Get Density from CentigramsPerMilliliter.
			/// </summary>
#if WINDOWS_UWP
			[Windows.Foundation.Metadata.DefaultOverload]
			public static Density<T, C> FromCentigramsPerMilliliter(Number<T, C> centigramspermilliliter)
			{
				Number<T,C> value = (Number<T,C>) centigramspermilliliter;
				return new Density<T, C>((value/1e-3) * 1e-2d);
			}
#else
			public static Density<T, C> FromCentigramsPerMilliliter(Number<T, C> centigramspermilliliter)
			{
				Number<T,C> value = (Number<T,C>) centigramspermilliliter;
				return new Density<T, C>(new Number<T,C>((value/1e-3) * 1e-2d));
			}
#endif

			/// <summary>
			///     Get Density from DecigramsPerDeciLiter.
			/// </summary>
#if WINDOWS_UWP
			[Windows.Foundation.Metadata.DefaultOverload]
			public static Density<T, C> FromDecigramsPerDeciLiter(Number<T, C> decigramsperdeciliter)
			{
				Number<T,C> value = (Number<T,C>) decigramsperdeciliter;
				return new Density<T, C>((value/1e-1) * 1e-1d);
			}
#else
			public static Density<T, C> FromDecigramsPerDeciLiter(Number<T, C> decigramsperdeciliter)
			{
				Number<T,C> value = (Number<T,C>) decigramsperdeciliter;
				return new Density<T, C>(new Number<T,C>((value/1e-1) * 1e-1d));
			}
#endif

			/// <summary>
			///     Get Density from DecigramsPerLiter.
			/// </summary>
#if WINDOWS_UWP
			[Windows.Foundation.Metadata.DefaultOverload]
			public static Density<T, C> FromDecigramsPerLiter(Number<T, C> decigramsperliter)
			{
				Number<T,C> value = (Number<T,C>) decigramsperliter;
				return new Density<T, C>((value/1) * 1e-1d);
			}
#else
			public static Density<T, C> FromDecigramsPerLiter(Number<T, C> decigramsperliter)
			{
				Number<T,C> value = (Number<T,C>) decigramsperliter;
				return new Density<T, C>(new Number<T,C>((value/1) * 1e-1d));
			}
#endif

			/// <summary>
			///     Get Density from DecigramsPerMilliliter.
			/// </summary>
#if WINDOWS_UWP
			[Windows.Foundation.Metadata.DefaultOverload]
			public static Density<T, C> FromDecigramsPerMilliliter(Number<T, C> decigramspermilliliter)
			{
				Number<T,C> value = (Number<T,C>) decigramspermilliliter;
				return new Density<T, C>((value/1e-3) * 1e-1d);
			}
#else
			public static Density<T, C> FromDecigramsPerMilliliter(Number<T, C> decigramspermilliliter)
			{
				Number<T,C> value = (Number<T,C>) decigramspermilliliter;
				return new Density<T, C>(new Number<T,C>((value/1e-3) * 1e-1d));
			}
#endif

			/// <summary>
			///     Get Density from GramsPerCubicCentimeter.
			/// </summary>
#if WINDOWS_UWP
			[Windows.Foundation.Metadata.DefaultOverload]
			public static Density<T, C> FromGramsPerCubicCentimeter(Number<T, C> gramspercubiccentimeter)
			{
				Number<T,C> value = (Number<T,C>) gramspercubiccentimeter;
				return new Density<T, C>(value/1e-3);
			}
#else
			public static Density<T, C> FromGramsPerCubicCentimeter(Number<T, C> gramspercubiccentimeter)
			{
				Number<T,C> value = (Number<T,C>) gramspercubiccentimeter;
				return new Density<T, C>(new Number<T,C>(value/1e-3));
			}
#endif

			/// <summary>
			///     Get Density from GramsPerCubicMeter.
			/// </summary>
#if WINDOWS_UWP
			[Windows.Foundation.Metadata.DefaultOverload]
			public static Density<T, C> FromGramsPerCubicMeter(Number<T, C> gramspercubicmeter)
			{
				Number<T,C> value = (Number<T,C>) gramspercubicmeter;
				return new Density<T, C>(value/1e3);
			}
#else
			public static Density<T, C> FromGramsPerCubicMeter(Number<T, C> gramspercubicmeter)
			{
				Number<T,C> value = (Number<T,C>) gramspercubicmeter;
				return new Density<T, C>(new Number<T,C>(value/1e3));
			}
#endif

			/// <summary>
			///     Get Density from GramsPerCubicMillimeter.
			/// </summary>
#if WINDOWS_UWP
			[Windows.Foundation.Metadata.DefaultOverload]
			public static Density<T, C> FromGramsPerCubicMillimeter(Number<T, C> gramspercubicmillimeter)
			{
				Number<T,C> value = (Number<T,C>) gramspercubicmillimeter;
				return new Density<T, C>(value/1e-6);
			}
#else
			public static Density<T, C> FromGramsPerCubicMillimeter(Number<T, C> gramspercubicmillimeter)
			{
				Number<T,C> value = (Number<T,C>) gramspercubicmillimeter;
				return new Density<T, C>(new Number<T,C>(value/1e-6));
			}
#endif

			/// <summary>
			///     Get Density from GramsPerDeciLiter.
			/// </summary>
#if WINDOWS_UWP
			[Windows.Foundation.Metadata.DefaultOverload]
			public static Density<T, C> FromGramsPerDeciLiter(Number<T, C> gramsperdeciliter)
			{
				Number<T,C> value = (Number<T,C>) gramsperdeciliter;
				return new Density<T, C>(value/1e-1);
			}
#else
			public static Density<T, C> FromGramsPerDeciLiter(Number<T, C> gramsperdeciliter)
			{
				Number<T,C> value = (Number<T,C>) gramsperdeciliter;
				return new Density<T, C>(new Number<T,C>(value/1e-1));
			}
#endif

			/// <summary>
			///     Get Density from GramsPerLiter.
			/// </summary>
#if WINDOWS_UWP
			[Windows.Foundation.Metadata.DefaultOverload]
			public static Density<T, C> FromGramsPerLiter(Number<T, C> gramsperliter)
			{
				Number<T,C> value = (Number<T,C>) gramsperliter;
				return new Density<T, C>(value/1);
			}
#else
			public static Density<T, C> FromGramsPerLiter(Number<T, C> gramsperliter)
			{
				Number<T,C> value = (Number<T,C>) gramsperliter;
				return new Density<T, C>(new Number<T,C>(value/1));
			}
#endif

			/// <summary>
			///     Get Density from GramsPerMilliliter.
			/// </summary>
#if WINDOWS_UWP
			[Windows.Foundation.Metadata.DefaultOverload]
			public static Density<T, C> FromGramsPerMilliliter(Number<T, C> gramspermilliliter)
			{
				Number<T,C> value = (Number<T,C>) gramspermilliliter;
				return new Density<T, C>(value/1e-3);
			}
#else
			public static Density<T, C> FromGramsPerMilliliter(Number<T, C> gramspermilliliter)
			{
				Number<T,C> value = (Number<T,C>) gramspermilliliter;
				return new Density<T, C>(new Number<T,C>(value/1e-3));
			}
#endif

			/// <summary>
			///     Get Density from KilogramsPerCubicCentimeter.
			/// </summary>
#if WINDOWS_UWP
			[Windows.Foundation.Metadata.DefaultOverload]
			public static Density<T, C> FromKilogramsPerCubicCentimeter(Number<T, C> kilogramspercubiccentimeter)
			{
				Number<T,C> value = (Number<T,C>) kilogramspercubiccentimeter;
				return new Density<T, C>((value/1e-3) * 1e3d);
			}
#else
			public static Density<T, C> FromKilogramsPerCubicCentimeter(Number<T, C> kilogramspercubiccentimeter)
			{
				Number<T,C> value = (Number<T,C>) kilogramspercubiccentimeter;
				return new Density<T, C>(new Number<T,C>((value/1e-3) * 1e3d));
			}
#endif

			/// <summary>
			///     Get Density from KilogramsPerCubicMeter.
			/// </summary>
#if WINDOWS_UWP
			[Windows.Foundation.Metadata.DefaultOverload]
			public static Density<T, C> FromKilogramsPerCubicMeter(Number<T, C> kilogramspercubicmeter)
			{
				Number<T,C> value = (Number<T,C>) kilogramspercubicmeter;
				return new Density<T, C>((value/1e3) * 1e3d);
			}
#else
			public static Density<T, C> FromKilogramsPerCubicMeter(Number<T, C> kilogramspercubicmeter)
			{
				Number<T,C> value = (Number<T,C>) kilogramspercubicmeter;
				return new Density<T, C>(new Number<T,C>((value/1e3) * 1e3d));
			}
#endif

			/// <summary>
			///     Get Density from KilogramsPerCubicMillimeter.
			/// </summary>
#if WINDOWS_UWP
			[Windows.Foundation.Metadata.DefaultOverload]
			public static Density<T, C> FromKilogramsPerCubicMillimeter(Number<T, C> kilogramspercubicmillimeter)
			{
				Number<T,C> value = (Number<T,C>) kilogramspercubicmillimeter;
				return new Density<T, C>((value/1e-6) * 1e3d);
			}
#else
			public static Density<T, C> FromKilogramsPerCubicMillimeter(Number<T, C> kilogramspercubicmillimeter)
			{
				Number<T,C> value = (Number<T,C>) kilogramspercubicmillimeter;
				return new Density<T, C>(new Number<T,C>((value/1e-6) * 1e3d));
			}
#endif

			/// <summary>
			///     Get Density from KilopoundsPerCubicFoot.
			/// </summary>
#if WINDOWS_UWP
			[Windows.Foundation.Metadata.DefaultOverload]
			public static Density<T, C> FromKilopoundsPerCubicFoot(Number<T, C> kilopoundspercubicfoot)
			{
				Number<T,C> value = (Number<T,C>) kilopoundspercubicfoot;
				return new Density<T, C>((value/0.062427961) * 1e3d);
			}
#else
			public static Density<T, C> FromKilopoundsPerCubicFoot(Number<T, C> kilopoundspercubicfoot)
			{
				Number<T,C> value = (Number<T,C>) kilopoundspercubicfoot;
				return new Density<T, C>(new Number<T,C>((value/0.062427961) * 1e3d));
			}
#endif

			/// <summary>
			///     Get Density from KilopoundsPerCubicInch.
			/// </summary>
#if WINDOWS_UWP
			[Windows.Foundation.Metadata.DefaultOverload]
			public static Density<T, C> FromKilopoundsPerCubicInch(Number<T, C> kilopoundspercubicinch)
			{
				Number<T,C> value = (Number<T,C>) kilopoundspercubicinch;
				return new Density<T, C>((value/3.6127298147753e-5) * 1e3d);
			}
#else
			public static Density<T, C> FromKilopoundsPerCubicInch(Number<T, C> kilopoundspercubicinch)
			{
				Number<T,C> value = (Number<T,C>) kilopoundspercubicinch;
				return new Density<T, C>(new Number<T,C>((value/3.6127298147753e-5) * 1e3d));
			}
#endif

			/// <summary>
			///     Get Density from MicrogramsPerDeciLiter.
			/// </summary>
#if WINDOWS_UWP
			[Windows.Foundation.Metadata.DefaultOverload]
			public static Density<T, C> FromMicrogramsPerDeciLiter(Number<T, C> microgramsperdeciliter)
			{
				Number<T,C> value = (Number<T,C>) microgramsperdeciliter;
				return new Density<T, C>((value/1e-1) * 1e-6d);
			}
#else
			public static Density<T, C> FromMicrogramsPerDeciLiter(Number<T, C> microgramsperdeciliter)
			{
				Number<T,C> value = (Number<T,C>) microgramsperdeciliter;
				return new Density<T, C>(new Number<T,C>((value/1e-1) * 1e-6d));
			}
#endif

			/// <summary>
			///     Get Density from MicrogramsPerLiter.
			/// </summary>
#if WINDOWS_UWP
			[Windows.Foundation.Metadata.DefaultOverload]
			public static Density<T, C> FromMicrogramsPerLiter(Number<T, C> microgramsperliter)
			{
				Number<T,C> value = (Number<T,C>) microgramsperliter;
				return new Density<T, C>((value/1) * 1e-6d);
			}
#else
			public static Density<T, C> FromMicrogramsPerLiter(Number<T, C> microgramsperliter)
			{
				Number<T,C> value = (Number<T,C>) microgramsperliter;
				return new Density<T, C>(new Number<T,C>((value/1) * 1e-6d));
			}
#endif

			/// <summary>
			///     Get Density from MicrogramsPerMilliliter.
			/// </summary>
#if WINDOWS_UWP
			[Windows.Foundation.Metadata.DefaultOverload]
			public static Density<T, C> FromMicrogramsPerMilliliter(Number<T, C> microgramspermilliliter)
			{
				Number<T,C> value = (Number<T,C>) microgramspermilliliter;
				return new Density<T, C>((value/1e-3) * 1e-6d);
			}
#else
			public static Density<T, C> FromMicrogramsPerMilliliter(Number<T, C> microgramspermilliliter)
			{
				Number<T,C> value = (Number<T,C>) microgramspermilliliter;
				return new Density<T, C>(new Number<T,C>((value/1e-3) * 1e-6d));
			}
#endif

			/// <summary>
			///     Get Density from MilligramsPerDeciLiter.
			/// </summary>
#if WINDOWS_UWP
			[Windows.Foundation.Metadata.DefaultOverload]
			public static Density<T, C> FromMilligramsPerDeciLiter(Number<T, C> milligramsperdeciliter)
			{
				Number<T,C> value = (Number<T,C>) milligramsperdeciliter;
				return new Density<T, C>((value/1e-1) * 1e-3d);
			}
#else
			public static Density<T, C> FromMilligramsPerDeciLiter(Number<T, C> milligramsperdeciliter)
			{
				Number<T,C> value = (Number<T,C>) milligramsperdeciliter;
				return new Density<T, C>(new Number<T,C>((value/1e-1) * 1e-3d));
			}
#endif

			/// <summary>
			///     Get Density from MilligramsPerLiter.
			/// </summary>
#if WINDOWS_UWP
			[Windows.Foundation.Metadata.DefaultOverload]
			public static Density<T, C> FromMilligramsPerLiter(Number<T, C> milligramsperliter)
			{
				Number<T,C> value = (Number<T,C>) milligramsperliter;
				return new Density<T, C>((value/1) * 1e-3d);
			}
#else
			public static Density<T, C> FromMilligramsPerLiter(Number<T, C> milligramsperliter)
			{
				Number<T,C> value = (Number<T,C>) milligramsperliter;
				return new Density<T, C>(new Number<T,C>((value/1) * 1e-3d));
			}
#endif

			/// <summary>
			///     Get Density from MilligramsPerMilliliter.
			/// </summary>
#if WINDOWS_UWP
			[Windows.Foundation.Metadata.DefaultOverload]
			public static Density<T, C> FromMilligramsPerMilliliter(Number<T, C> milligramspermilliliter)
			{
				Number<T,C> value = (Number<T,C>) milligramspermilliliter;
				return new Density<T, C>((value/1e-3) * 1e-3d);
			}
#else
			public static Density<T, C> FromMilligramsPerMilliliter(Number<T, C> milligramspermilliliter)
			{
				Number<T,C> value = (Number<T,C>) milligramspermilliliter;
				return new Density<T, C>(new Number<T,C>((value/1e-3) * 1e-3d));
			}
#endif

			/// <summary>
			///     Get Density from NanogramsPerDeciLiter.
			/// </summary>
#if WINDOWS_UWP
			[Windows.Foundation.Metadata.DefaultOverload]
			public static Density<T, C> FromNanogramsPerDeciLiter(Number<T, C> nanogramsperdeciliter)
			{
				Number<T,C> value = (Number<T,C>) nanogramsperdeciliter;
				return new Density<T, C>((value/1e-1) * 1e-9d);
			}
#else
			public static Density<T, C> FromNanogramsPerDeciLiter(Number<T, C> nanogramsperdeciliter)
			{
				Number<T,C> value = (Number<T,C>) nanogramsperdeciliter;
				return new Density<T, C>(new Number<T,C>((value/1e-1) * 1e-9d));
			}
#endif

			/// <summary>
			///     Get Density from NanogramsPerLiter.
			/// </summary>
#if WINDOWS_UWP
			[Windows.Foundation.Metadata.DefaultOverload]
			public static Density<T, C> FromNanogramsPerLiter(Number<T, C> nanogramsperliter)
			{
				Number<T,C> value = (Number<T,C>) nanogramsperliter;
				return new Density<T, C>((value/1) * 1e-9d);
			}
#else
			public static Density<T, C> FromNanogramsPerLiter(Number<T, C> nanogramsperliter)
			{
				Number<T,C> value = (Number<T,C>) nanogramsperliter;
				return new Density<T, C>(new Number<T,C>((value/1) * 1e-9d));
			}
#endif

			/// <summary>
			///     Get Density from NanogramsPerMilliliter.
			/// </summary>
#if WINDOWS_UWP
			[Windows.Foundation.Metadata.DefaultOverload]
			public static Density<T, C> FromNanogramsPerMilliliter(Number<T, C> nanogramspermilliliter)
			{
				Number<T,C> value = (Number<T,C>) nanogramspermilliliter;
				return new Density<T, C>((value/1e-3) * 1e-9d);
			}
#else
			public static Density<T, C> FromNanogramsPerMilliliter(Number<T, C> nanogramspermilliliter)
			{
				Number<T,C> value = (Number<T,C>) nanogramspermilliliter;
				return new Density<T, C>(new Number<T,C>((value/1e-3) * 1e-9d));
			}
#endif

			/// <summary>
			///     Get Density from PicogramsPerDeciLiter.
			/// </summary>
#if WINDOWS_UWP
			[Windows.Foundation.Metadata.DefaultOverload]
			public static Density<T, C> FromPicogramsPerDeciLiter(Number<T, C> picogramsperdeciliter)
			{
				Number<T,C> value = (Number<T,C>) picogramsperdeciliter;
				return new Density<T, C>((value/1e-1) * 1e-12d);
			}
#else
			public static Density<T, C> FromPicogramsPerDeciLiter(Number<T, C> picogramsperdeciliter)
			{
				Number<T,C> value = (Number<T,C>) picogramsperdeciliter;
				return new Density<T, C>(new Number<T,C>((value/1e-1) * 1e-12d));
			}
#endif

			/// <summary>
			///     Get Density from PicogramsPerLiter.
			/// </summary>
#if WINDOWS_UWP
			[Windows.Foundation.Metadata.DefaultOverload]
			public static Density<T, C> FromPicogramsPerLiter(Number<T, C> picogramsperliter)
			{
				Number<T,C> value = (Number<T,C>) picogramsperliter;
				return new Density<T, C>((value/1) * 1e-12d);
			}
#else
			public static Density<T, C> FromPicogramsPerLiter(Number<T, C> picogramsperliter)
			{
				Number<T,C> value = (Number<T,C>) picogramsperliter;
				return new Density<T, C>(new Number<T,C>((value/1) * 1e-12d));
			}
#endif

			/// <summary>
			///     Get Density from PicogramsPerMilliliter.
			/// </summary>
#if WINDOWS_UWP
			[Windows.Foundation.Metadata.DefaultOverload]
			public static Density<T, C> FromPicogramsPerMilliliter(Number<T, C> picogramspermilliliter)
			{
				Number<T,C> value = (Number<T,C>) picogramspermilliliter;
				return new Density<T, C>((value/1e-3) * 1e-12d);
			}
#else
			public static Density<T, C> FromPicogramsPerMilliliter(Number<T, C> picogramspermilliliter)
			{
				Number<T,C> value = (Number<T,C>) picogramspermilliliter;
				return new Density<T, C>(new Number<T,C>((value/1e-3) * 1e-12d));
			}
#endif

			/// <summary>
			///     Get Density from PoundsPerCubicFoot.
			/// </summary>
#if WINDOWS_UWP
			[Windows.Foundation.Metadata.DefaultOverload]
			public static Density<T, C> FromPoundsPerCubicFoot(Number<T, C> poundspercubicfoot)
			{
				Number<T,C> value = (Number<T,C>) poundspercubicfoot;
				return new Density<T, C>(value/0.062427961);
			}
#else
			public static Density<T, C> FromPoundsPerCubicFoot(Number<T, C> poundspercubicfoot)
			{
				Number<T,C> value = (Number<T,C>) poundspercubicfoot;
				return new Density<T, C>(new Number<T,C>(value/0.062427961));
			}
#endif

			/// <summary>
			///     Get Density from PoundsPerCubicInch.
			/// </summary>
#if WINDOWS_UWP
			[Windows.Foundation.Metadata.DefaultOverload]
			public static Density<T, C> FromPoundsPerCubicInch(Number<T, C> poundspercubicinch)
			{
				Number<T,C> value = (Number<T,C>) poundspercubicinch;
				return new Density<T, C>(value/3.6127298147753e-5);
			}
#else
			public static Density<T, C> FromPoundsPerCubicInch(Number<T, C> poundspercubicinch)
			{
				Number<T,C> value = (Number<T,C>) poundspercubicinch;
				return new Density<T, C>(new Number<T,C>(value/3.6127298147753e-5));
			}
#endif

			/// <summary>
			///     Get Density from SlugsPerCubicFoot.
			/// </summary>
#if WINDOWS_UWP
			[Windows.Foundation.Metadata.DefaultOverload]
			public static Density<T, C> FromSlugsPerCubicFoot(Number<T, C> slugspercubicfoot)
			{
				Number<T,C> value = (Number<T,C>) slugspercubicfoot;
				return new Density<T, C>(value*515.378818);
			}
#else
			public static Density<T, C> FromSlugsPerCubicFoot(Number<T, C> slugspercubicfoot)
			{
				Number<T,C> value = (Number<T,C>) slugspercubicfoot;
				return new Density<T, C>(new Number<T,C>(value*515.378818));
			}
#endif

			/// <summary>
			///     Get Density from TonnesPerCubicCentimeter.
			/// </summary>
#if WINDOWS_UWP
			[Windows.Foundation.Metadata.DefaultOverload]
			public static Density<T, C> FromTonnesPerCubicCentimeter(Number<T, C> tonnespercubiccentimeter)
			{
				Number<T,C> value = (Number<T,C>) tonnespercubiccentimeter;
				return new Density<T, C>(value/1e-9);
			}
#else
			public static Density<T, C> FromTonnesPerCubicCentimeter(Number<T, C> tonnespercubiccentimeter)
			{
				Number<T,C> value = (Number<T,C>) tonnespercubiccentimeter;
				return new Density<T, C>(new Number<T,C>(value/1e-9));
			}
#endif

			/// <summary>
			///     Get Density from TonnesPerCubicMeter.
			/// </summary>
#if WINDOWS_UWP
			[Windows.Foundation.Metadata.DefaultOverload]
			public static Density<T, C> FromTonnesPerCubicMeter(Number<T, C> tonnespercubicmeter)
			{
				Number<T,C> value = (Number<T,C>) tonnespercubicmeter;
				return new Density<T, C>(value/0.001);
			}
#else
			public static Density<T, C> FromTonnesPerCubicMeter(Number<T, C> tonnespercubicmeter)
			{
				Number<T,C> value = (Number<T,C>) tonnespercubicmeter;
				return new Density<T, C>(new Number<T,C>(value/0.001));
			}
#endif

			/// <summary>
			///     Get Density from TonnesPerCubicMillimeter.
			/// </summary>
#if WINDOWS_UWP
			[Windows.Foundation.Metadata.DefaultOverload]
			public static Density<T, C> FromTonnesPerCubicMillimeter(Number<T, C> tonnespercubicmillimeter)
			{
				Number<T,C> value = (Number<T,C>) tonnespercubicmillimeter;
				return new Density<T, C>(value/1e-12);
			}
#else
			public static Density<T, C> FromTonnesPerCubicMillimeter(Number<T, C> tonnespercubicmillimeter)
			{
				Number<T,C> value = (Number<T,C>) tonnespercubicmillimeter;
				return new Density<T, C>(new Number<T,C>(value/1e-12));
			}
#endif



			/// <summary>
			///     Dynamically convert from value and unit enum <see cref="DensityUnit" /> to <see cref="Density" />.
			/// </summary>
			/// <param name="value">Value to convert from.</param>
			/// <param name="fromUnit">Unit to convert from.</param>
			/// <returns>Density unit value.</returns>
#if WINDOWS_UWP
			// Fix name conflict with parameter "value"
			[return: System.Runtime.InteropServices.WindowsRuntime.ReturnValueName("returnValue")]
			public static Density<T, C> From(double value, DensityUnit fromUnit)
#else
			public static Density<T, C> From(Number<T, C> value, DensityUnit fromUnit)
#endif
			{
				switch (fromUnit)
				{
					case DensityUnit.CentigramPerDeciliter:
						return FromCentigramsPerDeciLiter(value);
					case DensityUnit.CentigramPerLiter:
						return FromCentigramsPerLiter(value);
					case DensityUnit.CentigramPerMilliliter:
						return FromCentigramsPerMilliliter(value);
					case DensityUnit.DecigramPerDeciliter:
						return FromDecigramsPerDeciLiter(value);
					case DensityUnit.DecigramPerLiter:
						return FromDecigramsPerLiter(value);
					case DensityUnit.DecigramPerMilliliter:
						return FromDecigramsPerMilliliter(value);
					case DensityUnit.GramPerCubicCentimeter:
						return FromGramsPerCubicCentimeter(value);
					case DensityUnit.GramPerCubicMeter:
						return FromGramsPerCubicMeter(value);
					case DensityUnit.GramPerCubicMillimeter:
						return FromGramsPerCubicMillimeter(value);
					case DensityUnit.GramPerDeciliter:
						return FromGramsPerDeciLiter(value);
					case DensityUnit.GramPerLiter:
						return FromGramsPerLiter(value);
					case DensityUnit.GramPerMilliliter:
						return FromGramsPerMilliliter(value);
					case DensityUnit.KilogramPerCubicCentimeter:
						return FromKilogramsPerCubicCentimeter(value);
					case DensityUnit.KilogramPerCubicMeter:
						return FromKilogramsPerCubicMeter(value);
					case DensityUnit.KilogramPerCubicMillimeter:
						return FromKilogramsPerCubicMillimeter(value);
					case DensityUnit.KilopoundPerCubicFoot:
						return FromKilopoundsPerCubicFoot(value);
					case DensityUnit.KilopoundPerCubicInch:
						return FromKilopoundsPerCubicInch(value);
					case DensityUnit.MicrogramPerDeciliter:
						return FromMicrogramsPerDeciLiter(value);
					case DensityUnit.MicrogramPerLiter:
						return FromMicrogramsPerLiter(value);
					case DensityUnit.MicrogramPerMilliliter:
						return FromMicrogramsPerMilliliter(value);
					case DensityUnit.MilligramPerDeciliter:
						return FromMilligramsPerDeciLiter(value);
					case DensityUnit.MilligramPerLiter:
						return FromMilligramsPerLiter(value);
					case DensityUnit.MilligramPerMilliliter:
						return FromMilligramsPerMilliliter(value);
					case DensityUnit.NanogramPerDeciliter:
						return FromNanogramsPerDeciLiter(value);
					case DensityUnit.NanogramPerLiter:
						return FromNanogramsPerLiter(value);
					case DensityUnit.NanogramPerMilliliter:
						return FromNanogramsPerMilliliter(value);
					case DensityUnit.PicogramPerDeciliter:
						return FromPicogramsPerDeciLiter(value);
					case DensityUnit.PicogramPerLiter:
						return FromPicogramsPerLiter(value);
					case DensityUnit.PicogramPerMilliliter:
						return FromPicogramsPerMilliliter(value);
					case DensityUnit.PoundPerCubicFoot:
						return FromPoundsPerCubicFoot(value);
					case DensityUnit.PoundPerCubicInch:
						return FromPoundsPerCubicInch(value);
					case DensityUnit.SlugPerCubicFoot:
						return FromSlugsPerCubicFoot(value);
					case DensityUnit.TonnePerCubicCentimeter:
						return FromTonnesPerCubicCentimeter(value);
					case DensityUnit.TonnePerCubicMeter:
						return FromTonnesPerCubicMeter(value);
					case DensityUnit.TonnePerCubicMillimeter:
						return FromTonnesPerCubicMillimeter(value);

					default:
						throw new NotImplementedException("fromUnit: " + fromUnit);
				}
			}

			/// <summary>
			///     Get unit abbreviation string.
			/// </summary>
			/// <param name="unit">Unit to get abbreviation for.</param>
			/// <returns>Unit abbreviation string.</returns>
			[UsedImplicitly]
			public static string GetAbbreviation(DensityUnit unit)
			{
				return GetAbbreviation(unit, null);
			}

			/// <summary>
			///     Get unit abbreviation string.
			/// </summary>
			/// <param name="unit">Unit to get abbreviation for.</param>
			/// <param name="culture">Culture to use for localization. Defaults to Thread.CurrentUICulture.</param>
			/// <returns>Unit abbreviation string.</returns>
			[UsedImplicitly]
			public static string GetAbbreviation(DensityUnit unit, [CanBeNull] Culture culture)
			{
				return UnitSystem.GetCached(culture).GetDefaultAbbreviation(unit);
			}

			#endregion

			#region Arithmetic Operators

			// Windows Runtime Component does not allow operator overloads: https://msdn.microsoft.com/en-us/library/br230301.aspx
#if !WINDOWS_UWP
			public static Density<T, C> operator -(Density<T, C> right)
			{
				return new Density<T, C>(-right._kilogramsPerCubicMeter);
			}

			public static Density<T, C> operator +(Density<T, C> left, Density<T, C> right)
			{
				return new Density<T, C>(left._kilogramsPerCubicMeter + right._kilogramsPerCubicMeter);
			}

			public static Density<T, C> operator -(Density<T, C> left, Density<T, C> right)
			{
				return new Density<T, C>(left._kilogramsPerCubicMeter - right._kilogramsPerCubicMeter);
			}

			public static Density<T, C> operator *(Number<T, C> left, Density<T, C> right)
			{
				return new Density<T, C>(left*right._kilogramsPerCubicMeter);
			}

			public static Density<T, C> operator *(Density<T, C> left, double right)
			{
				return new Density<T, C>(left._kilogramsPerCubicMeter*right);
			}

			public static Density<T, C> operator /(Density<T, C> left, double right)
			{
				return new Density<T, C>(left._kilogramsPerCubicMeter/right);
			}

			public static double operator /(Density<T, C> left, Density<T, C> right)
			{
				return Convert.ToDouble(left._kilogramsPerCubicMeter/right._kilogramsPerCubicMeter);
			}
#endif

			#endregion

			#region Equality / IComparable

			public int CompareTo(object obj)
			{
				if (obj == null) throw new ArgumentNullException("obj");
				if (!(obj is Density<T, C>)) throw new ArgumentException("Expected type Density.", "obj");
				return CompareTo((Density<T, C>) obj);
			}

			// Windows Runtime Component does not allow public methods/ctors with same number of parameters: https://msdn.microsoft.com/en-us/library/br230301.aspx#Overloaded methods
#if WINDOWS_UWP
			internal
#else
			public
#endif
			int CompareTo(Density<T, C> other)
			{
				return _kilogramsPerCubicMeter.CompareTo(other._kilogramsPerCubicMeter);
			}

			// Windows Runtime Component does not allow operator overloads: https://msdn.microsoft.com/en-us/library/br230301.aspx
#if !WINDOWS_UWP
			public static bool operator <=(Density<T, C> left, Density<T, C> right)
			{
				return left._kilogramsPerCubicMeter <= right._kilogramsPerCubicMeter;
			}

			public static bool operator >=(Density<T, C> left, Density<T, C> right)
			{
				return left._kilogramsPerCubicMeter >= right._kilogramsPerCubicMeter;
			}

			public static bool operator <(Density<T, C> left, Density<T, C> right)
			{
				return left._kilogramsPerCubicMeter < right._kilogramsPerCubicMeter;
			}

			public static bool operator >(Density<T, C> left, Density<T, C> right)
			{
				return left._kilogramsPerCubicMeter > right._kilogramsPerCubicMeter;
			}

			[Obsolete("It is not safe to compare equality due to using System.Double as the internal representation. It is very easy to get slightly different values due to floating point operations. Instead use Equals(other, maxError) to provide the max allowed error.")]
        public static bool operator ==(Density<T, C> left, Density<T, C> right)
			{
				// ReSharper disable once CompareOfFloatsByEqualityOperator
				return left._kilogramsPerCubicMeter == right._kilogramsPerCubicMeter;
			}

			[Obsolete("It is not safe to compare equality due to using System.Double as the internal representation. It is very easy to get slightly different values due to floating point operations. Instead use Equals(other, maxError) to provide the max allowed error.")]
        public static bool operator !=(Density<T, C> left, Density<T, C> right)
			{
				// ReSharper disable once CompareOfFloatsByEqualityOperator
				return left._kilogramsPerCubicMeter != right._kilogramsPerCubicMeter;
			}
#endif

			[Obsolete("It is not safe to compare equality due to using System.Double as the internal representation. It is very easy to get slightly different values due to floating point operations. Instead use Equals(other, maxError) to provide the max allowed error.")]
        public override bool Equals(object obj)
			{
				if (obj == null || GetType() != obj.GetType())
				{
					return false;
				}

				return _kilogramsPerCubicMeter.Equals(((Density<T, C>) obj)._kilogramsPerCubicMeter);
			}

			/// <summary>
			///     Compare equality to another Density by specifying a max allowed difference.
			///     Note that it is advised against specifying zero difference, due to the nature
			///     of floating point operations and using System.Double internally.
			/// </summary>
			/// <param name="other">Other quantity to compare to.</param>
			/// <param name="maxError">Max error allowed.</param>
			/// <returns>True if the difference between the two values is not greater than the specified max.</returns>
			public bool Equals(Density<T, C> other, Density<T, C> maxError)
			{
				return Math.Abs((decimal)_kilogramsPerCubicMeter - (decimal)other._kilogramsPerCubicMeter) <= maxError._kilogramsPerCubicMeter;
			}

			public override int GetHashCode()
			{
				return _kilogramsPerCubicMeter.GetHashCode();
			}

			#endregion

			#region Conversion

			/// <summary>
			///     Convert to the unit representation <paramref name="unit" />.
			/// </summary>
			/// <returns>Value in new unit if successful, exception otherwise.</returns>
			/// <exception cref="NotImplementedException">If conversion was not successful.</exception>
			public Number<T, C> As(DensityUnit unit)
			{
				switch (unit)
				{
					case DensityUnit.CentigramPerDeciliter:
						return CentigramsPerDeciLiter;
					case DensityUnit.CentigramPerLiter:
						return CentigramsPerLiter;
					case DensityUnit.CentigramPerMilliliter:
						return CentigramsPerMilliliter;
					case DensityUnit.DecigramPerDeciliter:
						return DecigramsPerDeciLiter;
					case DensityUnit.DecigramPerLiter:
						return DecigramsPerLiter;
					case DensityUnit.DecigramPerMilliliter:
						return DecigramsPerMilliliter;
					case DensityUnit.GramPerCubicCentimeter:
						return GramsPerCubicCentimeter;
					case DensityUnit.GramPerCubicMeter:
						return GramsPerCubicMeter;
					case DensityUnit.GramPerCubicMillimeter:
						return GramsPerCubicMillimeter;
					case DensityUnit.GramPerDeciliter:
						return GramsPerDeciLiter;
					case DensityUnit.GramPerLiter:
						return GramsPerLiter;
					case DensityUnit.GramPerMilliliter:
						return GramsPerMilliliter;
					case DensityUnit.KilogramPerCubicCentimeter:
						return KilogramsPerCubicCentimeter;
					case DensityUnit.KilogramPerCubicMeter:
						return KilogramsPerCubicMeter;
					case DensityUnit.KilogramPerCubicMillimeter:
						return KilogramsPerCubicMillimeter;
					case DensityUnit.KilopoundPerCubicFoot:
						return KilopoundsPerCubicFoot;
					case DensityUnit.KilopoundPerCubicInch:
						return KilopoundsPerCubicInch;
					case DensityUnit.MicrogramPerDeciliter:
						return MicrogramsPerDeciLiter;
					case DensityUnit.MicrogramPerLiter:
						return MicrogramsPerLiter;
					case DensityUnit.MicrogramPerMilliliter:
						return MicrogramsPerMilliliter;
					case DensityUnit.MilligramPerDeciliter:
						return MilligramsPerDeciLiter;
					case DensityUnit.MilligramPerLiter:
						return MilligramsPerLiter;
					case DensityUnit.MilligramPerMilliliter:
						return MilligramsPerMilliliter;
					case DensityUnit.NanogramPerDeciliter:
						return NanogramsPerDeciLiter;
					case DensityUnit.NanogramPerLiter:
						return NanogramsPerLiter;
					case DensityUnit.NanogramPerMilliliter:
						return NanogramsPerMilliliter;
					case DensityUnit.PicogramPerDeciliter:
						return PicogramsPerDeciLiter;
					case DensityUnit.PicogramPerLiter:
						return PicogramsPerLiter;
					case DensityUnit.PicogramPerMilliliter:
						return PicogramsPerMilliliter;
					case DensityUnit.PoundPerCubicFoot:
						return PoundsPerCubicFoot;
					case DensityUnit.PoundPerCubicInch:
						return PoundsPerCubicInch;
					case DensityUnit.SlugPerCubicFoot:
						return SlugsPerCubicFoot;
					case DensityUnit.TonnePerCubicCentimeter:
						return TonnesPerCubicCentimeter;
					case DensityUnit.TonnePerCubicMeter:
						return TonnesPerCubicMeter;
					case DensityUnit.TonnePerCubicMillimeter:
						return TonnesPerCubicMillimeter;

					default:
						throw new NotImplementedException("unit: " + unit);
				}
			}

			#endregion

			#region Parsing

			/// <summary>
			///     Parse a string with one or two quantities of the format "&lt;quantity&gt; &lt;unit&gt;".
			/// </summary>
			/// <param name="str">String to parse. Typically in the form: {number} {unit}</param>
			/// <example>
			///     Length.Parse("5.5 m", new CultureInfo("en-US"));
			/// </example>
			/// <exception cref="ArgumentNullException">The value of 'str' cannot be null. </exception>
			/// <exception cref="ArgumentException">
			///     Expected string to have one or two pairs of quantity and unit in the format
			///     "&lt;quantity&gt; &lt;unit&gt;". Eg. "5.5 m" or "1ft 2in"
			/// </exception>
			/// <exception cref="AmbiguousUnitParseException">
			///     More than one unit is represented by the specified unit abbreviation.
			///     Example: Volume.Parse("1 cup") will throw, because it can refer to any of
			///     <see cref="VolumeUnit.MetricCup" />, <see cref="VolumeUnit.UsLegalCup" /> and <see cref="VolumeUnit.UsCustomaryCup" />.
			/// </exception>
			/// <exception cref="UnitsNetException">
			///     If anything else goes wrong, typically due to a bug or unhandled case.
			///     We wrap exceptions in <see cref="UnitsNetException" /> to allow you to distinguish
			///     Units.NET exceptions from other exceptions.
			/// </exception>
			public static Density<T, C> Parse(string str)
			{
				return Parse(str, null);
			}

			/// <summary>
			///     Parse a string with one or two quantities of the format "&lt;quantity&gt; &lt;unit&gt;".
			/// </summary>
			/// <param name="str">String to parse. Typically in the form: {number} {unit}</param>
			/// <param name="culture">Format to use when parsing number and unit. If it is null, it defaults to <see cref="NumberFormatInfo.CurrentInfo"/> for parsing the number and <see cref="CultureInfo.CurrentUICulture"/> for parsing the unit abbreviation by culture/language.</param>
			/// <example>
			///     Length.Parse("5.5 m", new CultureInfo("en-US"));
			/// </example>
			/// <exception cref="ArgumentNullException">The value of 'str' cannot be null. </exception>
			/// <exception cref="ArgumentException">
			///     Expected string to have one or two pairs of quantity and unit in the format
			///     "&lt;quantity&gt; &lt;unit&gt;". Eg. "5.5 m" or "1ft 2in"
			/// </exception>
			/// <exception cref="AmbiguousUnitParseException">
			///     More than one unit is represented by the specified unit abbreviation.
			///     Example: Volume.Parse("1 cup") will throw, because it can refer to any of
			///     <see cref="VolumeUnit.MetricCup" />, <see cref="VolumeUnit.UsLegalCup" /> and <see cref="VolumeUnit.UsCustomaryCup" />.
			/// </exception>
			/// <exception cref="UnitsNetException">
			///     If anything else goes wrong, typically due to a bug or unhandled case.
			///     We wrap exceptions in <see cref="UnitsNetException" /> to allow you to distinguish
			///     Units.NET exceptions from other exceptions.
			/// </exception>
			public static Density<T, C> Parse(string str, [CanBeNull] Culture culture)
			{
				if (str == null) throw new ArgumentNullException("str");

			// Windows Runtime Component does not support CultureInfo type, so use culture name string for public methods instead: https://msdn.microsoft.com/en-us/library/br230301.aspx
#if WINDOWS_UWP
				IFormatProvider formatProvider = culture == null ? null : new CultureInfo(culture);
#else
				IFormatProvider formatProvider = culture;
#endif
					return QuantityParser.Parse<Density<T, C>, DensityUnit>(str, formatProvider,
					delegate(string value, string unit, IFormatProvider formatProvider2)
					{
						double parsedValue = double.Parse(value, formatProvider2);
						DensityUnit parsedUnit = ParseUnit(unit, formatProvider2);
						return From(new C().ConvertToNumber(parsedValue), parsedUnit);
					}, (x, y) => FromKilogramsPerCubicMeter((Number<T, C>)x.KilogramsPerCubicMeter + y.KilogramsPerCubicMeter));
			}

			/// <summary>
			///     Try to parse a string with one or two quantities of the format "&lt;quantity&gt; &lt;unit&gt;".
			/// </summary>
			/// <param name="str">String to parse. Typically in the form: {number} {unit}</param>
			/// <param name="result">Resulting unit quantity if successful.</param>
			/// <example>
			///     Length.Parse("5.5 m", new CultureInfo("en-US"));
			/// </example>
			public static bool TryParse([CanBeNull] string str, out Density<T, C> result)
			{
				return TryParse(str, null, out result);
			}

			/// <summary>
			///     Try to parse a string with one or two quantities of the format "&lt;quantity&gt; &lt;unit&gt;".
			/// </summary>
			/// <param name="str">String to parse. Typically in the form: {number} {unit}</param>
			/// <param name="culture">Format to use when parsing number and unit. If it is null, it defaults to <see cref="NumberFormatInfo.CurrentInfo"/> for parsing the number and <see cref="CultureInfo.CurrentUICulture"/> for parsing the unit abbreviation by culture/language.</param>
			/// <param name="result">Resulting unit quantity if successful.</param>
			/// <example>
			///     Length.Parse("5.5 m", new CultureInfo("en-US"));
			/// </example>
			public static bool TryParse([CanBeNull] string str, [CanBeNull] Culture culture, out Density<T, C> result)
			{
				try
				{
					result = Parse(str, culture);
					return true;
				}
				catch
				{
					result = default(Density<T, C>);
					return false;
				}
			}

			/// <summary>
			///     Parse a unit string.
			/// </summary>
			/// <example>
			///     Length.ParseUnit("m", new CultureInfo("en-US"));
			/// </example>
			/// <exception cref="ArgumentNullException">The value of 'str' cannot be null. </exception>
			/// <exception cref="UnitsNetException">Error parsing string.</exception>
			public static DensityUnit ParseUnit(string str)
			{
				return ParseUnit(str, (IFormatProvider)null);
			}

			/// <summary>
			///     Parse a unit string.
			/// </summary>
			/// <example>
			///     Length.ParseUnit("m", new CultureInfo("en-US"));
			/// </example>
			/// <exception cref="ArgumentNullException">The value of 'str' cannot be null. </exception>
			/// <exception cref="UnitsNetException">Error parsing string.</exception>
			public static DensityUnit ParseUnit(string str, [CanBeNull] string cultureName)
			{
				return ParseUnit(str, cultureName == null ? null : new CultureInfo(cultureName));
			}

			/// <summary>
			///     Parse a unit string.
			/// </summary>
			/// <example>
			///     Length.ParseUnit("m", new CultureInfo("en-US"));
			/// </example>
			/// <exception cref="ArgumentNullException">The value of 'str' cannot be null. </exception>
			/// <exception cref="UnitsNetException">Error parsing string.</exception>

			// Windows Runtime Component does not allow public methods/ctors with same number of parameters: https://msdn.microsoft.com/en-us/library/br230301.aspx#Overloaded methods
#if WINDOWS_UWP
			internal
#else
			public
#endif
			static DensityUnit ParseUnit(string str, IFormatProvider formatProvider = null)
			{
				if (str == null) throw new ArgumentNullException("str");

				var unitSystem = UnitSystem.GetCached(formatProvider);
				var unit = unitSystem.Parse<DensityUnit>(str.Trim());

				if (unit == DensityUnit.Undefined)
				{
					var newEx = new UnitsNetException("Error parsing string. The unit is not a recognized DensityUnit.");
					newEx.Data["input"] = str;
					newEx.Data["formatprovider"] = formatProvider?.ToString() ?? "(null)";
					throw newEx;
				}

				return unit;
			}

			#endregion

			/// <summary>
			///     Set the default unit used by ToString(). Default is KilogramPerCubicMeter
			/// </summary>
			public static DensityUnit ToStringDefaultUnit { get; set; } = DensityUnit.KilogramPerCubicMeter;

			/// <summary>
			///     Get default string representation of value and unit.
			/// </summary>
			/// <returns>String representation.</returns>
			public override string ToString()
			{
				return ToString(ToStringDefaultUnit);
			}

			/// <summary>
			///     Get string representation of value and unit. Using current UI culture and two significant digits after radix.
			/// </summary>
			/// <param name="unit">Unit representation to use.</param>
			/// <returns>String representation.</returns>
			public string ToString(DensityUnit unit)
			{
				return ToString(unit, null, 2);
			}

			/// <summary>
			///     Get string representation of value and unit. Using two significant digits after radix.
			/// </summary>
			/// <param name="unit">Unit representation to use.</param>
			/// <param name="culture">Culture to use for localization and number formatting.</param>
			/// <returns>String representation.</returns>
			public string ToString(DensityUnit unit, [CanBeNull] Culture culture)
			{
				return ToString(unit, culture, 2);
			}

			/// <summary>
			///     Get string representation of value and unit.
			/// </summary>
			/// <param name="unit">Unit representation to use.</param>
			/// <param name="culture">Culture to use for localization and number formatting.</param>
			/// <param name="significantDigitsAfterRadix">The number of significant digits after the radix point.</param>
			/// <returns>String representation.</returns>
			[UsedImplicitly]
			public string ToString(DensityUnit unit, [CanBeNull] Culture culture, int significantDigitsAfterRadix)
			{
				Number<T, C>  value = As(unit);
				string format = UnitFormatter.GetFormat((double)value, significantDigitsAfterRadix);
				return ToString(unit, culture, format);
			}

			/// <summary>
			///     Get string representation of value and unit.
			/// </summary>
			/// <param name="culture">Culture to use for localization and number formatting.</param>
			/// <param name="unit">Unit representation to use.</param>
			/// <param name="format">String format to use. Default:  "{0:0.##} {1} for value and unit abbreviation respectively."</param>
			/// <param name="args">Arguments for string format. Value and unit are implictly included as arguments 0 and 1.</param>
			/// <returns>String representation.</returns>
			[UsedImplicitly]
			public string ToString(DensityUnit unit, [CanBeNull] Culture culture, [NotNull] string format,
				[NotNull] params object[] args)
			{
				if (format == null) throw new ArgumentNullException(nameof(format));
				if (args == null) throw new ArgumentNullException(nameof(args));

			// Windows Runtime Component does not support CultureInfo type, so use culture name string for public methods instead: https://msdn.microsoft.com/en-us/library/br230301.aspx
#if WINDOWS_UWP
				IFormatProvider formatProvider = culture == null ? null : new CultureInfo(culture);
#else
				IFormatProvider formatProvider = culture;
#endif
				Number<T, C>  value = As(unit);
				object[] formatArgs = UnitFormatter.GetFormatArgs(unit, (double)value, formatProvider, args);
				return string.Format(formatProvider, format, formatArgs);
			}

			/// <summary>
			/// Represents the largest possible value of Density
			/// </summary>
			public static Number<T, C> MaxValue
			{
				get
				{
					return Number<T, C>.MaxValue;
				}
			}

			/// <summary>
			/// Represents the smallest possible value of Density
			/// </summary>
			public static Number<T, C> MinValue
			{
				get
				{
					return Number<T, C>.MinValue;
				}
			}
		}
	}
}
