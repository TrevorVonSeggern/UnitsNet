//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by \generate-code.bat.
//
//     Changes to this file will be lost when the code is regenerated.
//     The build server regenerates the code before each build and a pre-build
//     step will regenerate the code on each local build.
//
//     See https://github.com/angularsen/UnitsNet/wiki/Adding-a-New-Unit for how to add or edit units.
//
//     Add CustomCode\Quantities\MyUnit.extra.cs files to add code to generated quantities.
//     Add Extensions\MyUnitExtensions.cs to decorate quantities with new behavior.
//     Add UnitDefinitions\MyUnit.json and run GeneratUnits.bat to generate new units or quantities.
//
// </auto-generated>
//------------------------------------------------------------------------------

// Copyright (c) 2013 Andreas Gullberg Larsen (andreas.larsen84@gmail.com).
// https://github.com/angularsen/UnitsNet
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
// THE SOFTWARE.

using System;
using System.Collections.Generic;
using System.Globalization;
using System.Text.RegularExpressions;
using System.Linq;
using JetBrains.Annotations;
using UnitsNet.Units;

// Windows Runtime Component does not support CultureInfo type, so use culture name string instead for public methods: https://msdn.microsoft.com/en-us/library/br230301.aspx
#if WINDOWS_UWP
using Culture = System.String;
#else
using Culture = System.IFormatProvider;
#endif

// ReSharper disable once CheckNamespace
namespace UnitsNet
{
    using UnitsNet.InternalHelpers.Calculators;

    /// <summary>
    ///     In physics, mass (from Greek μᾶζα "barley cake, lump [of dough]") is a property of a physical system or body, giving rise to the phenomena of the body's resistance to being accelerated by a force and the strength of its mutual gravitational attraction with other bodies. Instruments such as mass balances or scales use those phenomena to measure mass. The SI unit of mass is the kilogram (kg).
    /// </summary>
    // ReSharper disable once PartialTypeWithSinglePart

    // Windows Runtime Component has constraints on public types: https://msdn.microsoft.com/en-us/library/br230301.aspx#Declaring types in Windows Runtime Components
    // Public structures can't have any members other than public fields, and those fields must be value types or strings.
    // Public classes must be sealed (NotInheritable in Visual Basic). If your programming model requires polymorphism, you can create a public interface and implement that interface on the classes that must be polymorphic.
	public partial class Mass : UnitsNet.Generic.Mass<double, UnitsNet.InternalHelpers.Calculators.DoubleCalculator> { }

	namespace Generic
	{
#if WINDOWS_UWP
		public sealed partial class Mass
#else
		public partial class Mass <T, C> : IComparable, IComparable<Mass<T, C>>
			where T : struct
			where C : InternalHelpers.Calculators.INumberCalculator<T>, new()
#endif
		{
			/// <summary>
			///     Base unit of Mass.
			/// </summary>
			private readonly Number<T, C> _kilograms;

			public Mass() : this(new Number<T,C>())
			{
			}

			public Mass(T kilograms)
			{
				_kilograms = (kilograms);
			}

			public Mass(Number<T, C> kilograms)
			{
				_kilograms = (kilograms);
			}

			#region Properties

			/// <summary>
			///     The <see cref="QuantityType" /> of this quantity.
			/// </summary>
			public static QuantityType QuantityType => QuantityType.Mass;

			/// <summary>
			///     The base unit representation of this quantity for the numeric value stored internally. All conversions go via this value.
			/// </summary>
			public static MassUnit BaseUnit
			{
				get { return MassUnit.Kilogram; }
			}

			/// <summary>
			///     All units of measurement for the Mass quantity.
			/// </summary>
			public static MassUnit[] Units { get; } = Enum.GetValues(typeof(MassUnit)).Cast<MassUnit>().ToArray();

			/// <summary>
			///     Get Mass in Centigrams.
			/// </summary>
			public Number<T, C> Centigrams
			{
				get { return (_kilograms*1e3) / 1e-2d; }
			}

			/// <summary>
			///     Get Mass in Decagrams.
			/// </summary>
			public Number<T, C> Decagrams
			{
				get { return (_kilograms*1e3) / 1e1d; }
			}

			/// <summary>
			///     Get Mass in Decigrams.
			/// </summary>
			public Number<T, C> Decigrams
			{
				get { return (_kilograms*1e3) / 1e-1d; }
			}

			/// <summary>
			///     Get Mass in Grams.
			/// </summary>
			public Number<T, C> Grams
			{
				get { return _kilograms*1e3; }
			}

			/// <summary>
			///     Get Mass in Hectograms.
			/// </summary>
			public Number<T, C> Hectograms
			{
				get { return (_kilograms*1e3) / 1e2d; }
			}

			/// <summary>
			///     Get Mass in Kilograms.
			/// </summary>
			public Number<T, C> Kilograms
			{
				get { return (_kilograms*1e3) / 1e3d; }
			}

			/// <summary>
			///     Get Mass in Kilopounds.
			/// </summary>
			public Number<T, C> Kilopounds
			{
				get { return (_kilograms/0.45359237) / 1e3d; }
			}

			/// <summary>
			///     Get Mass in Kilotonnes.
			/// </summary>
			public Number<T, C> Kilotonnes
			{
				get { return (_kilograms/1e3) / 1e3d; }
			}

			/// <summary>
			///     Get Mass in LongHundredweight.
			/// </summary>
			public Number<T, C> LongHundredweight
			{
				get { return _kilograms*0.01968413055222121; }
			}

			/// <summary>
			///     Get Mass in LongTons.
			/// </summary>
			public Number<T, C> LongTons
			{
				get { return _kilograms/1016.0469088; }
			}

			/// <summary>
			///     Get Mass in Megapounds.
			/// </summary>
			public Number<T, C> Megapounds
			{
				get { return (_kilograms/0.45359237) / 1e6d; }
			}

			/// <summary>
			///     Get Mass in Megatonnes.
			/// </summary>
			public Number<T, C> Megatonnes
			{
				get { return (_kilograms/1e3) / 1e6d; }
			}

			/// <summary>
			///     Get Mass in Micrograms.
			/// </summary>
			public Number<T, C> Micrograms
			{
				get { return (_kilograms*1e3) / 1e-6d; }
			}

			/// <summary>
			///     Get Mass in Milligrams.
			/// </summary>
			public Number<T, C> Milligrams
			{
				get { return (_kilograms*1e3) / 1e-3d; }
			}

			/// <summary>
			///     Get Mass in Nanograms.
			/// </summary>
			public Number<T, C> Nanograms
			{
				get { return (_kilograms*1e3) / 1e-9d; }
			}

			/// <summary>
			///     Get Mass in Ounces.
			/// </summary>
			public Number<T, C> Ounces
			{
				get { return _kilograms*35.2739619; }
			}

			/// <summary>
			///     Get Mass in Pounds.
			/// </summary>
			public Number<T, C> Pounds
			{
				get { return _kilograms/0.45359237; }
			}

			/// <summary>
			///     Get Mass in ShortHundredweight.
			/// </summary>
			public Number<T, C> ShortHundredweight
			{
				get { return _kilograms*0.022046226218487758; }
			}

			/// <summary>
			///     Get Mass in ShortTons.
			/// </summary>
			public Number<T, C> ShortTons
			{
				get { return _kilograms/907.18474; }
			}

			/// <summary>
			///     Get Mass in Stone.
			/// </summary>
			public Number<T, C> Stone
			{
				get { return _kilograms*0.1574731728702698; }
			}

			/// <summary>
			///     Get Mass in Tonnes.
			/// </summary>
			public Number<T, C> Tonnes
			{
				get { return _kilograms/1e3; }
			}

			#endregion

			#region Static

			public static Mass<T, C> Zero
			{
				get { return new Mass<T, C>(); }
			}

			/// <summary>
			///     Get Mass from Centigrams.
			/// </summary>
#if WINDOWS_UWP
			[Windows.Foundation.Metadata.DefaultOverload]
			public static Mass<T, C> FromCentigrams(Number<T, C> centigrams)
			{
				Number<T,C> value = (Number<T,C>) centigrams;
				return new Mass<T, C>((value/1e3) * 1e-2d);
			}
#else
			public static Mass<T, C> FromCentigrams(Number<T, C> centigrams)
			{
				Number<T,C> value = (Number<T,C>) centigrams;
				return new Mass<T, C>(new Number<T,C>((value/1e3) * 1e-2d));
			}
#endif

			/// <summary>
			///     Get Mass from Decagrams.
			/// </summary>
#if WINDOWS_UWP
			[Windows.Foundation.Metadata.DefaultOverload]
			public static Mass<T, C> FromDecagrams(Number<T, C> decagrams)
			{
				Number<T,C> value = (Number<T,C>) decagrams;
				return new Mass<T, C>((value/1e3) * 1e1d);
			}
#else
			public static Mass<T, C> FromDecagrams(Number<T, C> decagrams)
			{
				Number<T,C> value = (Number<T,C>) decagrams;
				return new Mass<T, C>(new Number<T,C>((value/1e3) * 1e1d));
			}
#endif

			/// <summary>
			///     Get Mass from Decigrams.
			/// </summary>
#if WINDOWS_UWP
			[Windows.Foundation.Metadata.DefaultOverload]
			public static Mass<T, C> FromDecigrams(Number<T, C> decigrams)
			{
				Number<T,C> value = (Number<T,C>) decigrams;
				return new Mass<T, C>((value/1e3) * 1e-1d);
			}
#else
			public static Mass<T, C> FromDecigrams(Number<T, C> decigrams)
			{
				Number<T,C> value = (Number<T,C>) decigrams;
				return new Mass<T, C>(new Number<T,C>((value/1e3) * 1e-1d));
			}
#endif

			/// <summary>
			///     Get Mass from Grams.
			/// </summary>
#if WINDOWS_UWP
			[Windows.Foundation.Metadata.DefaultOverload]
			public static Mass<T, C> FromGrams(Number<T, C> grams)
			{
				Number<T,C> value = (Number<T,C>) grams;
				return new Mass<T, C>(value/1e3);
			}
#else
			public static Mass<T, C> FromGrams(Number<T, C> grams)
			{
				Number<T,C> value = (Number<T,C>) grams;
				return new Mass<T, C>(new Number<T,C>(value/1e3));
			}
#endif

			/// <summary>
			///     Get Mass from Hectograms.
			/// </summary>
#if WINDOWS_UWP
			[Windows.Foundation.Metadata.DefaultOverload]
			public static Mass<T, C> FromHectograms(Number<T, C> hectograms)
			{
				Number<T,C> value = (Number<T,C>) hectograms;
				return new Mass<T, C>((value/1e3) * 1e2d);
			}
#else
			public static Mass<T, C> FromHectograms(Number<T, C> hectograms)
			{
				Number<T,C> value = (Number<T,C>) hectograms;
				return new Mass<T, C>(new Number<T,C>((value/1e3) * 1e2d));
			}
#endif

			/// <summary>
			///     Get Mass from Kilograms.
			/// </summary>
#if WINDOWS_UWP
			[Windows.Foundation.Metadata.DefaultOverload]
			public static Mass<T, C> FromKilograms(Number<T, C> kilograms)
			{
				Number<T,C> value = (Number<T,C>) kilograms;
				return new Mass<T, C>((value/1e3) * 1e3d);
			}
#else
			public static Mass<T, C> FromKilograms(Number<T, C> kilograms)
			{
				Number<T,C> value = (Number<T,C>) kilograms;
				return new Mass<T, C>(new Number<T,C>((value/1e3) * 1e3d));
			}
#endif

			/// <summary>
			///     Get Mass from Kilopounds.
			/// </summary>
#if WINDOWS_UWP
			[Windows.Foundation.Metadata.DefaultOverload]
			public static Mass<T, C> FromKilopounds(Number<T, C> kilopounds)
			{
				Number<T,C> value = (Number<T,C>) kilopounds;
				return new Mass<T, C>((value*0.45359237) * 1e3d);
			}
#else
			public static Mass<T, C> FromKilopounds(Number<T, C> kilopounds)
			{
				Number<T,C> value = (Number<T,C>) kilopounds;
				return new Mass<T, C>(new Number<T,C>((value*0.45359237) * 1e3d));
			}
#endif

			/// <summary>
			///     Get Mass from Kilotonnes.
			/// </summary>
#if WINDOWS_UWP
			[Windows.Foundation.Metadata.DefaultOverload]
			public static Mass<T, C> FromKilotonnes(Number<T, C> kilotonnes)
			{
				Number<T,C> value = (Number<T,C>) kilotonnes;
				return new Mass<T, C>((value*1e3) * 1e3d);
			}
#else
			public static Mass<T, C> FromKilotonnes(Number<T, C> kilotonnes)
			{
				Number<T,C> value = (Number<T,C>) kilotonnes;
				return new Mass<T, C>(new Number<T,C>((value*1e3) * 1e3d));
			}
#endif

			/// <summary>
			///     Get Mass from LongHundredweight.
			/// </summary>
#if WINDOWS_UWP
			[Windows.Foundation.Metadata.DefaultOverload]
			public static Mass<T, C> FromLongHundredweight(Number<T, C> longhundredweight)
			{
				Number<T,C> value = (Number<T,C>) longhundredweight;
				return new Mass<T, C>(value/0.01968413055222121);
			}
#else
			public static Mass<T, C> FromLongHundredweight(Number<T, C> longhundredweight)
			{
				Number<T,C> value = (Number<T,C>) longhundredweight;
				return new Mass<T, C>(new Number<T,C>(value/0.01968413055222121));
			}
#endif

			/// <summary>
			///     Get Mass from LongTons.
			/// </summary>
#if WINDOWS_UWP
			[Windows.Foundation.Metadata.DefaultOverload]
			public static Mass<T, C> FromLongTons(Number<T, C> longtons)
			{
				Number<T,C> value = (Number<T,C>) longtons;
				return new Mass<T, C>(value*1016.0469088);
			}
#else
			public static Mass<T, C> FromLongTons(Number<T, C> longtons)
			{
				Number<T,C> value = (Number<T,C>) longtons;
				return new Mass<T, C>(new Number<T,C>(value*1016.0469088));
			}
#endif

			/// <summary>
			///     Get Mass from Megapounds.
			/// </summary>
#if WINDOWS_UWP
			[Windows.Foundation.Metadata.DefaultOverload]
			public static Mass<T, C> FromMegapounds(Number<T, C> megapounds)
			{
				Number<T,C> value = (Number<T,C>) megapounds;
				return new Mass<T, C>((value*0.45359237) * 1e6d);
			}
#else
			public static Mass<T, C> FromMegapounds(Number<T, C> megapounds)
			{
				Number<T,C> value = (Number<T,C>) megapounds;
				return new Mass<T, C>(new Number<T,C>((value*0.45359237) * 1e6d));
			}
#endif

			/// <summary>
			///     Get Mass from Megatonnes.
			/// </summary>
#if WINDOWS_UWP
			[Windows.Foundation.Metadata.DefaultOverload]
			public static Mass<T, C> FromMegatonnes(Number<T, C> megatonnes)
			{
				Number<T,C> value = (Number<T,C>) megatonnes;
				return new Mass<T, C>((value*1e3) * 1e6d);
			}
#else
			public static Mass<T, C> FromMegatonnes(Number<T, C> megatonnes)
			{
				Number<T,C> value = (Number<T,C>) megatonnes;
				return new Mass<T, C>(new Number<T,C>((value*1e3) * 1e6d));
			}
#endif

			/// <summary>
			///     Get Mass from Micrograms.
			/// </summary>
#if WINDOWS_UWP
			[Windows.Foundation.Metadata.DefaultOverload]
			public static Mass<T, C> FromMicrograms(Number<T, C> micrograms)
			{
				Number<T,C> value = (Number<T,C>) micrograms;
				return new Mass<T, C>((value/1e3) * 1e-6d);
			}
#else
			public static Mass<T, C> FromMicrograms(Number<T, C> micrograms)
			{
				Number<T,C> value = (Number<T,C>) micrograms;
				return new Mass<T, C>(new Number<T,C>((value/1e3) * 1e-6d));
			}
#endif

			/// <summary>
			///     Get Mass from Milligrams.
			/// </summary>
#if WINDOWS_UWP
			[Windows.Foundation.Metadata.DefaultOverload]
			public static Mass<T, C> FromMilligrams(Number<T, C> milligrams)
			{
				Number<T,C> value = (Number<T,C>) milligrams;
				return new Mass<T, C>((value/1e3) * 1e-3d);
			}
#else
			public static Mass<T, C> FromMilligrams(Number<T, C> milligrams)
			{
				Number<T,C> value = (Number<T,C>) milligrams;
				return new Mass<T, C>(new Number<T,C>((value/1e3) * 1e-3d));
			}
#endif

			/// <summary>
			///     Get Mass from Nanograms.
			/// </summary>
#if WINDOWS_UWP
			[Windows.Foundation.Metadata.DefaultOverload]
			public static Mass<T, C> FromNanograms(Number<T, C> nanograms)
			{
				Number<T,C> value = (Number<T,C>) nanograms;
				return new Mass<T, C>((value/1e3) * 1e-9d);
			}
#else
			public static Mass<T, C> FromNanograms(Number<T, C> nanograms)
			{
				Number<T,C> value = (Number<T,C>) nanograms;
				return new Mass<T, C>(new Number<T,C>((value/1e3) * 1e-9d));
			}
#endif

			/// <summary>
			///     Get Mass from Ounces.
			/// </summary>
#if WINDOWS_UWP
			[Windows.Foundation.Metadata.DefaultOverload]
			public static Mass<T, C> FromOunces(Number<T, C> ounces)
			{
				Number<T,C> value = (Number<T,C>) ounces;
				return new Mass<T, C>(value/35.2739619);
			}
#else
			public static Mass<T, C> FromOunces(Number<T, C> ounces)
			{
				Number<T,C> value = (Number<T,C>) ounces;
				return new Mass<T, C>(new Number<T,C>(value/35.2739619));
			}
#endif

			/// <summary>
			///     Get Mass from Pounds.
			/// </summary>
#if WINDOWS_UWP
			[Windows.Foundation.Metadata.DefaultOverload]
			public static Mass<T, C> FromPounds(Number<T, C> pounds)
			{
				Number<T,C> value = (Number<T,C>) pounds;
				return new Mass<T, C>(value*0.45359237);
			}
#else
			public static Mass<T, C> FromPounds(Number<T, C> pounds)
			{
				Number<T,C> value = (Number<T,C>) pounds;
				return new Mass<T, C>(new Number<T,C>(value*0.45359237));
			}
#endif

			/// <summary>
			///     Get Mass from ShortHundredweight.
			/// </summary>
#if WINDOWS_UWP
			[Windows.Foundation.Metadata.DefaultOverload]
			public static Mass<T, C> FromShortHundredweight(Number<T, C> shorthundredweight)
			{
				Number<T,C> value = (Number<T,C>) shorthundredweight;
				return new Mass<T, C>(value/0.022046226218487758);
			}
#else
			public static Mass<T, C> FromShortHundredweight(Number<T, C> shorthundredweight)
			{
				Number<T,C> value = (Number<T,C>) shorthundredweight;
				return new Mass<T, C>(new Number<T,C>(value/0.022046226218487758));
			}
#endif

			/// <summary>
			///     Get Mass from ShortTons.
			/// </summary>
#if WINDOWS_UWP
			[Windows.Foundation.Metadata.DefaultOverload]
			public static Mass<T, C> FromShortTons(Number<T, C> shorttons)
			{
				Number<T,C> value = (Number<T,C>) shorttons;
				return new Mass<T, C>(value*907.18474);
			}
#else
			public static Mass<T, C> FromShortTons(Number<T, C> shorttons)
			{
				Number<T,C> value = (Number<T,C>) shorttons;
				return new Mass<T, C>(new Number<T,C>(value*907.18474));
			}
#endif

			/// <summary>
			///     Get Mass from Stone.
			/// </summary>
#if WINDOWS_UWP
			[Windows.Foundation.Metadata.DefaultOverload]
			public static Mass<T, C> FromStone(Number<T, C> stone)
			{
				Number<T,C> value = (Number<T,C>) stone;
				return new Mass<T, C>(value/0.1574731728702698);
			}
#else
			public static Mass<T, C> FromStone(Number<T, C> stone)
			{
				Number<T,C> value = (Number<T,C>) stone;
				return new Mass<T, C>(new Number<T,C>(value/0.1574731728702698));
			}
#endif

			/// <summary>
			///     Get Mass from Tonnes.
			/// </summary>
#if WINDOWS_UWP
			[Windows.Foundation.Metadata.DefaultOverload]
			public static Mass<T, C> FromTonnes(Number<T, C> tonnes)
			{
				Number<T,C> value = (Number<T,C>) tonnes;
				return new Mass<T, C>(value*1e3);
			}
#else
			public static Mass<T, C> FromTonnes(Number<T, C> tonnes)
			{
				Number<T,C> value = (Number<T,C>) tonnes;
				return new Mass<T, C>(new Number<T,C>(value*1e3));
			}
#endif



			/// <summary>
			///     Dynamically convert from value and unit enum <see cref="MassUnit" /> to <see cref="Mass" />.
			/// </summary>
			/// <param name="value">Value to convert from.</param>
			/// <param name="fromUnit">Unit to convert from.</param>
			/// <returns>Mass unit value.</returns>
#if WINDOWS_UWP
			// Fix name conflict with parameter "value"
			[return: System.Runtime.InteropServices.WindowsRuntime.ReturnValueName("returnValue")]
			public static Mass<T, C> From(double value, MassUnit fromUnit)
#else
			public static Mass<T, C> From(Number<T, C> value, MassUnit fromUnit)
#endif
			{
				switch (fromUnit)
				{
					case MassUnit.Centigram:
						return FromCentigrams(value);
					case MassUnit.Decagram:
						return FromDecagrams(value);
					case MassUnit.Decigram:
						return FromDecigrams(value);
					case MassUnit.Gram:
						return FromGrams(value);
					case MassUnit.Hectogram:
						return FromHectograms(value);
					case MassUnit.Kilogram:
						return FromKilograms(value);
					case MassUnit.Kilopound:
						return FromKilopounds(value);
					case MassUnit.Kilotonne:
						return FromKilotonnes(value);
					case MassUnit.LongHundredweight:
						return FromLongHundredweight(value);
					case MassUnit.LongTon:
						return FromLongTons(value);
					case MassUnit.Megapound:
						return FromMegapounds(value);
					case MassUnit.Megatonne:
						return FromMegatonnes(value);
					case MassUnit.Microgram:
						return FromMicrograms(value);
					case MassUnit.Milligram:
						return FromMilligrams(value);
					case MassUnit.Nanogram:
						return FromNanograms(value);
					case MassUnit.Ounce:
						return FromOunces(value);
					case MassUnit.Pound:
						return FromPounds(value);
					case MassUnit.ShortHundredweight:
						return FromShortHundredweight(value);
					case MassUnit.ShortTon:
						return FromShortTons(value);
					case MassUnit.Stone:
						return FromStone(value);
					case MassUnit.Tonne:
						return FromTonnes(value);

					default:
						throw new NotImplementedException("fromUnit: " + fromUnit);
				}
			}

			/// <summary>
			///     Get unit abbreviation string.
			/// </summary>
			/// <param name="unit">Unit to get abbreviation for.</param>
			/// <returns>Unit abbreviation string.</returns>
			[UsedImplicitly]
			public static string GetAbbreviation(MassUnit unit)
			{
				return GetAbbreviation(unit, null);
			}

			/// <summary>
			///     Get unit abbreviation string.
			/// </summary>
			/// <param name="unit">Unit to get abbreviation for.</param>
			/// <param name="culture">Culture to use for localization. Defaults to Thread.CurrentUICulture.</param>
			/// <returns>Unit abbreviation string.</returns>
			[UsedImplicitly]
			public static string GetAbbreviation(MassUnit unit, [CanBeNull] Culture culture)
			{
				return UnitSystem.GetCached(culture).GetDefaultAbbreviation(unit);
			}

			#endregion

			#region Arithmetic Operators

			// Windows Runtime Component does not allow operator overloads: https://msdn.microsoft.com/en-us/library/br230301.aspx
#if !WINDOWS_UWP
			public static Mass<T, C> operator -(Mass<T, C> right)
			{
				return new Mass<T, C>(-right._kilograms);
			}

			public static Mass<T, C> operator +(Mass<T, C> left, Mass<T, C> right)
			{
				return new Mass<T, C>(left._kilograms + right._kilograms);
			}

			public static Mass<T, C> operator -(Mass<T, C> left, Mass<T, C> right)
			{
				return new Mass<T, C>(left._kilograms - right._kilograms);
			}

			public static Mass<T, C> operator *(Number<T, C> left, Mass<T, C> right)
			{
				return new Mass<T, C>(left*right._kilograms);
			}

			public static Mass<T, C> operator *(Mass<T, C> left, double right)
			{
				return new Mass<T, C>(left._kilograms*right);
			}

			public static Mass<T, C> operator /(Mass<T, C> left, double right)
			{
				return new Mass<T, C>(left._kilograms/right);
			}

			public static double operator /(Mass<T, C> left, Mass<T, C> right)
			{
				return Convert.ToDouble(left._kilograms/right._kilograms);
			}
#endif

			#endregion

			#region Equality / IComparable

			public int CompareTo(object obj)
			{
				if (obj == null) throw new ArgumentNullException("obj");
				if (!(obj is Mass<T, C>)) throw new ArgumentException("Expected type Mass.", "obj");
				return CompareTo((Mass<T, C>) obj);
			}

			// Windows Runtime Component does not allow public methods/ctors with same number of parameters: https://msdn.microsoft.com/en-us/library/br230301.aspx#Overloaded methods
#if WINDOWS_UWP
			internal
#else
			public
#endif
			int CompareTo(Mass<T, C> other)
			{
				return _kilograms.CompareTo(other._kilograms);
			}

			// Windows Runtime Component does not allow operator overloads: https://msdn.microsoft.com/en-us/library/br230301.aspx
#if !WINDOWS_UWP
			public static bool operator <=(Mass<T, C> left, Mass<T, C> right)
			{
				return left._kilograms <= right._kilograms;
			}

			public static bool operator >=(Mass<T, C> left, Mass<T, C> right)
			{
				return left._kilograms >= right._kilograms;
			}

			public static bool operator <(Mass<T, C> left, Mass<T, C> right)
			{
				return left._kilograms < right._kilograms;
			}

			public static bool operator >(Mass<T, C> left, Mass<T, C> right)
			{
				return left._kilograms > right._kilograms;
			}

			[Obsolete("It is not safe to compare equality due to using System.Double as the internal representation. It is very easy to get slightly different values due to floating point operations. Instead use Equals(other, maxError) to provide the max allowed error.")]
        public static bool operator ==(Mass<T, C> left, Mass<T, C> right)
			{
				// ReSharper disable once CompareOfFloatsByEqualityOperator
				return left._kilograms == right._kilograms;
			}

			[Obsolete("It is not safe to compare equality due to using System.Double as the internal representation. It is very easy to get slightly different values due to floating point operations. Instead use Equals(other, maxError) to provide the max allowed error.")]
        public static bool operator !=(Mass<T, C> left, Mass<T, C> right)
			{
				// ReSharper disable once CompareOfFloatsByEqualityOperator
				return left._kilograms != right._kilograms;
			}
#endif

			[Obsolete("It is not safe to compare equality due to using System.Double as the internal representation. It is very easy to get slightly different values due to floating point operations. Instead use Equals(other, maxError) to provide the max allowed error.")]
        public override bool Equals(object obj)
			{
				if (obj == null || GetType() != obj.GetType())
				{
					return false;
				}

				return _kilograms.Equals(((Mass<T, C>) obj)._kilograms);
			}

			/// <summary>
			///     Compare equality to another Mass by specifying a max allowed difference.
			///     Note that it is advised against specifying zero difference, due to the nature
			///     of floating point operations and using System.Double internally.
			/// </summary>
			/// <param name="other">Other quantity to compare to.</param>
			/// <param name="maxError">Max error allowed.</param>
			/// <returns>True if the difference between the two values is not greater than the specified max.</returns>
			public bool Equals(Mass<T, C> other, Mass<T, C> maxError)
			{
				return Math.Abs((decimal)_kilograms - (decimal)other._kilograms) <= maxError._kilograms;
			}

			public override int GetHashCode()
			{
				return _kilograms.GetHashCode();
			}

			#endregion

			#region Conversion

			/// <summary>
			///     Convert to the unit representation <paramref name="unit" />.
			/// </summary>
			/// <returns>Value in new unit if successful, exception otherwise.</returns>
			/// <exception cref="NotImplementedException">If conversion was not successful.</exception>
			public Number<T, C> As(MassUnit unit)
			{
				switch (unit)
				{
					case MassUnit.Centigram:
						return Centigrams;
					case MassUnit.Decagram:
						return Decagrams;
					case MassUnit.Decigram:
						return Decigrams;
					case MassUnit.Gram:
						return Grams;
					case MassUnit.Hectogram:
						return Hectograms;
					case MassUnit.Kilogram:
						return Kilograms;
					case MassUnit.Kilopound:
						return Kilopounds;
					case MassUnit.Kilotonne:
						return Kilotonnes;
					case MassUnit.LongHundredweight:
						return LongHundredweight;
					case MassUnit.LongTon:
						return LongTons;
					case MassUnit.Megapound:
						return Megapounds;
					case MassUnit.Megatonne:
						return Megatonnes;
					case MassUnit.Microgram:
						return Micrograms;
					case MassUnit.Milligram:
						return Milligrams;
					case MassUnit.Nanogram:
						return Nanograms;
					case MassUnit.Ounce:
						return Ounces;
					case MassUnit.Pound:
						return Pounds;
					case MassUnit.ShortHundredweight:
						return ShortHundredweight;
					case MassUnit.ShortTon:
						return ShortTons;
					case MassUnit.Stone:
						return Stone;
					case MassUnit.Tonne:
						return Tonnes;

					default:
						throw new NotImplementedException("unit: " + unit);
				}
			}

			#endregion

			#region Parsing

			/// <summary>
			///     Parse a string with one or two quantities of the format "&lt;quantity&gt; &lt;unit&gt;".
			/// </summary>
			/// <param name="str">String to parse. Typically in the form: {number} {unit}</param>
			/// <example>
			///     Length.Parse("5.5 m", new CultureInfo("en-US"));
			/// </example>
			/// <exception cref="ArgumentNullException">The value of 'str' cannot be null. </exception>
			/// <exception cref="ArgumentException">
			///     Expected string to have one or two pairs of quantity and unit in the format
			///     "&lt;quantity&gt; &lt;unit&gt;". Eg. "5.5 m" or "1ft 2in"
			/// </exception>
			/// <exception cref="AmbiguousUnitParseException">
			///     More than one unit is represented by the specified unit abbreviation.
			///     Example: Volume.Parse("1 cup") will throw, because it can refer to any of
			///     <see cref="VolumeUnit.MetricCup" />, <see cref="VolumeUnit.UsLegalCup" /> and <see cref="VolumeUnit.UsCustomaryCup" />.
			/// </exception>
			/// <exception cref="UnitsNetException">
			///     If anything else goes wrong, typically due to a bug or unhandled case.
			///     We wrap exceptions in <see cref="UnitsNetException" /> to allow you to distinguish
			///     Units.NET exceptions from other exceptions.
			/// </exception>
			public static Mass<T, C> Parse(string str)
			{
				return Parse(str, null);
			}

			/// <summary>
			///     Parse a string with one or two quantities of the format "&lt;quantity&gt; &lt;unit&gt;".
			/// </summary>
			/// <param name="str">String to parse. Typically in the form: {number} {unit}</param>
			/// <param name="culture">Format to use when parsing number and unit. If it is null, it defaults to <see cref="NumberFormatInfo.CurrentInfo"/> for parsing the number and <see cref="CultureInfo.CurrentUICulture"/> for parsing the unit abbreviation by culture/language.</param>
			/// <example>
			///     Length.Parse("5.5 m", new CultureInfo("en-US"));
			/// </example>
			/// <exception cref="ArgumentNullException">The value of 'str' cannot be null. </exception>
			/// <exception cref="ArgumentException">
			///     Expected string to have one or two pairs of quantity and unit in the format
			///     "&lt;quantity&gt; &lt;unit&gt;". Eg. "5.5 m" or "1ft 2in"
			/// </exception>
			/// <exception cref="AmbiguousUnitParseException">
			///     More than one unit is represented by the specified unit abbreviation.
			///     Example: Volume.Parse("1 cup") will throw, because it can refer to any of
			///     <see cref="VolumeUnit.MetricCup" />, <see cref="VolumeUnit.UsLegalCup" /> and <see cref="VolumeUnit.UsCustomaryCup" />.
			/// </exception>
			/// <exception cref="UnitsNetException">
			///     If anything else goes wrong, typically due to a bug or unhandled case.
			///     We wrap exceptions in <see cref="UnitsNetException" /> to allow you to distinguish
			///     Units.NET exceptions from other exceptions.
			/// </exception>
			public static Mass<T, C> Parse(string str, [CanBeNull] Culture culture)
			{
				if (str == null) throw new ArgumentNullException("str");

			// Windows Runtime Component does not support CultureInfo type, so use culture name string for public methods instead: https://msdn.microsoft.com/en-us/library/br230301.aspx
#if WINDOWS_UWP
				IFormatProvider formatProvider = culture == null ? null : new CultureInfo(culture);
#else
				IFormatProvider formatProvider = culture;
#endif
					return QuantityParser.Parse<Mass<T, C>, MassUnit>(str, formatProvider,
					delegate(string value, string unit, IFormatProvider formatProvider2)
					{
						double parsedValue = double.Parse(value, formatProvider2);
						MassUnit parsedUnit = ParseUnit(unit, formatProvider2);
						return From(new C().ConvertToNumber(parsedValue), parsedUnit);
					}, (x, y) => FromKilograms((Number<T, C>)x.Kilograms + y.Kilograms));
			}

			/// <summary>
			///     Try to parse a string with one or two quantities of the format "&lt;quantity&gt; &lt;unit&gt;".
			/// </summary>
			/// <param name="str">String to parse. Typically in the form: {number} {unit}</param>
			/// <param name="result">Resulting unit quantity if successful.</param>
			/// <example>
			///     Length.Parse("5.5 m", new CultureInfo("en-US"));
			/// </example>
			public static bool TryParse([CanBeNull] string str, out Mass<T, C> result)
			{
				return TryParse(str, null, out result);
			}

			/// <summary>
			///     Try to parse a string with one or two quantities of the format "&lt;quantity&gt; &lt;unit&gt;".
			/// </summary>
			/// <param name="str">String to parse. Typically in the form: {number} {unit}</param>
			/// <param name="culture">Format to use when parsing number and unit. If it is null, it defaults to <see cref="NumberFormatInfo.CurrentInfo"/> for parsing the number and <see cref="CultureInfo.CurrentUICulture"/> for parsing the unit abbreviation by culture/language.</param>
			/// <param name="result">Resulting unit quantity if successful.</param>
			/// <example>
			///     Length.Parse("5.5 m", new CultureInfo("en-US"));
			/// </example>
			public static bool TryParse([CanBeNull] string str, [CanBeNull] Culture culture, out Mass<T, C> result)
			{
				try
				{
					result = Parse(str, culture);
					return true;
				}
				catch
				{
					result = default(Mass<T, C>);
					return false;
				}
			}

			/// <summary>
			///     Parse a unit string.
			/// </summary>
			/// <example>
			///     Length.ParseUnit("m", new CultureInfo("en-US"));
			/// </example>
			/// <exception cref="ArgumentNullException">The value of 'str' cannot be null. </exception>
			/// <exception cref="UnitsNetException">Error parsing string.</exception>
			public static MassUnit ParseUnit(string str)
			{
				return ParseUnit(str, (IFormatProvider)null);
			}

			/// <summary>
			///     Parse a unit string.
			/// </summary>
			/// <example>
			///     Length.ParseUnit("m", new CultureInfo("en-US"));
			/// </example>
			/// <exception cref="ArgumentNullException">The value of 'str' cannot be null. </exception>
			/// <exception cref="UnitsNetException">Error parsing string.</exception>
			public static MassUnit ParseUnit(string str, [CanBeNull] string cultureName)
			{
				return ParseUnit(str, cultureName == null ? null : new CultureInfo(cultureName));
			}

			/// <summary>
			///     Parse a unit string.
			/// </summary>
			/// <example>
			///     Length.ParseUnit("m", new CultureInfo("en-US"));
			/// </example>
			/// <exception cref="ArgumentNullException">The value of 'str' cannot be null. </exception>
			/// <exception cref="UnitsNetException">Error parsing string.</exception>

			// Windows Runtime Component does not allow public methods/ctors with same number of parameters: https://msdn.microsoft.com/en-us/library/br230301.aspx#Overloaded methods
#if WINDOWS_UWP
			internal
#else
			public
#endif
			static MassUnit ParseUnit(string str, IFormatProvider formatProvider = null)
			{
				if (str == null) throw new ArgumentNullException("str");

				var unitSystem = UnitSystem.GetCached(formatProvider);
				var unit = unitSystem.Parse<MassUnit>(str.Trim());

				if (unit == MassUnit.Undefined)
				{
					var newEx = new UnitsNetException("Error parsing string. The unit is not a recognized MassUnit.");
					newEx.Data["input"] = str;
					newEx.Data["formatprovider"] = formatProvider?.ToString() ?? "(null)";
					throw newEx;
				}

				return unit;
			}

			#endregion

			/// <summary>
			///     Set the default unit used by ToString(). Default is Kilogram
			/// </summary>
			public static MassUnit ToStringDefaultUnit { get; set; } = MassUnit.Kilogram;

			/// <summary>
			///     Get default string representation of value and unit.
			/// </summary>
			/// <returns>String representation.</returns>
			public override string ToString()
			{
				return ToString(ToStringDefaultUnit);
			}

			/// <summary>
			///     Get string representation of value and unit. Using current UI culture and two significant digits after radix.
			/// </summary>
			/// <param name="unit">Unit representation to use.</param>
			/// <returns>String representation.</returns>
			public string ToString(MassUnit unit)
			{
				return ToString(unit, null, 2);
			}

			/// <summary>
			///     Get string representation of value and unit. Using two significant digits after radix.
			/// </summary>
			/// <param name="unit">Unit representation to use.</param>
			/// <param name="culture">Culture to use for localization and number formatting.</param>
			/// <returns>String representation.</returns>
			public string ToString(MassUnit unit, [CanBeNull] Culture culture)
			{
				return ToString(unit, culture, 2);
			}

			/// <summary>
			///     Get string representation of value and unit.
			/// </summary>
			/// <param name="unit">Unit representation to use.</param>
			/// <param name="culture">Culture to use for localization and number formatting.</param>
			/// <param name="significantDigitsAfterRadix">The number of significant digits after the radix point.</param>
			/// <returns>String representation.</returns>
			[UsedImplicitly]
			public string ToString(MassUnit unit, [CanBeNull] Culture culture, int significantDigitsAfterRadix)
			{
				Number<T, C>  value = As(unit);
				string format = UnitFormatter.GetFormat((double)value, significantDigitsAfterRadix);
				return ToString(unit, culture, format);
			}

			/// <summary>
			///     Get string representation of value and unit.
			/// </summary>
			/// <param name="culture">Culture to use for localization and number formatting.</param>
			/// <param name="unit">Unit representation to use.</param>
			/// <param name="format">String format to use. Default:  "{0:0.##} {1} for value and unit abbreviation respectively."</param>
			/// <param name="args">Arguments for string format. Value and unit are implictly included as arguments 0 and 1.</param>
			/// <returns>String representation.</returns>
			[UsedImplicitly]
			public string ToString(MassUnit unit, [CanBeNull] Culture culture, [NotNull] string format,
				[NotNull] params object[] args)
			{
				if (format == null) throw new ArgumentNullException(nameof(format));
				if (args == null) throw new ArgumentNullException(nameof(args));

			// Windows Runtime Component does not support CultureInfo type, so use culture name string for public methods instead: https://msdn.microsoft.com/en-us/library/br230301.aspx
#if WINDOWS_UWP
				IFormatProvider formatProvider = culture == null ? null : new CultureInfo(culture);
#else
				IFormatProvider formatProvider = culture;
#endif
				Number<T, C>  value = As(unit);
				object[] formatArgs = UnitFormatter.GetFormatArgs(unit, (double)value, formatProvider, args);
				return string.Format(formatProvider, format, formatArgs);
			}

			/// <summary>
			/// Represents the largest possible value of Mass
			/// </summary>
			public static Number<T, C> MaxValue
			{
				get
				{
					return Number<T, C>.MaxValue;
				}
			}

			/// <summary>
			/// Represents the smallest possible value of Mass
			/// </summary>
			public static Number<T, C> MinValue
			{
				get
				{
					return Number<T, C>.MinValue;
				}
			}
		}
	}
}
